"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AssetStatus$inboundSchema = exports.AssetPhase$ = exports.AssetPhase$outboundSchema = exports.AssetPhase$inboundSchema = exports.AssetStorage$ = exports.AssetStorage$outboundSchema = exports.AssetStorage$inboundSchema = exports.AssetIpfs$ = exports.AssetIpfs$outboundSchema = exports.AssetIpfs$inboundSchema = exports.AssetSpec$ = exports.AssetSpec$outboundSchema = exports.AssetSpec$inboundSchema = exports.AssetNftMetadata$ = exports.AssetNftMetadata$outboundSchema = exports.AssetNftMetadata$inboundSchema = exports.AssetNftMetadataTemplate$ = exports.AssetNftMetadataTemplate$outboundSchema = exports.AssetNftMetadataTemplate$inboundSchema = exports.Source$ = exports.Source$outboundSchema = exports.Source$inboundSchema = exports.Asset1$ = exports.Asset1$outboundSchema = exports.Asset1$inboundSchema = exports.AssetSchemasType$ = exports.AssetSchemasType$outboundSchema = exports.AssetSchemasType$inboundSchema = exports.Two$ = exports.Two$outboundSchema = exports.Two$inboundSchema = exports.AssetSchemasSourceType$ = exports.AssetSchemasSourceType$outboundSchema = exports.AssetSchemasSourceType$inboundSchema = exports.Asset3$ = exports.Asset3$outboundSchema = exports.Asset3$inboundSchema = exports.AssetSchemasSource3Type$ = exports.AssetSchemasSource3Type$outboundSchema = exports.AssetSchemasSource3Type$inboundSchema = exports.AssetType$ = exports.AssetType$outboundSchema = exports.AssetType$inboundSchema = exports.AssetSchemasVideoSpecType = exports.AssetPhase = exports.AssetNftMetadataTemplate = exports.AssetSchemasType = exports.AssetSchemasSourceType = exports.AssetSchemasSource3Type = exports.AssetType = void 0;
exports.Asset$ = exports.Asset$outboundSchema = exports.Asset$inboundSchema = exports.VideoSpec$ = exports.VideoSpec$outboundSchema = exports.VideoSpec$inboundSchema = exports.Tracks$ = exports.Tracks$outboundSchema = exports.Tracks$inboundSchema = exports.AssetSchemasVideoSpecType$ = exports.AssetSchemasVideoSpecType$outboundSchema = exports.AssetSchemasVideoSpecType$inboundSchema = exports.Hash$ = exports.Hash$outboundSchema = exports.Hash$inboundSchema = exports.AssetStatus$ = exports.AssetStatus$outboundSchema = void 0;
exports.asset3ToJSON = asset3ToJSON;
exports.asset3FromJSON = asset3FromJSON;
exports.twoToJSON = twoToJSON;
exports.twoFromJSON = twoFromJSON;
exports.asset1ToJSON = asset1ToJSON;
exports.asset1FromJSON = asset1FromJSON;
exports.sourceToJSON = sourceToJSON;
exports.sourceFromJSON = sourceFromJSON;
exports.assetNftMetadataToJSON = assetNftMetadataToJSON;
exports.assetNftMetadataFromJSON = assetNftMetadataFromJSON;
exports.assetSpecToJSON = assetSpecToJSON;
exports.assetSpecFromJSON = assetSpecFromJSON;
exports.assetIpfsToJSON = assetIpfsToJSON;
exports.assetIpfsFromJSON = assetIpfsFromJSON;
exports.assetStorageToJSON = assetStorageToJSON;
exports.assetStorageFromJSON = assetStorageFromJSON;
exports.assetStatusToJSON = assetStatusToJSON;
exports.assetStatusFromJSON = assetStatusFromJSON;
exports.hashToJSON = hashToJSON;
exports.hashFromJSON = hashFromJSON;
exports.tracksToJSON = tracksToJSON;
exports.tracksFromJSON = tracksFromJSON;
exports.videoSpecToJSON = videoSpecToJSON;
exports.videoSpecFromJSON = videoSpecFromJSON;
exports.assetToJSON = assetToJSON;
exports.assetFromJSON = assetFromJSON;
const z = __importStar(require("zod"));
const primitives_js_1 = require("../../lib/primitives.js");
const schemas_js_1 = require("../../lib/schemas.js");
const creatorid_js_1 = require("./creatorid.js");
const encryptionoutput_js_1 = require("./encryptionoutput.js");
const ipfsfileinfo_js_1 = require("./ipfsfileinfo.js");
const playbackpolicy_js_1 = require("./playbackpolicy.js");
const storagestatus_js_1 = require("./storagestatus.js");
const transcodeprofile_js_1 = require("./transcodeprofile.js");
/**
 * Type of the asset.
 */
var AssetType;
(function (AssetType) {
    AssetType["Video"] = "video";
    AssetType["Audio"] = "audio";
})(AssetType || (exports.AssetType = AssetType = {}));
var AssetSchemasSource3Type;
(function (AssetSchemasSource3Type) {
    AssetSchemasSource3Type["DirectUpload"] = "directUpload";
    AssetSchemasSource3Type["Clip"] = "clip";
})(AssetSchemasSource3Type || (exports.AssetSchemasSource3Type = AssetSchemasSource3Type = {}));
var AssetSchemasSourceType;
(function (AssetSchemasSourceType) {
    AssetSchemasSourceType["Recording"] = "recording";
})(AssetSchemasSourceType || (exports.AssetSchemasSourceType = AssetSchemasSourceType = {}));
var AssetSchemasType;
(function (AssetSchemasType) {
    AssetSchemasType["Url"] = "url";
})(AssetSchemasType || (exports.AssetSchemasType = AssetSchemasType = {}));
/**
 * Name of the NFT metadata template to export. 'player'
 *
 * @remarks
 * will embed the Livepeer Player on the NFT while 'file'
 * will reference only the immutable MP4 files.
 */
var AssetNftMetadataTemplate;
(function (AssetNftMetadataTemplate) {
    AssetNftMetadataTemplate["File"] = "file";
    AssetNftMetadataTemplate["Player"] = "player";
})(AssetNftMetadataTemplate || (exports.AssetNftMetadataTemplate = AssetNftMetadataTemplate = {}));
/**
 * Phase of the asset
 */
var AssetPhase;
(function (AssetPhase) {
    AssetPhase["Uploading"] = "uploading";
    AssetPhase["Waiting"] = "waiting";
    AssetPhase["Processing"] = "processing";
    AssetPhase["Ready"] = "ready";
    AssetPhase["Failed"] = "failed";
    AssetPhase["Deleting"] = "deleting";
    AssetPhase["Deleted"] = "deleted";
})(AssetPhase || (exports.AssetPhase = AssetPhase = {}));
/**
 * type of track
 */
var AssetSchemasVideoSpecType;
(function (AssetSchemasVideoSpecType) {
    AssetSchemasVideoSpecType["Video"] = "video";
    AssetSchemasVideoSpecType["Audio"] = "audio";
})(AssetSchemasVideoSpecType || (exports.AssetSchemasVideoSpecType = AssetSchemasVideoSpecType = {}));
/** @internal */
exports.AssetType$inboundSchema = z
    .nativeEnum(AssetType);
/** @internal */
exports.AssetType$outboundSchema = exports.AssetType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var AssetType$;
(function (AssetType$) {
    /** @deprecated use `AssetType$inboundSchema` instead. */
    AssetType$.inboundSchema = exports.AssetType$inboundSchema;
    /** @deprecated use `AssetType$outboundSchema` instead. */
    AssetType$.outboundSchema = exports.AssetType$outboundSchema;
})(AssetType$ || (exports.AssetType$ = AssetType$ = {}));
/** @internal */
exports.AssetSchemasSource3Type$inboundSchema = z.nativeEnum(AssetSchemasSource3Type);
/** @internal */
exports.AssetSchemasSource3Type$outboundSchema = exports.AssetSchemasSource3Type$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var AssetSchemasSource3Type$;
(function (AssetSchemasSource3Type$) {
    /** @deprecated use `AssetSchemasSource3Type$inboundSchema` instead. */
    AssetSchemasSource3Type$.inboundSchema = exports.AssetSchemasSource3Type$inboundSchema;
    /** @deprecated use `AssetSchemasSource3Type$outboundSchema` instead. */
    AssetSchemasSource3Type$.outboundSchema = exports.AssetSchemasSource3Type$outboundSchema;
})(AssetSchemasSource3Type$ || (exports.AssetSchemasSource3Type$ = AssetSchemasSource3Type$ = {}));
/** @internal */
exports.Asset3$inboundSchema = z
    .object({
    type: exports.AssetSchemasSource3Type$inboundSchema,
    encryption: encryptionoutput_js_1.EncryptionOutput$inboundSchema.optional(),
    sourceId: z.string().optional(),
    sessionId: z.string().optional(),
    playbackId: z.string().optional(),
    requesterId: z.string().optional(),
    assetId: z.string().optional(),
});
/** @internal */
exports.Asset3$outboundSchema = z.object({
    type: exports.AssetSchemasSource3Type$outboundSchema,
    encryption: encryptionoutput_js_1.EncryptionOutput$outboundSchema.optional(),
    sourceId: z.string().optional(),
    sessionId: z.string().optional(),
    playbackId: z.string().optional(),
    requesterId: z.string().optional(),
    assetId: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var Asset3$;
(function (Asset3$) {
    /** @deprecated use `Asset3$inboundSchema` instead. */
    Asset3$.inboundSchema = exports.Asset3$inboundSchema;
    /** @deprecated use `Asset3$outboundSchema` instead. */
    Asset3$.outboundSchema = exports.Asset3$outboundSchema;
})(Asset3$ || (exports.Asset3$ = Asset3$ = {}));
function asset3ToJSON(asset3) {
    return JSON.stringify(exports.Asset3$outboundSchema.parse(asset3));
}
function asset3FromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.Asset3$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Asset3' from JSON`);
}
/** @internal */
exports.AssetSchemasSourceType$inboundSchema = z.nativeEnum(AssetSchemasSourceType);
/** @internal */
exports.AssetSchemasSourceType$outboundSchema = exports.AssetSchemasSourceType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var AssetSchemasSourceType$;
(function (AssetSchemasSourceType$) {
    /** @deprecated use `AssetSchemasSourceType$inboundSchema` instead. */
    AssetSchemasSourceType$.inboundSchema = exports.AssetSchemasSourceType$inboundSchema;
    /** @deprecated use `AssetSchemasSourceType$outboundSchema` instead. */
    AssetSchemasSourceType$.outboundSchema = exports.AssetSchemasSourceType$outboundSchema;
})(AssetSchemasSourceType$ || (exports.AssetSchemasSourceType$ = AssetSchemasSourceType$ = {}));
/** @internal */
exports.Two$inboundSchema = z
    .object({
    type: exports.AssetSchemasSourceType$inboundSchema,
    sessionId: z.string(),
});
/** @internal */
exports.Two$outboundSchema = z
    .object({
    type: exports.AssetSchemasSourceType$outboundSchema,
    sessionId: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var Two$;
(function (Two$) {
    /** @deprecated use `Two$inboundSchema` instead. */
    Two$.inboundSchema = exports.Two$inboundSchema;
    /** @deprecated use `Two$outboundSchema` instead. */
    Two$.outboundSchema = exports.Two$outboundSchema;
})(Two$ || (exports.Two$ = Two$ = {}));
function twoToJSON(two) {
    return JSON.stringify(exports.Two$outboundSchema.parse(two));
}
function twoFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.Two$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Two' from JSON`);
}
/** @internal */
exports.AssetSchemasType$inboundSchema = z.nativeEnum(AssetSchemasType);
/** @internal */
exports.AssetSchemasType$outboundSchema = exports.AssetSchemasType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var AssetSchemasType$;
(function (AssetSchemasType$) {
    /** @deprecated use `AssetSchemasType$inboundSchema` instead. */
    AssetSchemasType$.inboundSchema = exports.AssetSchemasType$inboundSchema;
    /** @deprecated use `AssetSchemasType$outboundSchema` instead. */
    AssetSchemasType$.outboundSchema = exports.AssetSchemasType$outboundSchema;
})(AssetSchemasType$ || (exports.AssetSchemasType$ = AssetSchemasType$ = {}));
/** @internal */
exports.Asset1$inboundSchema = z
    .object({
    type: exports.AssetSchemasType$inboundSchema,
    url: z.string(),
    gatewayUrl: z.string().optional(),
    encryption: encryptionoutput_js_1.EncryptionOutput$inboundSchema.optional(),
});
/** @internal */
exports.Asset1$outboundSchema = z.object({
    type: exports.AssetSchemasType$outboundSchema,
    url: z.string(),
    gatewayUrl: z.string().optional(),
    encryption: encryptionoutput_js_1.EncryptionOutput$outboundSchema.optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var Asset1$;
(function (Asset1$) {
    /** @deprecated use `Asset1$inboundSchema` instead. */
    Asset1$.inboundSchema = exports.Asset1$inboundSchema;
    /** @deprecated use `Asset1$outboundSchema` instead. */
    Asset1$.outboundSchema = exports.Asset1$outboundSchema;
})(Asset1$ || (exports.Asset1$ = Asset1$ = {}));
function asset1ToJSON(asset1) {
    return JSON.stringify(exports.Asset1$outboundSchema.parse(asset1));
}
function asset1FromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.Asset1$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Asset1' from JSON`);
}
/** @internal */
exports.Source$inboundSchema = z
    .union([
    z.lazy(() => exports.Two$inboundSchema),
    z.lazy(() => exports.Asset1$inboundSchema),
    z.lazy(() => exports.Asset3$inboundSchema),
]);
/** @internal */
exports.Source$outboundSchema = z.union([
    z.lazy(() => exports.Two$outboundSchema),
    z.lazy(() => exports.Asset1$outboundSchema),
    z.lazy(() => exports.Asset3$outboundSchema),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var Source$;
(function (Source$) {
    /** @deprecated use `Source$inboundSchema` instead. */
    Source$.inboundSchema = exports.Source$inboundSchema;
    /** @deprecated use `Source$outboundSchema` instead. */
    Source$.outboundSchema = exports.Source$outboundSchema;
})(Source$ || (exports.Source$ = Source$ = {}));
function sourceToJSON(source) {
    return JSON.stringify(exports.Source$outboundSchema.parse(source));
}
function sourceFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.Source$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Source' from JSON`);
}
/** @internal */
exports.AssetNftMetadataTemplate$inboundSchema = z.nativeEnum(AssetNftMetadataTemplate);
/** @internal */
exports.AssetNftMetadataTemplate$outboundSchema = exports.AssetNftMetadataTemplate$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var AssetNftMetadataTemplate$;
(function (AssetNftMetadataTemplate$) {
    /** @deprecated use `AssetNftMetadataTemplate$inboundSchema` instead. */
    AssetNftMetadataTemplate$.inboundSchema = exports.AssetNftMetadataTemplate$inboundSchema;
    /** @deprecated use `AssetNftMetadataTemplate$outboundSchema` instead. */
    AssetNftMetadataTemplate$.outboundSchema = exports.AssetNftMetadataTemplate$outboundSchema;
})(AssetNftMetadataTemplate$ || (exports.AssetNftMetadataTemplate$ = AssetNftMetadataTemplate$ = {}));
/** @internal */
exports.AssetNftMetadata$inboundSchema = z.object({});
/** @internal */
exports.AssetNftMetadata$outboundSchema = z.object({});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var AssetNftMetadata$;
(function (AssetNftMetadata$) {
    /** @deprecated use `AssetNftMetadata$inboundSchema` instead. */
    AssetNftMetadata$.inboundSchema = exports.AssetNftMetadata$inboundSchema;
    /** @deprecated use `AssetNftMetadata$outboundSchema` instead. */
    AssetNftMetadata$.outboundSchema = exports.AssetNftMetadata$outboundSchema;
})(AssetNftMetadata$ || (exports.AssetNftMetadata$ = AssetNftMetadata$ = {}));
function assetNftMetadataToJSON(assetNftMetadata) {
    return JSON.stringify(exports.AssetNftMetadata$outboundSchema.parse(assetNftMetadata));
}
function assetNftMetadataFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.AssetNftMetadata$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'AssetNftMetadata' from JSON`);
}
/** @internal */
exports.AssetSpec$inboundSchema = z.object({
    nftMetadataTemplate: exports.AssetNftMetadataTemplate$inboundSchema.default(AssetNftMetadataTemplate.File),
    nftMetadata: z.lazy(() => exports.AssetNftMetadata$inboundSchema).optional(),
});
/** @internal */
exports.AssetSpec$outboundSchema = z.object({
    nftMetadataTemplate: exports.AssetNftMetadataTemplate$outboundSchema.default(AssetNftMetadataTemplate.File),
    nftMetadata: z.lazy(() => exports.AssetNftMetadata$outboundSchema).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var AssetSpec$;
(function (AssetSpec$) {
    /** @deprecated use `AssetSpec$inboundSchema` instead. */
    AssetSpec$.inboundSchema = exports.AssetSpec$inboundSchema;
    /** @deprecated use `AssetSpec$outboundSchema` instead. */
    AssetSpec$.outboundSchema = exports.AssetSpec$outboundSchema;
})(AssetSpec$ || (exports.AssetSpec$ = AssetSpec$ = {}));
function assetSpecToJSON(assetSpec) {
    return JSON.stringify(exports.AssetSpec$outboundSchema.parse(assetSpec));
}
function assetSpecFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.AssetSpec$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'AssetSpec' from JSON`);
}
/** @internal */
exports.AssetIpfs$inboundSchema = z.object({
    spec: z.lazy(() => exports.AssetSpec$inboundSchema).optional(),
    $ref: z.any().optional(),
    nftMetadata: ipfsfileinfo_js_1.IpfsFileInfo$inboundSchema.optional(),
    updatedAt: z.number().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "$ref": "dollarRef",
    });
});
/** @internal */
exports.AssetIpfs$outboundSchema = z.object({
    spec: z.lazy(() => exports.AssetSpec$outboundSchema).optional(),
    dollarRef: z.any().optional(),
    nftMetadata: ipfsfileinfo_js_1.IpfsFileInfo$outboundSchema.optional(),
    updatedAt: z.number().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        dollarRef: "$ref",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var AssetIpfs$;
(function (AssetIpfs$) {
    /** @deprecated use `AssetIpfs$inboundSchema` instead. */
    AssetIpfs$.inboundSchema = exports.AssetIpfs$inboundSchema;
    /** @deprecated use `AssetIpfs$outboundSchema` instead. */
    AssetIpfs$.outboundSchema = exports.AssetIpfs$outboundSchema;
})(AssetIpfs$ || (exports.AssetIpfs$ = AssetIpfs$ = {}));
function assetIpfsToJSON(assetIpfs) {
    return JSON.stringify(exports.AssetIpfs$outboundSchema.parse(assetIpfs));
}
function assetIpfsFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.AssetIpfs$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'AssetIpfs' from JSON`);
}
/** @internal */
exports.AssetStorage$inboundSchema = z.object({
    ipfs: z.lazy(() => exports.AssetIpfs$inboundSchema).optional(),
    status: storagestatus_js_1.StorageStatus$inboundSchema.optional(),
});
/** @internal */
exports.AssetStorage$outboundSchema = z.object({
    ipfs: z.lazy(() => exports.AssetIpfs$outboundSchema).optional(),
    status: storagestatus_js_1.StorageStatus$outboundSchema.optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var AssetStorage$;
(function (AssetStorage$) {
    /** @deprecated use `AssetStorage$inboundSchema` instead. */
    AssetStorage$.inboundSchema = exports.AssetStorage$inboundSchema;
    /** @deprecated use `AssetStorage$outboundSchema` instead. */
    AssetStorage$.outboundSchema = exports.AssetStorage$outboundSchema;
})(AssetStorage$ || (exports.AssetStorage$ = AssetStorage$ = {}));
function assetStorageToJSON(assetStorage) {
    return JSON.stringify(exports.AssetStorage$outboundSchema.parse(assetStorage));
}
function assetStorageFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.AssetStorage$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'AssetStorage' from JSON`);
}
/** @internal */
exports.AssetPhase$inboundSchema = z
    .nativeEnum(AssetPhase);
/** @internal */
exports.AssetPhase$outboundSchema = exports.AssetPhase$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var AssetPhase$;
(function (AssetPhase$) {
    /** @deprecated use `AssetPhase$inboundSchema` instead. */
    AssetPhase$.inboundSchema = exports.AssetPhase$inboundSchema;
    /** @deprecated use `AssetPhase$outboundSchema` instead. */
    AssetPhase$.outboundSchema = exports.AssetPhase$outboundSchema;
})(AssetPhase$ || (exports.AssetPhase$ = AssetPhase$ = {}));
/** @internal */
exports.AssetStatus$inboundSchema = z.object({
    phase: exports.AssetPhase$inboundSchema,
    updatedAt: z.number(),
    progress: z.number().optional(),
    errorMessage: z.string().optional(),
});
/** @internal */
exports.AssetStatus$outboundSchema = z.object({
    phase: exports.AssetPhase$outboundSchema,
    updatedAt: z.number(),
    progress: z.number().optional(),
    errorMessage: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var AssetStatus$;
(function (AssetStatus$) {
    /** @deprecated use `AssetStatus$inboundSchema` instead. */
    AssetStatus$.inboundSchema = exports.AssetStatus$inboundSchema;
    /** @deprecated use `AssetStatus$outboundSchema` instead. */
    AssetStatus$.outboundSchema = exports.AssetStatus$outboundSchema;
})(AssetStatus$ || (exports.AssetStatus$ = AssetStatus$ = {}));
function assetStatusToJSON(assetStatus) {
    return JSON.stringify(exports.AssetStatus$outboundSchema.parse(assetStatus));
}
function assetStatusFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.AssetStatus$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'AssetStatus' from JSON`);
}
/** @internal */
exports.Hash$inboundSchema = z
    .object({
    hash: z.string().optional(),
    algorithm: z.string().optional(),
});
/** @internal */
exports.Hash$outboundSchema = z.object({
    hash: z.string().optional(),
    algorithm: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var Hash$;
(function (Hash$) {
    /** @deprecated use `Hash$inboundSchema` instead. */
    Hash$.inboundSchema = exports.Hash$inboundSchema;
    /** @deprecated use `Hash$outboundSchema` instead. */
    Hash$.outboundSchema = exports.Hash$outboundSchema;
})(Hash$ || (exports.Hash$ = Hash$ = {}));
function hashToJSON(hash) {
    return JSON.stringify(exports.Hash$outboundSchema.parse(hash));
}
function hashFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.Hash$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Hash' from JSON`);
}
/** @internal */
exports.AssetSchemasVideoSpecType$inboundSchema = z.nativeEnum(AssetSchemasVideoSpecType);
/** @internal */
exports.AssetSchemasVideoSpecType$outboundSchema = exports.AssetSchemasVideoSpecType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var AssetSchemasVideoSpecType$;
(function (AssetSchemasVideoSpecType$) {
    /** @deprecated use `AssetSchemasVideoSpecType$inboundSchema` instead. */
    AssetSchemasVideoSpecType$.inboundSchema = exports.AssetSchemasVideoSpecType$inboundSchema;
    /** @deprecated use `AssetSchemasVideoSpecType$outboundSchema` instead. */
    AssetSchemasVideoSpecType$.outboundSchema = exports.AssetSchemasVideoSpecType$outboundSchema;
})(AssetSchemasVideoSpecType$ || (exports.AssetSchemasVideoSpecType$ = AssetSchemasVideoSpecType$ = {}));
/** @internal */
exports.Tracks$inboundSchema = z
    .object({
    type: exports.AssetSchemasVideoSpecType$inboundSchema,
    codec: z.string(),
    startTime: z.number().optional(),
    duration: z.number().optional(),
    bitrate: z.number().optional(),
    width: z.number().optional(),
    height: z.number().optional(),
    pixelFormat: z.string().optional(),
    fps: z.number().optional(),
    channels: z.number().optional(),
    sampleRate: z.number().optional(),
    bitDepth: z.number().optional(),
});
/** @internal */
exports.Tracks$outboundSchema = z.object({
    type: exports.AssetSchemasVideoSpecType$outboundSchema,
    codec: z.string(),
    startTime: z.number().optional(),
    duration: z.number().optional(),
    bitrate: z.number().optional(),
    width: z.number().optional(),
    height: z.number().optional(),
    pixelFormat: z.string().optional(),
    fps: z.number().optional(),
    channels: z.number().optional(),
    sampleRate: z.number().optional(),
    bitDepth: z.number().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var Tracks$;
(function (Tracks$) {
    /** @deprecated use `Tracks$inboundSchema` instead. */
    Tracks$.inboundSchema = exports.Tracks$inboundSchema;
    /** @deprecated use `Tracks$outboundSchema` instead. */
    Tracks$.outboundSchema = exports.Tracks$outboundSchema;
})(Tracks$ || (exports.Tracks$ = Tracks$ = {}));
function tracksToJSON(tracks) {
    return JSON.stringify(exports.Tracks$outboundSchema.parse(tracks));
}
function tracksFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.Tracks$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Tracks' from JSON`);
}
/** @internal */
exports.VideoSpec$inboundSchema = z.object({
    format: z.string().optional(),
    duration: z.number().optional(),
    bitrate: z.number().optional(),
    tracks: z.array(z.lazy(() => exports.Tracks$inboundSchema)).optional(),
});
/** @internal */
exports.VideoSpec$outboundSchema = z.object({
    format: z.string().optional(),
    duration: z.number().optional(),
    bitrate: z.number().optional(),
    tracks: z.array(z.lazy(() => exports.Tracks$outboundSchema)).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var VideoSpec$;
(function (VideoSpec$) {
    /** @deprecated use `VideoSpec$inboundSchema` instead. */
    VideoSpec$.inboundSchema = exports.VideoSpec$inboundSchema;
    /** @deprecated use `VideoSpec$outboundSchema` instead. */
    VideoSpec$.outboundSchema = exports.VideoSpec$outboundSchema;
})(VideoSpec$ || (exports.VideoSpec$ = VideoSpec$ = {}));
function videoSpecToJSON(videoSpec) {
    return JSON.stringify(exports.VideoSpec$outboundSchema.parse(videoSpec));
}
function videoSpecFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.VideoSpec$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'VideoSpec' from JSON`);
}
/** @internal */
exports.Asset$inboundSchema = z
    .object({
    id: z.string(),
    type: exports.AssetType$inboundSchema.optional(),
    playbackId: z.string().optional(),
    userId: z.string().optional(),
    playbackUrl: z.string().optional(),
    downloadUrl: z.string().optional(),
    playbackPolicy: z.nullable(playbackpolicy_js_1.PlaybackPolicy$inboundSchema).optional(),
    source: z.union([
        z.lazy(() => exports.Two$inboundSchema),
        z.lazy(() => exports.Asset1$inboundSchema),
        z.lazy(() => exports.Asset3$inboundSchema),
    ]),
    creatorId: creatorid_js_1.CreatorId$inboundSchema.optional(),
    profiles: z.array(transcodeprofile_js_1.TranscodeProfile$inboundSchema).optional(),
    storage: z.lazy(() => exports.AssetStorage$inboundSchema).optional(),
    status: z.lazy(() => exports.AssetStatus$inboundSchema).optional(),
    name: z.string(),
    projectId: z.string().optional(),
    createdAt: z.number().optional(),
    createdByTokenName: z.string().optional(),
    size: z.number().optional(),
    hash: z.nullable(z.array(z.lazy(() => exports.Hash$inboundSchema))).optional(),
    videoSpec: z.lazy(() => exports.VideoSpec$inboundSchema).optional(),
});
/** @internal */
exports.Asset$outboundSchema = z.object({
    id: z.string(),
    type: exports.AssetType$outboundSchema.optional(),
    playbackId: z.string().optional(),
    userId: z.string().optional(),
    playbackUrl: z.string().optional(),
    downloadUrl: z.string().optional(),
    playbackPolicy: z.nullable(playbackpolicy_js_1.PlaybackPolicy$outboundSchema).optional(),
    source: z.union([
        z.lazy(() => exports.Two$outboundSchema),
        z.lazy(() => exports.Asset1$outboundSchema),
        z.lazy(() => exports.Asset3$outboundSchema),
    ]),
    creatorId: creatorid_js_1.CreatorId$outboundSchema.optional(),
    profiles: z.array(transcodeprofile_js_1.TranscodeProfile$outboundSchema).optional(),
    storage: z.lazy(() => exports.AssetStorage$outboundSchema).optional(),
    status: z.lazy(() => exports.AssetStatus$outboundSchema).optional(),
    name: z.string(),
    projectId: z.string().optional(),
    createdAt: z.number().optional(),
    createdByTokenName: z.string().optional(),
    size: z.number().optional(),
    hash: z.nullable(z.array(z.lazy(() => exports.Hash$outboundSchema))).optional(),
    videoSpec: z.lazy(() => exports.VideoSpec$outboundSchema).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var Asset$;
(function (Asset$) {
    /** @deprecated use `Asset$inboundSchema` instead. */
    Asset$.inboundSchema = exports.Asset$inboundSchema;
    /** @deprecated use `Asset$outboundSchema` instead. */
    Asset$.outboundSchema = exports.Asset$outboundSchema;
})(Asset$ || (exports.Asset$ = Asset$ = {}));
function assetToJSON(asset) {
    return JSON.stringify(exports.Asset$outboundSchema.parse(asset));
}
function assetFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.Asset$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Asset' from JSON`);
}
//# sourceMappingURL=asset.js.map