import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import { StorageStatus, StorageStatus$Outbound } from "./storagestatus.js";
/**
 * Video Metadata EIP-712 primaryType
 */
export declare enum PrimaryType {
    VideoAttestation = "VideoAttestation"
}
export declare enum Name {
    VerifiableVideo = "Verifiable Video"
}
export declare enum Version {
    One = "1"
}
/**
 * Video Metadata EIP-712 domain
 */
export type Domain = {
    name: Name;
    version: Version;
};
export type Attestations = {
    role: string;
    address: string;
};
/**
 * Video Metadata EIP-712 message content
 */
export type Message = {
    video: string;
    attestations: Array<Attestations>;
    signer: string;
    timestamp: number;
};
export declare enum SignatureType {
    Eip712 = "eip712",
    Flow = "flow"
}
export type AttestationIpfs = {
    dollarRef?: any | undefined;
    /**
     * Timestamp (in milliseconds) at which IPFS export task was updated
     *
     * @remarks
     */
    updatedAt?: number | undefined;
};
export type AttestationStorage = {
    ipfs?: AttestationIpfs | undefined;
    status?: StorageStatus | undefined;
};
export type Attestation = {
    id?: string | undefined;
    /**
     * Video Metadata EIP-712 primaryType
     */
    primaryType: PrimaryType;
    /**
     * Video Metadata EIP-712 domain
     */
    domain: Domain;
    /**
     * Video Metadata EIP-712 message content
     */
    message: Message;
    /**
     * Video Metadata EIP-712 message signature
     */
    signature: string;
    /**
     * Timestamp (in milliseconds) at which the object was created
     */
    createdAt?: number | undefined;
    signatureType?: SignatureType | undefined;
    storage?: AttestationStorage | undefined;
};
/** @internal */
export declare const PrimaryType$inboundSchema: z.ZodNativeEnum<typeof PrimaryType>;
/** @internal */
export declare const PrimaryType$outboundSchema: z.ZodNativeEnum<typeof PrimaryType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace PrimaryType$ {
    /** @deprecated use `PrimaryType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<typeof PrimaryType>;
    /** @deprecated use `PrimaryType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<typeof PrimaryType>;
}
/** @internal */
export declare const Name$inboundSchema: z.ZodNativeEnum<typeof Name>;
/** @internal */
export declare const Name$outboundSchema: z.ZodNativeEnum<typeof Name>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Name$ {
    /** @deprecated use `Name$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<typeof Name>;
    /** @deprecated use `Name$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<typeof Name>;
}
/** @internal */
export declare const Version$inboundSchema: z.ZodNativeEnum<typeof Version>;
/** @internal */
export declare const Version$outboundSchema: z.ZodNativeEnum<typeof Version>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Version$ {
    /** @deprecated use `Version$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<typeof Version>;
    /** @deprecated use `Version$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<typeof Version>;
}
/** @internal */
export declare const Domain$inboundSchema: z.ZodType<Domain, z.ZodTypeDef, unknown>;
/** @internal */
export type Domain$Outbound = {
    name: string;
    version: string;
};
/** @internal */
export declare const Domain$outboundSchema: z.ZodType<Domain$Outbound, z.ZodTypeDef, Domain>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Domain$ {
    /** @deprecated use `Domain$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Domain, z.ZodTypeDef, unknown>;
    /** @deprecated use `Domain$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Domain$Outbound, z.ZodTypeDef, Domain>;
    /** @deprecated use `Domain$Outbound` instead. */
    type Outbound = Domain$Outbound;
}
export declare function domainToJSON(domain: Domain): string;
export declare function domainFromJSON(jsonString: string): SafeParseResult<Domain, SDKValidationError>;
/** @internal */
export declare const Attestations$inboundSchema: z.ZodType<Attestations, z.ZodTypeDef, unknown>;
/** @internal */
export type Attestations$Outbound = {
    role: string;
    address: string;
};
/** @internal */
export declare const Attestations$outboundSchema: z.ZodType<Attestations$Outbound, z.ZodTypeDef, Attestations>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Attestations$ {
    /** @deprecated use `Attestations$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Attestations, z.ZodTypeDef, unknown>;
    /** @deprecated use `Attestations$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Attestations$Outbound, z.ZodTypeDef, Attestations>;
    /** @deprecated use `Attestations$Outbound` instead. */
    type Outbound = Attestations$Outbound;
}
export declare function attestationsToJSON(attestations: Attestations): string;
export declare function attestationsFromJSON(jsonString: string): SafeParseResult<Attestations, SDKValidationError>;
/** @internal */
export declare const Message$inboundSchema: z.ZodType<Message, z.ZodTypeDef, unknown>;
/** @internal */
export type Message$Outbound = {
    video: string;
    attestations: Array<Attestations$Outbound>;
    signer: string;
    timestamp: number;
};
/** @internal */
export declare const Message$outboundSchema: z.ZodType<Message$Outbound, z.ZodTypeDef, Message>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Message$ {
    /** @deprecated use `Message$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Message, z.ZodTypeDef, unknown>;
    /** @deprecated use `Message$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Message$Outbound, z.ZodTypeDef, Message>;
    /** @deprecated use `Message$Outbound` instead. */
    type Outbound = Message$Outbound;
}
export declare function messageToJSON(message: Message): string;
export declare function messageFromJSON(jsonString: string): SafeParseResult<Message, SDKValidationError>;
/** @internal */
export declare const SignatureType$inboundSchema: z.ZodNativeEnum<typeof SignatureType>;
/** @internal */
export declare const SignatureType$outboundSchema: z.ZodNativeEnum<typeof SignatureType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace SignatureType$ {
    /** @deprecated use `SignatureType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<typeof SignatureType>;
    /** @deprecated use `SignatureType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<typeof SignatureType>;
}
/** @internal */
export declare const AttestationIpfs$inboundSchema: z.ZodType<AttestationIpfs, z.ZodTypeDef, unknown>;
/** @internal */
export type AttestationIpfs$Outbound = {
    $ref?: any | undefined;
    updatedAt?: number | undefined;
};
/** @internal */
export declare const AttestationIpfs$outboundSchema: z.ZodType<AttestationIpfs$Outbound, z.ZodTypeDef, AttestationIpfs>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace AttestationIpfs$ {
    /** @deprecated use `AttestationIpfs$inboundSchema` instead. */
    const inboundSchema: z.ZodType<AttestationIpfs, z.ZodTypeDef, unknown>;
    /** @deprecated use `AttestationIpfs$outboundSchema` instead. */
    const outboundSchema: z.ZodType<AttestationIpfs$Outbound, z.ZodTypeDef, AttestationIpfs>;
    /** @deprecated use `AttestationIpfs$Outbound` instead. */
    type Outbound = AttestationIpfs$Outbound;
}
export declare function attestationIpfsToJSON(attestationIpfs: AttestationIpfs): string;
export declare function attestationIpfsFromJSON(jsonString: string): SafeParseResult<AttestationIpfs, SDKValidationError>;
/** @internal */
export declare const AttestationStorage$inboundSchema: z.ZodType<AttestationStorage, z.ZodTypeDef, unknown>;
/** @internal */
export type AttestationStorage$Outbound = {
    ipfs?: AttestationIpfs$Outbound | undefined;
    status?: StorageStatus$Outbound | undefined;
};
/** @internal */
export declare const AttestationStorage$outboundSchema: z.ZodType<AttestationStorage$Outbound, z.ZodTypeDef, AttestationStorage>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace AttestationStorage$ {
    /** @deprecated use `AttestationStorage$inboundSchema` instead. */
    const inboundSchema: z.ZodType<AttestationStorage, z.ZodTypeDef, unknown>;
    /** @deprecated use `AttestationStorage$outboundSchema` instead. */
    const outboundSchema: z.ZodType<AttestationStorage$Outbound, z.ZodTypeDef, AttestationStorage>;
    /** @deprecated use `AttestationStorage$Outbound` instead. */
    type Outbound = AttestationStorage$Outbound;
}
export declare function attestationStorageToJSON(attestationStorage: AttestationStorage): string;
export declare function attestationStorageFromJSON(jsonString: string): SafeParseResult<AttestationStorage, SDKValidationError>;
/** @internal */
export declare const Attestation$inboundSchema: z.ZodType<Attestation, z.ZodTypeDef, unknown>;
/** @internal */
export type Attestation$Outbound = {
    id?: string | undefined;
    primaryType: string;
    domain: Domain$Outbound;
    message: Message$Outbound;
    signature: string;
    createdAt?: number | undefined;
    signatureType?: string | undefined;
    storage?: AttestationStorage$Outbound | undefined;
};
/** @internal */
export declare const Attestation$outboundSchema: z.ZodType<Attestation$Outbound, z.ZodTypeDef, Attestation>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Attestation$ {
    /** @deprecated use `Attestation$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Attestation, z.ZodTypeDef, unknown>;
    /** @deprecated use `Attestation$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Attestation$Outbound, z.ZodTypeDef, Attestation>;
    /** @deprecated use `Attestation$Outbound` instead. */
    type Outbound = Attestation$Outbound;
}
export declare function attestationToJSON(attestation: Attestation): string;
export declare function attestationFromJSON(jsonString: string): SafeParseResult<Attestation, SDKValidationError>;
//# sourceMappingURL=attestation.d.ts.map