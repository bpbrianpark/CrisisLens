"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Attestation$ = exports.Attestation$outboundSchema = exports.Attestation$inboundSchema = exports.AttestationStorage$ = exports.AttestationStorage$outboundSchema = exports.AttestationStorage$inboundSchema = exports.AttestationIpfs$ = exports.AttestationIpfs$outboundSchema = exports.AttestationIpfs$inboundSchema = exports.SignatureType$ = exports.SignatureType$outboundSchema = exports.SignatureType$inboundSchema = exports.Message$ = exports.Message$outboundSchema = exports.Message$inboundSchema = exports.Attestations$ = exports.Attestations$outboundSchema = exports.Attestations$inboundSchema = exports.Domain$ = exports.Domain$outboundSchema = exports.Domain$inboundSchema = exports.Version$ = exports.Version$outboundSchema = exports.Version$inboundSchema = exports.Name$ = exports.Name$outboundSchema = exports.Name$inboundSchema = exports.PrimaryType$ = exports.PrimaryType$outboundSchema = exports.PrimaryType$inboundSchema = exports.SignatureType = exports.Version = exports.Name = exports.PrimaryType = void 0;
exports.domainToJSON = domainToJSON;
exports.domainFromJSON = domainFromJSON;
exports.attestationsToJSON = attestationsToJSON;
exports.attestationsFromJSON = attestationsFromJSON;
exports.messageToJSON = messageToJSON;
exports.messageFromJSON = messageFromJSON;
exports.attestationIpfsToJSON = attestationIpfsToJSON;
exports.attestationIpfsFromJSON = attestationIpfsFromJSON;
exports.attestationStorageToJSON = attestationStorageToJSON;
exports.attestationStorageFromJSON = attestationStorageFromJSON;
exports.attestationToJSON = attestationToJSON;
exports.attestationFromJSON = attestationFromJSON;
const z = __importStar(require("zod"));
const primitives_js_1 = require("../../lib/primitives.js");
const schemas_js_1 = require("../../lib/schemas.js");
const storagestatus_js_1 = require("./storagestatus.js");
/**
 * Video Metadata EIP-712 primaryType
 */
var PrimaryType;
(function (PrimaryType) {
    PrimaryType["VideoAttestation"] = "VideoAttestation";
})(PrimaryType || (exports.PrimaryType = PrimaryType = {}));
var Name;
(function (Name) {
    Name["VerifiableVideo"] = "Verifiable Video";
})(Name || (exports.Name = Name = {}));
var Version;
(function (Version) {
    Version["One"] = "1";
})(Version || (exports.Version = Version = {}));
var SignatureType;
(function (SignatureType) {
    SignatureType["Eip712"] = "eip712";
    SignatureType["Flow"] = "flow";
})(SignatureType || (exports.SignatureType = SignatureType = {}));
/** @internal */
exports.PrimaryType$inboundSchema = z
    .nativeEnum(PrimaryType);
/** @internal */
exports.PrimaryType$outboundSchema = exports.PrimaryType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var PrimaryType$;
(function (PrimaryType$) {
    /** @deprecated use `PrimaryType$inboundSchema` instead. */
    PrimaryType$.inboundSchema = exports.PrimaryType$inboundSchema;
    /** @deprecated use `PrimaryType$outboundSchema` instead. */
    PrimaryType$.outboundSchema = exports.PrimaryType$outboundSchema;
})(PrimaryType$ || (exports.PrimaryType$ = PrimaryType$ = {}));
/** @internal */
exports.Name$inboundSchema = z.nativeEnum(Name);
/** @internal */
exports.Name$outboundSchema = exports.Name$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var Name$;
(function (Name$) {
    /** @deprecated use `Name$inboundSchema` instead. */
    Name$.inboundSchema = exports.Name$inboundSchema;
    /** @deprecated use `Name$outboundSchema` instead. */
    Name$.outboundSchema = exports.Name$outboundSchema;
})(Name$ || (exports.Name$ = Name$ = {}));
/** @internal */
exports.Version$inboundSchema = z
    .nativeEnum(Version);
/** @internal */
exports.Version$outboundSchema = exports.Version$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var Version$;
(function (Version$) {
    /** @deprecated use `Version$inboundSchema` instead. */
    Version$.inboundSchema = exports.Version$inboundSchema;
    /** @deprecated use `Version$outboundSchema` instead. */
    Version$.outboundSchema = exports.Version$outboundSchema;
})(Version$ || (exports.Version$ = Version$ = {}));
/** @internal */
exports.Domain$inboundSchema = z
    .object({
    name: exports.Name$inboundSchema,
    version: exports.Version$inboundSchema,
});
/** @internal */
exports.Domain$outboundSchema = z.object({
    name: exports.Name$outboundSchema,
    version: exports.Version$outboundSchema,
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var Domain$;
(function (Domain$) {
    /** @deprecated use `Domain$inboundSchema` instead. */
    Domain$.inboundSchema = exports.Domain$inboundSchema;
    /** @deprecated use `Domain$outboundSchema` instead. */
    Domain$.outboundSchema = exports.Domain$outboundSchema;
})(Domain$ || (exports.Domain$ = Domain$ = {}));
function domainToJSON(domain) {
    return JSON.stringify(exports.Domain$outboundSchema.parse(domain));
}
function domainFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.Domain$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Domain' from JSON`);
}
/** @internal */
exports.Attestations$inboundSchema = z.object({
    role: z.string(),
    address: z.string(),
});
/** @internal */
exports.Attestations$outboundSchema = z.object({
    role: z.string(),
    address: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var Attestations$;
(function (Attestations$) {
    /** @deprecated use `Attestations$inboundSchema` instead. */
    Attestations$.inboundSchema = exports.Attestations$inboundSchema;
    /** @deprecated use `Attestations$outboundSchema` instead. */
    Attestations$.outboundSchema = exports.Attestations$outboundSchema;
})(Attestations$ || (exports.Attestations$ = Attestations$ = {}));
function attestationsToJSON(attestations) {
    return JSON.stringify(exports.Attestations$outboundSchema.parse(attestations));
}
function attestationsFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.Attestations$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Attestations' from JSON`);
}
/** @internal */
exports.Message$inboundSchema = z.object({
    video: z.string(),
    attestations: z.array(z.lazy(() => exports.Attestations$inboundSchema)),
    signer: z.string(),
    timestamp: z.number(),
});
/** @internal */
exports.Message$outboundSchema = z.object({
    video: z.string(),
    attestations: z.array(z.lazy(() => exports.Attestations$outboundSchema)),
    signer: z.string(),
    timestamp: z.number(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var Message$;
(function (Message$) {
    /** @deprecated use `Message$inboundSchema` instead. */
    Message$.inboundSchema = exports.Message$inboundSchema;
    /** @deprecated use `Message$outboundSchema` instead. */
    Message$.outboundSchema = exports.Message$outboundSchema;
})(Message$ || (exports.Message$ = Message$ = {}));
function messageToJSON(message) {
    return JSON.stringify(exports.Message$outboundSchema.parse(message));
}
function messageFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.Message$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Message' from JSON`);
}
/** @internal */
exports.SignatureType$inboundSchema = z.nativeEnum(SignatureType);
/** @internal */
exports.SignatureType$outboundSchema = exports.SignatureType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var SignatureType$;
(function (SignatureType$) {
    /** @deprecated use `SignatureType$inboundSchema` instead. */
    SignatureType$.inboundSchema = exports.SignatureType$inboundSchema;
    /** @deprecated use `SignatureType$outboundSchema` instead. */
    SignatureType$.outboundSchema = exports.SignatureType$outboundSchema;
})(SignatureType$ || (exports.SignatureType$ = SignatureType$ = {}));
/** @internal */
exports.AttestationIpfs$inboundSchema = z.object({
    $ref: z.any().optional(),
    updatedAt: z.number().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "$ref": "dollarRef",
    });
});
/** @internal */
exports.AttestationIpfs$outboundSchema = z.object({
    dollarRef: z.any().optional(),
    updatedAt: z.number().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        dollarRef: "$ref",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var AttestationIpfs$;
(function (AttestationIpfs$) {
    /** @deprecated use `AttestationIpfs$inboundSchema` instead. */
    AttestationIpfs$.inboundSchema = exports.AttestationIpfs$inboundSchema;
    /** @deprecated use `AttestationIpfs$outboundSchema` instead. */
    AttestationIpfs$.outboundSchema = exports.AttestationIpfs$outboundSchema;
})(AttestationIpfs$ || (exports.AttestationIpfs$ = AttestationIpfs$ = {}));
function attestationIpfsToJSON(attestationIpfs) {
    return JSON.stringify(exports.AttestationIpfs$outboundSchema.parse(attestationIpfs));
}
function attestationIpfsFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.AttestationIpfs$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'AttestationIpfs' from JSON`);
}
/** @internal */
exports.AttestationStorage$inboundSchema = z.object({
    ipfs: z.lazy(() => exports.AttestationIpfs$inboundSchema).optional(),
    status: storagestatus_js_1.StorageStatus$inboundSchema.optional(),
});
/** @internal */
exports.AttestationStorage$outboundSchema = z.object({
    ipfs: z.lazy(() => exports.AttestationIpfs$outboundSchema).optional(),
    status: storagestatus_js_1.StorageStatus$outboundSchema.optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var AttestationStorage$;
(function (AttestationStorage$) {
    /** @deprecated use `AttestationStorage$inboundSchema` instead. */
    AttestationStorage$.inboundSchema = exports.AttestationStorage$inboundSchema;
    /** @deprecated use `AttestationStorage$outboundSchema` instead. */
    AttestationStorage$.outboundSchema = exports.AttestationStorage$outboundSchema;
})(AttestationStorage$ || (exports.AttestationStorage$ = AttestationStorage$ = {}));
function attestationStorageToJSON(attestationStorage) {
    return JSON.stringify(exports.AttestationStorage$outboundSchema.parse(attestationStorage));
}
function attestationStorageFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.AttestationStorage$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'AttestationStorage' from JSON`);
}
/** @internal */
exports.Attestation$inboundSchema = z.object({
    id: z.string().optional(),
    primaryType: exports.PrimaryType$inboundSchema,
    domain: z.lazy(() => exports.Domain$inboundSchema),
    message: z.lazy(() => exports.Message$inboundSchema),
    signature: z.string(),
    createdAt: z.number().optional(),
    signatureType: exports.SignatureType$inboundSchema.optional(),
    storage: z.lazy(() => exports.AttestationStorage$inboundSchema).optional(),
});
/** @internal */
exports.Attestation$outboundSchema = z.object({
    id: z.string().optional(),
    primaryType: exports.PrimaryType$outboundSchema,
    domain: z.lazy(() => exports.Domain$outboundSchema),
    message: z.lazy(() => exports.Message$outboundSchema),
    signature: z.string(),
    createdAt: z.number().optional(),
    signatureType: exports.SignatureType$outboundSchema.optional(),
    storage: z.lazy(() => exports.AttestationStorage$outboundSchema).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var Attestation$;
(function (Attestation$) {
    /** @deprecated use `Attestation$inboundSchema` instead. */
    Attestation$.inboundSchema = exports.Attestation$inboundSchema;
    /** @deprecated use `Attestation$outboundSchema` instead. */
    Attestation$.outboundSchema = exports.Attestation$outboundSchema;
})(Attestation$ || (exports.Attestation$ = Attestation$ = {}));
function attestationToJSON(attestation) {
    return JSON.stringify(exports.Attestation$outboundSchema.parse(attestation));
}
function attestationFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.Attestation$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Attestation' from JSON`);
}
//# sourceMappingURL=attestation.js.map