import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
export type Audio = {
    fileName: string;
    content: ReadableStream<Uint8Array> | Blob | ArrayBuffer | Uint8Array;
};
export type BodyGenAudioToText = {
    /**
     * Uploaded audio file to be transcribed.
     */
    audio: Audio | Blob;
    /**
     * Hugging Face model ID used for transcription.
     */
    modelId?: string | undefined;
    /**
     * Return timestamps for the transcribed text. Supported values: 'sentence', 'word', or a string boolean ('true' or 'false'). Default is 'true' ('sentence'). 'false' means no timestamps. 'word' means word-based timestamps.
     */
    returnTimestamps?: string | undefined;
};
/** @internal */
export declare const Audio$inboundSchema: z.ZodType<Audio, z.ZodTypeDef, unknown>;
/** @internal */
export type Audio$Outbound = {
    fileName: string;
    content: ReadableStream<Uint8Array> | Blob | ArrayBuffer | Uint8Array;
};
/** @internal */
export declare const Audio$outboundSchema: z.ZodType<Audio$Outbound, z.ZodTypeDef, Audio>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Audio$ {
    /** @deprecated use `Audio$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Audio, z.ZodTypeDef, unknown>;
    /** @deprecated use `Audio$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Audio$Outbound, z.ZodTypeDef, Audio>;
    /** @deprecated use `Audio$Outbound` instead. */
    type Outbound = Audio$Outbound;
}
export declare function audioToJSON(audio: Audio): string;
export declare function audioFromJSON(jsonString: string): SafeParseResult<Audio, SDKValidationError>;
/** @internal */
export declare const BodyGenAudioToText$inboundSchema: z.ZodType<BodyGenAudioToText, z.ZodTypeDef, unknown>;
/** @internal */
export type BodyGenAudioToText$Outbound = {
    audio: Audio$Outbound | Blob;
    model_id: string;
    return_timestamps: string;
};
/** @internal */
export declare const BodyGenAudioToText$outboundSchema: z.ZodType<BodyGenAudioToText$Outbound, z.ZodTypeDef, BodyGenAudioToText>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace BodyGenAudioToText$ {
    /** @deprecated use `BodyGenAudioToText$inboundSchema` instead. */
    const inboundSchema: z.ZodType<BodyGenAudioToText, z.ZodTypeDef, unknown>;
    /** @deprecated use `BodyGenAudioToText$outboundSchema` instead. */
    const outboundSchema: z.ZodType<BodyGenAudioToText$Outbound, z.ZodTypeDef, BodyGenAudioToText>;
    /** @deprecated use `BodyGenAudioToText$Outbound` instead. */
    type Outbound = BodyGenAudioToText$Outbound;
}
export declare function bodyGenAudioToTextToJSON(bodyGenAudioToText: BodyGenAudioToText): string;
export declare function bodyGenAudioToTextFromJSON(jsonString: string): SafeParseResult<BodyGenAudioToText, SDKValidationError>;
//# sourceMappingURL=bodygenaudiototext.d.ts.map