"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BodyGenAudioToText$ = exports.BodyGenAudioToText$outboundSchema = exports.BodyGenAudioToText$inboundSchema = exports.Audio$ = exports.Audio$outboundSchema = exports.Audio$inboundSchema = void 0;
exports.audioToJSON = audioToJSON;
exports.audioFromJSON = audioFromJSON;
exports.bodyGenAudioToTextToJSON = bodyGenAudioToTextToJSON;
exports.bodyGenAudioToTextFromJSON = bodyGenAudioToTextFromJSON;
const z = __importStar(require("zod"));
const primitives_js_1 = require("../../lib/primitives.js");
const schemas_js_1 = require("../../lib/schemas.js");
const blobs_js_1 = require("../../types/blobs.js");
/** @internal */
exports.Audio$inboundSchema = z
    .object({
    fileName: z.string(),
    content: z.union([
        z.instanceof((ReadableStream)),
        z.instanceof(Blob),
        z.instanceof(ArrayBuffer),
        z.instanceof(Uint8Array),
    ]),
});
/** @internal */
exports.Audio$outboundSchema = z.object({
    fileName: z.string(),
    content: z.union([
        z.instanceof((ReadableStream)),
        z.instanceof(Blob),
        z.instanceof(ArrayBuffer),
        z.instanceof(Uint8Array),
    ]),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var Audio$;
(function (Audio$) {
    /** @deprecated use `Audio$inboundSchema` instead. */
    Audio$.inboundSchema = exports.Audio$inboundSchema;
    /** @deprecated use `Audio$outboundSchema` instead. */
    Audio$.outboundSchema = exports.Audio$outboundSchema;
})(Audio$ || (exports.Audio$ = Audio$ = {}));
function audioToJSON(audio) {
    return JSON.stringify(exports.Audio$outboundSchema.parse(audio));
}
function audioFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.Audio$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Audio' from JSON`);
}
/** @internal */
exports.BodyGenAudioToText$inboundSchema = z.object({
    audio: z.lazy(() => exports.Audio$inboundSchema),
    model_id: z.string().default("openai/whisper-large-v3"),
    return_timestamps: z.string().default("true"),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "model_id": "modelId",
        "return_timestamps": "returnTimestamps",
    });
});
/** @internal */
exports.BodyGenAudioToText$outboundSchema = z.object({
    audio: z.lazy(() => exports.Audio$outboundSchema).or(blobs_js_1.blobLikeSchema),
    modelId: z.string().default("openai/whisper-large-v3"),
    returnTimestamps: z.string().default("true"),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        modelId: "model_id",
        returnTimestamps: "return_timestamps",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var BodyGenAudioToText$;
(function (BodyGenAudioToText$) {
    /** @deprecated use `BodyGenAudioToText$inboundSchema` instead. */
    BodyGenAudioToText$.inboundSchema = exports.BodyGenAudioToText$inboundSchema;
    /** @deprecated use `BodyGenAudioToText$outboundSchema` instead. */
    BodyGenAudioToText$.outboundSchema = exports.BodyGenAudioToText$outboundSchema;
})(BodyGenAudioToText$ || (exports.BodyGenAudioToText$ = BodyGenAudioToText$ = {}));
function bodyGenAudioToTextToJSON(bodyGenAudioToText) {
    return JSON.stringify(exports.BodyGenAudioToText$outboundSchema.parse(bodyGenAudioToText));
}
function bodyGenAudioToTextFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.BodyGenAudioToText$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'BodyGenAudioToText' from JSON`);
}
//# sourceMappingURL=bodygenaudiototext.js.map