import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
export type Image = {
    fileName: string;
    content: ReadableStream<Uint8Array> | Blob | ArrayBuffer | Uint8Array;
};
export type BodyGenImageToImage = {
    /**
     * Uploaded image to modify with the pipeline.
     */
    image: Image | Blob;
    /**
     * Text prompt(s) to guide image generation.
     */
    prompt: string;
    /**
     * Encourages model to generate images closely linked to the text prompt (higher values may reduce image quality).
     */
    guidanceScale?: number | undefined;
    /**
     * Degree to which the generated image is pushed towards the initial image.
     */
    imageGuidanceScale?: number | undefined;
    /**
     * A LoRA (Low-Rank Adaptation) model and its corresponding weight for image generation. Example: { "latent-consistency/lcm-lora-sdxl": 1.0, "nerijs/pixel-art-xl": 1.2}.
     */
    loras?: string | undefined;
    /**
     * Hugging Face model ID used for image generation.
     */
    modelId?: string | undefined;
    /**
     * Text prompt(s) to guide what to exclude from image generation. Ignored if guidance_scale < 1.
     */
    negativePrompt?: string | undefined;
    /**
     * Number of images to generate per prompt.
     */
    numImagesPerPrompt?: number | undefined;
    /**
     * Number of denoising steps. More steps usually lead to higher quality images but slower inference. Modulated by strength.
     */
    numInferenceSteps?: number | undefined;
    /**
     * Perform a safety check to estimate if generated images could be offensive or harmful.
     */
    safetyCheck?: boolean | undefined;
    /**
     * Seed for random number generation.
     */
    seed?: number | undefined;
    /**
     * Degree of transformation applied to the reference image (0 to 1).
     */
    strength?: number | undefined;
};
/** @internal */
export declare const Image$inboundSchema: z.ZodType<Image, z.ZodTypeDef, unknown>;
/** @internal */
export type Image$Outbound = {
    fileName: string;
    content: ReadableStream<Uint8Array> | Blob | ArrayBuffer | Uint8Array;
};
/** @internal */
export declare const Image$outboundSchema: z.ZodType<Image$Outbound, z.ZodTypeDef, Image>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Image$ {
    /** @deprecated use `Image$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Image, z.ZodTypeDef, unknown>;
    /** @deprecated use `Image$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Image$Outbound, z.ZodTypeDef, Image>;
    /** @deprecated use `Image$Outbound` instead. */
    type Outbound = Image$Outbound;
}
export declare function imageToJSON(image: Image): string;
export declare function imageFromJSON(jsonString: string): SafeParseResult<Image, SDKValidationError>;
/** @internal */
export declare const BodyGenImageToImage$inboundSchema: z.ZodType<BodyGenImageToImage, z.ZodTypeDef, unknown>;
/** @internal */
export type BodyGenImageToImage$Outbound = {
    image: Image$Outbound | Blob;
    prompt: string;
    guidance_scale: number;
    image_guidance_scale: number;
    loras: string;
    model_id: string;
    negative_prompt: string;
    num_images_per_prompt: number;
    num_inference_steps: number;
    safety_check: boolean;
    seed?: number | undefined;
    strength: number;
};
/** @internal */
export declare const BodyGenImageToImage$outboundSchema: z.ZodType<BodyGenImageToImage$Outbound, z.ZodTypeDef, BodyGenImageToImage>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace BodyGenImageToImage$ {
    /** @deprecated use `BodyGenImageToImage$inboundSchema` instead. */
    const inboundSchema: z.ZodType<BodyGenImageToImage, z.ZodTypeDef, unknown>;
    /** @deprecated use `BodyGenImageToImage$outboundSchema` instead. */
    const outboundSchema: z.ZodType<BodyGenImageToImage$Outbound, z.ZodTypeDef, BodyGenImageToImage>;
    /** @deprecated use `BodyGenImageToImage$Outbound` instead. */
    type Outbound = BodyGenImageToImage$Outbound;
}
export declare function bodyGenImageToImageToJSON(bodyGenImageToImage: BodyGenImageToImage): string;
export declare function bodyGenImageToImageFromJSON(jsonString: string): SafeParseResult<BodyGenImageToImage, SDKValidationError>;
//# sourceMappingURL=bodygenimagetoimage.d.ts.map