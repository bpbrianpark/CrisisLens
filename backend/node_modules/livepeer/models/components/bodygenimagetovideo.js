"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BodyGenImageToVideo$ = exports.BodyGenImageToVideo$outboundSchema = exports.BodyGenImageToVideo$inboundSchema = exports.BodyGenImageToVideoImage$ = exports.BodyGenImageToVideoImage$outboundSchema = exports.BodyGenImageToVideoImage$inboundSchema = void 0;
exports.bodyGenImageToVideoImageToJSON = bodyGenImageToVideoImageToJSON;
exports.bodyGenImageToVideoImageFromJSON = bodyGenImageToVideoImageFromJSON;
exports.bodyGenImageToVideoToJSON = bodyGenImageToVideoToJSON;
exports.bodyGenImageToVideoFromJSON = bodyGenImageToVideoFromJSON;
const z = __importStar(require("zod"));
const primitives_js_1 = require("../../lib/primitives.js");
const schemas_js_1 = require("../../lib/schemas.js");
const blobs_js_1 = require("../../types/blobs.js");
/** @internal */
exports.BodyGenImageToVideoImage$inboundSchema = z.object({
    fileName: z.string(),
    content: z.union([
        z.instanceof((ReadableStream)),
        z.instanceof(Blob),
        z.instanceof(ArrayBuffer),
        z.instanceof(Uint8Array),
    ]),
});
/** @internal */
exports.BodyGenImageToVideoImage$outboundSchema = z.object({
    fileName: z.string(),
    content: z.union([
        z.instanceof((ReadableStream)),
        z.instanceof(Blob),
        z.instanceof(ArrayBuffer),
        z.instanceof(Uint8Array),
    ]),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var BodyGenImageToVideoImage$;
(function (BodyGenImageToVideoImage$) {
    /** @deprecated use `BodyGenImageToVideoImage$inboundSchema` instead. */
    BodyGenImageToVideoImage$.inboundSchema = exports.BodyGenImageToVideoImage$inboundSchema;
    /** @deprecated use `BodyGenImageToVideoImage$outboundSchema` instead. */
    BodyGenImageToVideoImage$.outboundSchema = exports.BodyGenImageToVideoImage$outboundSchema;
})(BodyGenImageToVideoImage$ || (exports.BodyGenImageToVideoImage$ = BodyGenImageToVideoImage$ = {}));
function bodyGenImageToVideoImageToJSON(bodyGenImageToVideoImage) {
    return JSON.stringify(exports.BodyGenImageToVideoImage$outboundSchema.parse(bodyGenImageToVideoImage));
}
function bodyGenImageToVideoImageFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.BodyGenImageToVideoImage$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'BodyGenImageToVideoImage' from JSON`);
}
/** @internal */
exports.BodyGenImageToVideo$inboundSchema = z.object({
    image: z.lazy(() => exports.BodyGenImageToVideoImage$inboundSchema),
    fps: z.number().int().default(6),
    height: z.number().int().default(576),
    model_id: z.string().default("stabilityai/stable-video-diffusion-img2vid-xt-1-1"),
    motion_bucket_id: z.number().int().default(127),
    noise_aug_strength: z.number().default(0.02),
    num_inference_steps: z.number().int().default(25),
    safety_check: z.boolean().default(true),
    seed: z.number().int().optional(),
    width: z.number().int().default(1024),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "model_id": "modelId",
        "motion_bucket_id": "motionBucketId",
        "noise_aug_strength": "noiseAugStrength",
        "num_inference_steps": "numInferenceSteps",
        "safety_check": "safetyCheck",
    });
});
/** @internal */
exports.BodyGenImageToVideo$outboundSchema = z.object({
    image: z.lazy(() => exports.BodyGenImageToVideoImage$outboundSchema).or(blobs_js_1.blobLikeSchema),
    fps: z.number().int().default(6),
    height: z.number().int().default(576),
    modelId: z.string().default("stabilityai/stable-video-diffusion-img2vid-xt-1-1"),
    motionBucketId: z.number().int().default(127),
    noiseAugStrength: z.number().default(0.02),
    numInferenceSteps: z.number().int().default(25),
    safetyCheck: z.boolean().default(true),
    seed: z.number().int().optional(),
    width: z.number().int().default(1024),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        modelId: "model_id",
        motionBucketId: "motion_bucket_id",
        noiseAugStrength: "noise_aug_strength",
        numInferenceSteps: "num_inference_steps",
        safetyCheck: "safety_check",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var BodyGenImageToVideo$;
(function (BodyGenImageToVideo$) {
    /** @deprecated use `BodyGenImageToVideo$inboundSchema` instead. */
    BodyGenImageToVideo$.inboundSchema = exports.BodyGenImageToVideo$inboundSchema;
    /** @deprecated use `BodyGenImageToVideo$outboundSchema` instead. */
    BodyGenImageToVideo$.outboundSchema = exports.BodyGenImageToVideo$outboundSchema;
})(BodyGenImageToVideo$ || (exports.BodyGenImageToVideo$ = BodyGenImageToVideo$ = {}));
function bodyGenImageToVideoToJSON(bodyGenImageToVideo) {
    return JSON.stringify(exports.BodyGenImageToVideo$outboundSchema.parse(bodyGenImageToVideo));
}
function bodyGenImageToVideoFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.BodyGenImageToVideo$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'BodyGenImageToVideo' from JSON`);
}
//# sourceMappingURL=bodygenimagetovideo.js.map