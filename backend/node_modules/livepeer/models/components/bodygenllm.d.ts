import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
export type BodyGenLLM = {
    prompt: string;
    modelId?: string | undefined;
    systemMsg?: string | undefined;
    temperature?: number | undefined;
    maxTokens?: number | undefined;
    history?: string | undefined;
    stream?: boolean | undefined;
};
/** @internal */
export declare const BodyGenLLM$inboundSchema: z.ZodType<BodyGenLLM, z.ZodTypeDef, unknown>;
/** @internal */
export type BodyGenLLM$Outbound = {
    prompt: string;
    model_id: string;
    system_msg: string;
    temperature: number;
    max_tokens: number;
    history: string;
    stream: boolean;
};
/** @internal */
export declare const BodyGenLLM$outboundSchema: z.ZodType<BodyGenLLM$Outbound, z.ZodTypeDef, BodyGenLLM>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace BodyGenLLM$ {
    /** @deprecated use `BodyGenLLM$inboundSchema` instead. */
    const inboundSchema: z.ZodType<BodyGenLLM, z.ZodTypeDef, unknown>;
    /** @deprecated use `BodyGenLLM$outboundSchema` instead. */
    const outboundSchema: z.ZodType<BodyGenLLM$Outbound, z.ZodTypeDef, BodyGenLLM>;
    /** @deprecated use `BodyGenLLM$Outbound` instead. */
    type Outbound = BodyGenLLM$Outbound;
}
export declare function bodyGenLLMToJSON(bodyGenLLM: BodyGenLLM): string;
export declare function bodyGenLLMFromJSON(jsonString: string): SafeParseResult<BodyGenLLM, SDKValidationError>;
//# sourceMappingURL=bodygenllm.d.ts.map