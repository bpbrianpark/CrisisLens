"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BodyGenLLM$ = exports.BodyGenLLM$outboundSchema = exports.BodyGenLLM$inboundSchema = void 0;
exports.bodyGenLLMToJSON = bodyGenLLMToJSON;
exports.bodyGenLLMFromJSON = bodyGenLLMFromJSON;
const z = __importStar(require("zod"));
const primitives_js_1 = require("../../lib/primitives.js");
const schemas_js_1 = require("../../lib/schemas.js");
/** @internal */
exports.BodyGenLLM$inboundSchema = z.object({
    prompt: z.string(),
    model_id: z.string().default("meta-llama/Meta-Llama-3.1-8B-Instruct"),
    system_msg: z.string().default(""),
    temperature: z.number().default(0.7),
    max_tokens: z.number().int().default(256),
    history: z.string().default("[]"),
    stream: z.boolean().default(false),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "model_id": "modelId",
        "system_msg": "systemMsg",
        "max_tokens": "maxTokens",
    });
});
/** @internal */
exports.BodyGenLLM$outboundSchema = z.object({
    prompt: z.string(),
    modelId: z.string().default("meta-llama/Meta-Llama-3.1-8B-Instruct"),
    systemMsg: z.string().default(""),
    temperature: z.number().default(0.7),
    maxTokens: z.number().int().default(256),
    history: z.string().default("[]"),
    stream: z.boolean().default(false),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        modelId: "model_id",
        systemMsg: "system_msg",
        maxTokens: "max_tokens",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var BodyGenLLM$;
(function (BodyGenLLM$) {
    /** @deprecated use `BodyGenLLM$inboundSchema` instead. */
    BodyGenLLM$.inboundSchema = exports.BodyGenLLM$inboundSchema;
    /** @deprecated use `BodyGenLLM$outboundSchema` instead. */
    BodyGenLLM$.outboundSchema = exports.BodyGenLLM$outboundSchema;
})(BodyGenLLM$ || (exports.BodyGenLLM$ = BodyGenLLM$ = {}));
function bodyGenLLMToJSON(bodyGenLLM) {
    return JSON.stringify(exports.BodyGenLLM$outboundSchema.parse(bodyGenLLM));
}
function bodyGenLLMFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.BodyGenLLM$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'BodyGenLLM' from JSON`);
}
//# sourceMappingURL=bodygenllm.js.map