import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
export type BodyGenSegmentAnything2Image = {
    fileName: string;
    content: ReadableStream<Uint8Array> | Blob | ArrayBuffer | Uint8Array;
};
export type BodyGenSegmentAnything2 = {
    /**
     * Image to segment.
     */
    image: BodyGenSegmentAnything2Image | Blob;
    /**
     * A length 4 array given as a box prompt to the model, in XYXY format.
     */
    box?: string | undefined;
    /**
     * A low-resolution mask input to the model, typically from a previous prediction iteration, with the form 1xHxW (H=W=256 for SAM).
     */
    maskInput?: string | undefined;
    /**
     * Hugging Face model ID used for image generation.
     */
    modelId?: string | undefined;
    /**
     * If true, the model will return three masks for ambiguous input prompts, often producing better masks than a single prediction.
     */
    multimaskOutput?: boolean | undefined;
    /**
     * If true, the point coordinates will be normalized to the range [0,1], with point_coords expected to be with respect to image dimensions.
     */
    normalizeCoords?: boolean | undefined;
    /**
     * Nx2 array of point prompts to the model, where each point is in (X,Y) in pixels.
     */
    pointCoords?: string | undefined;
    /**
     * Labels for the point prompts, where 1 indicates a foreground point and 0 indicates a background point.
     */
    pointLabels?: string | undefined;
    /**
     * If true, returns un-thresholded mask logits instead of a binary mask.
     */
    returnLogits?: boolean | undefined;
};
/** @internal */
export declare const BodyGenSegmentAnything2Image$inboundSchema: z.ZodType<BodyGenSegmentAnything2Image, z.ZodTypeDef, unknown>;
/** @internal */
export type BodyGenSegmentAnything2Image$Outbound = {
    fileName: string;
    content: ReadableStream<Uint8Array> | Blob | ArrayBuffer | Uint8Array;
};
/** @internal */
export declare const BodyGenSegmentAnything2Image$outboundSchema: z.ZodType<BodyGenSegmentAnything2Image$Outbound, z.ZodTypeDef, BodyGenSegmentAnything2Image>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace BodyGenSegmentAnything2Image$ {
    /** @deprecated use `BodyGenSegmentAnything2Image$inboundSchema` instead. */
    const inboundSchema: z.ZodType<BodyGenSegmentAnything2Image, z.ZodTypeDef, unknown>;
    /** @deprecated use `BodyGenSegmentAnything2Image$outboundSchema` instead. */
    const outboundSchema: z.ZodType<BodyGenSegmentAnything2Image$Outbound, z.ZodTypeDef, BodyGenSegmentAnything2Image>;
    /** @deprecated use `BodyGenSegmentAnything2Image$Outbound` instead. */
    type Outbound = BodyGenSegmentAnything2Image$Outbound;
}
export declare function bodyGenSegmentAnything2ImageToJSON(bodyGenSegmentAnything2Image: BodyGenSegmentAnything2Image): string;
export declare function bodyGenSegmentAnything2ImageFromJSON(jsonString: string): SafeParseResult<BodyGenSegmentAnything2Image, SDKValidationError>;
/** @internal */
export declare const BodyGenSegmentAnything2$inboundSchema: z.ZodType<BodyGenSegmentAnything2, z.ZodTypeDef, unknown>;
/** @internal */
export type BodyGenSegmentAnything2$Outbound = {
    image: BodyGenSegmentAnything2Image$Outbound | Blob;
    box?: string | undefined;
    mask_input?: string | undefined;
    model_id: string;
    multimask_output: boolean;
    normalize_coords: boolean;
    point_coords?: string | undefined;
    point_labels?: string | undefined;
    return_logits: boolean;
};
/** @internal */
export declare const BodyGenSegmentAnything2$outboundSchema: z.ZodType<BodyGenSegmentAnything2$Outbound, z.ZodTypeDef, BodyGenSegmentAnything2>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace BodyGenSegmentAnything2$ {
    /** @deprecated use `BodyGenSegmentAnything2$inboundSchema` instead. */
    const inboundSchema: z.ZodType<BodyGenSegmentAnything2, z.ZodTypeDef, unknown>;
    /** @deprecated use `BodyGenSegmentAnything2$outboundSchema` instead. */
    const outboundSchema: z.ZodType<BodyGenSegmentAnything2$Outbound, z.ZodTypeDef, BodyGenSegmentAnything2>;
    /** @deprecated use `BodyGenSegmentAnything2$Outbound` instead. */
    type Outbound = BodyGenSegmentAnything2$Outbound;
}
export declare function bodyGenSegmentAnything2ToJSON(bodyGenSegmentAnything2: BodyGenSegmentAnything2): string;
export declare function bodyGenSegmentAnything2FromJSON(jsonString: string): SafeParseResult<BodyGenSegmentAnything2, SDKValidationError>;
//# sourceMappingURL=bodygensegmentanything2.d.ts.map