"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BodyGenSegmentAnything2$ = exports.BodyGenSegmentAnything2$outboundSchema = exports.BodyGenSegmentAnything2$inboundSchema = exports.BodyGenSegmentAnything2Image$ = exports.BodyGenSegmentAnything2Image$outboundSchema = exports.BodyGenSegmentAnything2Image$inboundSchema = void 0;
exports.bodyGenSegmentAnything2ImageToJSON = bodyGenSegmentAnything2ImageToJSON;
exports.bodyGenSegmentAnything2ImageFromJSON = bodyGenSegmentAnything2ImageFromJSON;
exports.bodyGenSegmentAnything2ToJSON = bodyGenSegmentAnything2ToJSON;
exports.bodyGenSegmentAnything2FromJSON = bodyGenSegmentAnything2FromJSON;
const z = __importStar(require("zod"));
const primitives_js_1 = require("../../lib/primitives.js");
const schemas_js_1 = require("../../lib/schemas.js");
const blobs_js_1 = require("../../types/blobs.js");
/** @internal */
exports.BodyGenSegmentAnything2Image$inboundSchema = z.object({
    fileName: z.string(),
    content: z.union([
        z.instanceof((ReadableStream)),
        z.instanceof(Blob),
        z.instanceof(ArrayBuffer),
        z.instanceof(Uint8Array),
    ]),
});
/** @internal */
exports.BodyGenSegmentAnything2Image$outboundSchema = z.object({
    fileName: z.string(),
    content: z.union([
        z.instanceof((ReadableStream)),
        z.instanceof(Blob),
        z.instanceof(ArrayBuffer),
        z.instanceof(Uint8Array),
    ]),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var BodyGenSegmentAnything2Image$;
(function (BodyGenSegmentAnything2Image$) {
    /** @deprecated use `BodyGenSegmentAnything2Image$inboundSchema` instead. */
    BodyGenSegmentAnything2Image$.inboundSchema = exports.BodyGenSegmentAnything2Image$inboundSchema;
    /** @deprecated use `BodyGenSegmentAnything2Image$outboundSchema` instead. */
    BodyGenSegmentAnything2Image$.outboundSchema = exports.BodyGenSegmentAnything2Image$outboundSchema;
})(BodyGenSegmentAnything2Image$ || (exports.BodyGenSegmentAnything2Image$ = BodyGenSegmentAnything2Image$ = {}));
function bodyGenSegmentAnything2ImageToJSON(bodyGenSegmentAnything2Image) {
    return JSON.stringify(exports.BodyGenSegmentAnything2Image$outboundSchema.parse(bodyGenSegmentAnything2Image));
}
function bodyGenSegmentAnything2ImageFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.BodyGenSegmentAnything2Image$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'BodyGenSegmentAnything2Image' from JSON`);
}
/** @internal */
exports.BodyGenSegmentAnything2$inboundSchema = z.object({
    image: z.lazy(() => exports.BodyGenSegmentAnything2Image$inboundSchema),
    box: z.string().optional(),
    mask_input: z.string().optional(),
    model_id: z.string().default("facebook/sam2-hiera-large"),
    multimask_output: z.boolean().default(true),
    normalize_coords: z.boolean().default(true),
    point_coords: z.string().optional(),
    point_labels: z.string().optional(),
    return_logits: z.boolean().default(true),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "mask_input": "maskInput",
        "model_id": "modelId",
        "multimask_output": "multimaskOutput",
        "normalize_coords": "normalizeCoords",
        "point_coords": "pointCoords",
        "point_labels": "pointLabels",
        "return_logits": "returnLogits",
    });
});
/** @internal */
exports.BodyGenSegmentAnything2$outboundSchema = z.object({
    image: z.lazy(() => exports.BodyGenSegmentAnything2Image$outboundSchema).or(blobs_js_1.blobLikeSchema),
    box: z.string().optional(),
    maskInput: z.string().optional(),
    modelId: z.string().default("facebook/sam2-hiera-large"),
    multimaskOutput: z.boolean().default(true),
    normalizeCoords: z.boolean().default(true),
    pointCoords: z.string().optional(),
    pointLabels: z.string().optional(),
    returnLogits: z.boolean().default(true),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        maskInput: "mask_input",
        modelId: "model_id",
        multimaskOutput: "multimask_output",
        normalizeCoords: "normalize_coords",
        pointCoords: "point_coords",
        pointLabels: "point_labels",
        returnLogits: "return_logits",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var BodyGenSegmentAnything2$;
(function (BodyGenSegmentAnything2$) {
    /** @deprecated use `BodyGenSegmentAnything2$inboundSchema` instead. */
    BodyGenSegmentAnything2$.inboundSchema = exports.BodyGenSegmentAnything2$inboundSchema;
    /** @deprecated use `BodyGenSegmentAnything2$outboundSchema` instead. */
    BodyGenSegmentAnything2$.outboundSchema = exports.BodyGenSegmentAnything2$outboundSchema;
})(BodyGenSegmentAnything2$ || (exports.BodyGenSegmentAnything2$ = BodyGenSegmentAnything2$ = {}));
function bodyGenSegmentAnything2ToJSON(bodyGenSegmentAnything2) {
    return JSON.stringify(exports.BodyGenSegmentAnything2$outboundSchema.parse(bodyGenSegmentAnything2));
}
function bodyGenSegmentAnything2FromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.BodyGenSegmentAnything2$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'BodyGenSegmentAnything2' from JSON`);
}
//# sourceMappingURL=bodygensegmentanything2.js.map