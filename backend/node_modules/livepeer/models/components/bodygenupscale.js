"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BodyGenUpscale$ = exports.BodyGenUpscale$outboundSchema = exports.BodyGenUpscale$inboundSchema = exports.BodyGenUpscaleImage$ = exports.BodyGenUpscaleImage$outboundSchema = exports.BodyGenUpscaleImage$inboundSchema = void 0;
exports.bodyGenUpscaleImageToJSON = bodyGenUpscaleImageToJSON;
exports.bodyGenUpscaleImageFromJSON = bodyGenUpscaleImageFromJSON;
exports.bodyGenUpscaleToJSON = bodyGenUpscaleToJSON;
exports.bodyGenUpscaleFromJSON = bodyGenUpscaleFromJSON;
const z = __importStar(require("zod"));
const primitives_js_1 = require("../../lib/primitives.js");
const schemas_js_1 = require("../../lib/schemas.js");
const blobs_js_1 = require("../../types/blobs.js");
/** @internal */
exports.BodyGenUpscaleImage$inboundSchema = z.object({
    fileName: z.string(),
    content: z.union([
        z.instanceof((ReadableStream)),
        z.instanceof(Blob),
        z.instanceof(ArrayBuffer),
        z.instanceof(Uint8Array),
    ]),
});
/** @internal */
exports.BodyGenUpscaleImage$outboundSchema = z.object({
    fileName: z.string(),
    content: z.union([
        z.instanceof((ReadableStream)),
        z.instanceof(Blob),
        z.instanceof(ArrayBuffer),
        z.instanceof(Uint8Array),
    ]),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var BodyGenUpscaleImage$;
(function (BodyGenUpscaleImage$) {
    /** @deprecated use `BodyGenUpscaleImage$inboundSchema` instead. */
    BodyGenUpscaleImage$.inboundSchema = exports.BodyGenUpscaleImage$inboundSchema;
    /** @deprecated use `BodyGenUpscaleImage$outboundSchema` instead. */
    BodyGenUpscaleImage$.outboundSchema = exports.BodyGenUpscaleImage$outboundSchema;
})(BodyGenUpscaleImage$ || (exports.BodyGenUpscaleImage$ = BodyGenUpscaleImage$ = {}));
function bodyGenUpscaleImageToJSON(bodyGenUpscaleImage) {
    return JSON.stringify(exports.BodyGenUpscaleImage$outboundSchema.parse(bodyGenUpscaleImage));
}
function bodyGenUpscaleImageFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.BodyGenUpscaleImage$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'BodyGenUpscaleImage' from JSON`);
}
/** @internal */
exports.BodyGenUpscale$inboundSchema = z.object({
    image: z.lazy(() => exports.BodyGenUpscaleImage$inboundSchema),
    prompt: z.string(),
    model_id: z.string().default("stabilityai/stable-diffusion-x4-upscaler"),
    num_inference_steps: z.number().int().default(75),
    safety_check: z.boolean().default(true),
    seed: z.number().int().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "model_id": "modelId",
        "num_inference_steps": "numInferenceSteps",
        "safety_check": "safetyCheck",
    });
});
/** @internal */
exports.BodyGenUpscale$outboundSchema = z.object({
    image: z.lazy(() => exports.BodyGenUpscaleImage$outboundSchema).or(blobs_js_1.blobLikeSchema),
    prompt: z.string(),
    modelId: z.string().default("stabilityai/stable-diffusion-x4-upscaler"),
    numInferenceSteps: z.number().int().default(75),
    safetyCheck: z.boolean().default(true),
    seed: z.number().int().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        modelId: "model_id",
        numInferenceSteps: "num_inference_steps",
        safetyCheck: "safety_check",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var BodyGenUpscale$;
(function (BodyGenUpscale$) {
    /** @deprecated use `BodyGenUpscale$inboundSchema` instead. */
    BodyGenUpscale$.inboundSchema = exports.BodyGenUpscale$inboundSchema;
    /** @deprecated use `BodyGenUpscale$outboundSchema` instead. */
    BodyGenUpscale$.outboundSchema = exports.BodyGenUpscale$outboundSchema;
})(BodyGenUpscale$ || (exports.BodyGenUpscale$ = BodyGenUpscale$ = {}));
function bodyGenUpscaleToJSON(bodyGenUpscale) {
    return JSON.stringify(exports.BodyGenUpscale$outboundSchema.parse(bodyGenUpscale));
}
function bodyGenUpscaleFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.BodyGenUpscale$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'BodyGenUpscale' from JSON`);
}
//# sourceMappingURL=bodygenupscale.js.map