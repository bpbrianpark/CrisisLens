import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
/**
 * A chunk of text with a timestamp.
 */
export type Chunk = {
    /**
     * The timestamp of the chunk.
     */
    timestamp: Array<any>;
    /**
     * The text of the chunk.
     */
    text: string;
};
/** @internal */
export declare const Chunk$inboundSchema: z.ZodType<Chunk, z.ZodTypeDef, unknown>;
/** @internal */
export type Chunk$Outbound = {
    timestamp: Array<any>;
    text: string;
};
/** @internal */
export declare const Chunk$outboundSchema: z.ZodType<Chunk$Outbound, z.ZodTypeDef, Chunk>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Chunk$ {
    /** @deprecated use `Chunk$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Chunk, z.ZodTypeDef, unknown>;
    /** @deprecated use `Chunk$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Chunk$Outbound, z.ZodTypeDef, Chunk>;
    /** @deprecated use `Chunk$Outbound` instead. */
    type Outbound = Chunk$Outbound;
}
export declare function chunkToJSON(chunk: Chunk): string;
export declare function chunkFromJSON(jsonString: string): SafeParseResult<Chunk, SDKValidationError>;
//# sourceMappingURL=chunk.d.ts.map