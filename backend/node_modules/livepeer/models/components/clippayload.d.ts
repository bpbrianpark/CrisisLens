import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
export type ClipPayload = {
    /**
     * The playback ID of the stream or stream recording to clip. Asset playback IDs are not supported yet.
     */
    playbackId: string;
    /**
     * The start timestamp of the clip in Unix milliseconds. _See the ClipTrigger in the UI Kit for an example of how this is calculated (for HLS, it uses `Program Date-Time` tags, and for WebRTC, it uses the latency from server to client at stream startup)._
     */
    startTime: number;
    /**
     * The end timestamp of the clip in Unix milliseconds. _See the ClipTrigger in the UI Kit for an example of how this is calculated (for HLS, it uses `Program Date-Time` tags, and for WebRTC, it uses the latency from server to client at stream startup)._
     */
    endTime?: number | undefined;
    /**
     * The optional friendly name of the clip to create.
     */
    name?: string | undefined;
    /**
     * The optional session ID of the stream to clip. This can be used to clip _recordings_ - if it is not specified, it will clip the ongoing livestream.
     */
    sessionId?: string | undefined;
};
/** @internal */
export declare const ClipPayload$inboundSchema: z.ZodType<ClipPayload, z.ZodTypeDef, unknown>;
/** @internal */
export type ClipPayload$Outbound = {
    playbackId: string;
    startTime: number;
    endTime?: number | undefined;
    name?: string | undefined;
    sessionId?: string | undefined;
};
/** @internal */
export declare const ClipPayload$outboundSchema: z.ZodType<ClipPayload$Outbound, z.ZodTypeDef, ClipPayload>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ClipPayload$ {
    /** @deprecated use `ClipPayload$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ClipPayload, z.ZodTypeDef, unknown>;
    /** @deprecated use `ClipPayload$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ClipPayload$Outbound, z.ZodTypeDef, ClipPayload>;
    /** @deprecated use `ClipPayload$Outbound` instead. */
    type Outbound = ClipPayload$Outbound;
}
export declare function clipPayloadToJSON(clipPayload: ClipPayload): string;
export declare function clipPayloadFromJSON(jsonString: string): SafeParseResult<ClipPayload, SDKValidationError>;
//# sourceMappingURL=clippayload.d.ts.map