import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
export type CreateRoomResponse = {
    /**
     * The ID of the room
     */
    id?: string | undefined;
};
/** @internal */
export declare const CreateRoomResponse$inboundSchema: z.ZodType<CreateRoomResponse, z.ZodTypeDef, unknown>;
/** @internal */
export type CreateRoomResponse$Outbound = {
    id?: string | undefined;
};
/** @internal */
export declare const CreateRoomResponse$outboundSchema: z.ZodType<CreateRoomResponse$Outbound, z.ZodTypeDef, CreateRoomResponse>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateRoomResponse$ {
    /** @deprecated use `CreateRoomResponse$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CreateRoomResponse, z.ZodTypeDef, unknown>;
    /** @deprecated use `CreateRoomResponse$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CreateRoomResponse$Outbound, z.ZodTypeDef, CreateRoomResponse>;
    /** @deprecated use `CreateRoomResponse$Outbound` instead. */
    type Outbound = CreateRoomResponse$Outbound;
}
export declare function createRoomResponseToJSON(createRoomResponse: CreateRoomResponse): string;
export declare function createRoomResponseFromJSON(jsonString: string): SafeParseResult<CreateRoomResponse, SDKValidationError>;
//# sourceMappingURL=createroomresponse.d.ts.map