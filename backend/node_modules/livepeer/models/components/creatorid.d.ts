import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
export declare enum CreatorIdType {
    Unverified = "unverified"
}
export type CreatorId1 = {
    type: CreatorIdType;
    /**
     * Developer-managed ID of the user who created the resource.
     */
    value: string;
};
export type CreatorId = CreatorId1;
/** @internal */
export declare const CreatorIdType$inboundSchema: z.ZodNativeEnum<typeof CreatorIdType>;
/** @internal */
export declare const CreatorIdType$outboundSchema: z.ZodNativeEnum<typeof CreatorIdType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreatorIdType$ {
    /** @deprecated use `CreatorIdType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<typeof CreatorIdType>;
    /** @deprecated use `CreatorIdType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<typeof CreatorIdType>;
}
/** @internal */
export declare const CreatorId1$inboundSchema: z.ZodType<CreatorId1, z.ZodTypeDef, unknown>;
/** @internal */
export type CreatorId1$Outbound = {
    type: string;
    value: string;
};
/** @internal */
export declare const CreatorId1$outboundSchema: z.ZodType<CreatorId1$Outbound, z.ZodTypeDef, CreatorId1>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreatorId1$ {
    /** @deprecated use `CreatorId1$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CreatorId1, z.ZodTypeDef, unknown>;
    /** @deprecated use `CreatorId1$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CreatorId1$Outbound, z.ZodTypeDef, CreatorId1>;
    /** @deprecated use `CreatorId1$Outbound` instead. */
    type Outbound = CreatorId1$Outbound;
}
export declare function creatorId1ToJSON(creatorId1: CreatorId1): string;
export declare function creatorId1FromJSON(jsonString: string): SafeParseResult<CreatorId1, SDKValidationError>;
/** @internal */
export declare const CreatorId$inboundSchema: z.ZodType<CreatorId, z.ZodTypeDef, unknown>;
/** @internal */
export type CreatorId$Outbound = CreatorId1$Outbound;
/** @internal */
export declare const CreatorId$outboundSchema: z.ZodType<CreatorId$Outbound, z.ZodTypeDef, CreatorId>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreatorId$ {
    /** @deprecated use `CreatorId$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CreatorId1, z.ZodTypeDef, unknown>;
    /** @deprecated use `CreatorId$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CreatorId1$Outbound, z.ZodTypeDef, CreatorId1>;
    /** @deprecated use `CreatorId$Outbound` instead. */
    type Outbound = CreatorId$Outbound;
}
export declare function creatorIdToJSON(creatorId: CreatorId): string;
export declare function creatorIdFromJSON(jsonString: string): SafeParseResult<CreatorId, SDKValidationError>;
//# sourceMappingURL=creatorid.d.ts.map