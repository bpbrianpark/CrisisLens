import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
export type Encryption = {
    /**
     * Encryption key used to encrypt the asset. Only writable in the upload asset endpoints and cannot be retrieved back.
     */
    encryptedKey: string;
};
/** @internal */
export declare const Encryption$inboundSchema: z.ZodType<Encryption, z.ZodTypeDef, unknown>;
/** @internal */
export type Encryption$Outbound = {
    encryptedKey: string;
};
/** @internal */
export declare const Encryption$outboundSchema: z.ZodType<Encryption$Outbound, z.ZodTypeDef, Encryption>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Encryption$ {
    /** @deprecated use `Encryption$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Encryption, z.ZodTypeDef, unknown>;
    /** @deprecated use `Encryption$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Encryption$Outbound, z.ZodTypeDef, Encryption>;
    /** @deprecated use `Encryption$Outbound` instead. */
    type Outbound = Encryption$Outbound;
}
export declare function encryptionToJSON(encryption: Encryption): string;
export declare function encryptionFromJSON(jsonString: string): SafeParseResult<Encryption, SDKValidationError>;
//# sourceMappingURL=encryption.d.ts.map