import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
export type EncryptionOutput = {};
/** @internal */
export declare const EncryptionOutput$inboundSchema: z.ZodType<EncryptionOutput, z.ZodTypeDef, unknown>;
/** @internal */
export type EncryptionOutput$Outbound = {};
/** @internal */
export declare const EncryptionOutput$outboundSchema: z.ZodType<EncryptionOutput$Outbound, z.ZodTypeDef, EncryptionOutput>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace EncryptionOutput$ {
    /** @deprecated use `EncryptionOutput$inboundSchema` instead. */
    const inboundSchema: z.ZodType<EncryptionOutput, z.ZodTypeDef, unknown>;
    /** @deprecated use `EncryptionOutput$outboundSchema` instead. */
    const outboundSchema: z.ZodType<EncryptionOutput$Outbound, z.ZodTypeDef, EncryptionOutput>;
    /** @deprecated use `EncryptionOutput$Outbound` instead. */
    type Outbound = EncryptionOutput$Outbound;
}
export declare function encryptionOutputToJSON(encryptionOutput: EncryptionOutput): string;
export declare function encryptionOutputFromJSON(jsonString: string): SafeParseResult<EncryptionOutput, SDKValidationError>;
//# sourceMappingURL=encryptionoutput.d.ts.map