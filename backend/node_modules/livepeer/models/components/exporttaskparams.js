"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ExportTaskParams$ = exports.ExportTaskParams$outboundSchema = exports.ExportTaskParams$inboundSchema = exports.ExportTaskParams1$ = exports.ExportTaskParams1$outboundSchema = exports.ExportTaskParams1$inboundSchema = exports.Custom$ = exports.Custom$outboundSchema = exports.Custom$inboundSchema = exports.ExportTaskParams2$ = exports.ExportTaskParams2$outboundSchema = exports.ExportTaskParams2$inboundSchema = void 0;
exports.exportTaskParams2ToJSON = exportTaskParams2ToJSON;
exports.exportTaskParams2FromJSON = exportTaskParams2FromJSON;
exports.customToJSON = customToJSON;
exports.customFromJSON = customFromJSON;
exports.exportTaskParams1ToJSON = exportTaskParams1ToJSON;
exports.exportTaskParams1FromJSON = exportTaskParams1FromJSON;
exports.exportTaskParamsToJSON = exportTaskParamsToJSON;
exports.exportTaskParamsFromJSON = exportTaskParamsFromJSON;
const z = __importStar(require("zod"));
const schemas_js_1 = require("../../lib/schemas.js");
const ipfsexportparams_js_1 = require("./ipfsexportparams.js");
/** @internal */
exports.ExportTaskParams2$inboundSchema = z.object({
    ipfs: ipfsexportparams_js_1.IpfsExportParams$inboundSchema,
});
/** @internal */
exports.ExportTaskParams2$outboundSchema = z.object({
    ipfs: ipfsexportparams_js_1.IpfsExportParams$outboundSchema,
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var ExportTaskParams2$;
(function (ExportTaskParams2$) {
    /** @deprecated use `ExportTaskParams2$inboundSchema` instead. */
    ExportTaskParams2$.inboundSchema = exports.ExportTaskParams2$inboundSchema;
    /** @deprecated use `ExportTaskParams2$outboundSchema` instead. */
    ExportTaskParams2$.outboundSchema = exports.ExportTaskParams2$outboundSchema;
})(ExportTaskParams2$ || (exports.ExportTaskParams2$ = ExportTaskParams2$ = {}));
function exportTaskParams2ToJSON(exportTaskParams2) {
    return JSON.stringify(exports.ExportTaskParams2$outboundSchema.parse(exportTaskParams2));
}
function exportTaskParams2FromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.ExportTaskParams2$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ExportTaskParams2' from JSON`);
}
/** @internal */
exports.Custom$inboundSchema = z
    .object({
    url: z.string(),
    method: z.string().default("PUT"),
    headers: z.record(z.string()).optional(),
});
/** @internal */
exports.Custom$outboundSchema = z.object({
    url: z.string(),
    method: z.string().default("PUT"),
    headers: z.record(z.string()).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var Custom$;
(function (Custom$) {
    /** @deprecated use `Custom$inboundSchema` instead. */
    Custom$.inboundSchema = exports.Custom$inboundSchema;
    /** @deprecated use `Custom$outboundSchema` instead. */
    Custom$.outboundSchema = exports.Custom$outboundSchema;
})(Custom$ || (exports.Custom$ = Custom$ = {}));
function customToJSON(custom) {
    return JSON.stringify(exports.Custom$outboundSchema.parse(custom));
}
function customFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.Custom$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Custom' from JSON`);
}
/** @internal */
exports.ExportTaskParams1$inboundSchema = z.object({
    custom: z.lazy(() => exports.Custom$inboundSchema),
});
/** @internal */
exports.ExportTaskParams1$outboundSchema = z.object({
    custom: z.lazy(() => exports.Custom$outboundSchema),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var ExportTaskParams1$;
(function (ExportTaskParams1$) {
    /** @deprecated use `ExportTaskParams1$inboundSchema` instead. */
    ExportTaskParams1$.inboundSchema = exports.ExportTaskParams1$inboundSchema;
    /** @deprecated use `ExportTaskParams1$outboundSchema` instead. */
    ExportTaskParams1$.outboundSchema = exports.ExportTaskParams1$outboundSchema;
})(ExportTaskParams1$ || (exports.ExportTaskParams1$ = ExportTaskParams1$ = {}));
function exportTaskParams1ToJSON(exportTaskParams1) {
    return JSON.stringify(exports.ExportTaskParams1$outboundSchema.parse(exportTaskParams1));
}
function exportTaskParams1FromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.ExportTaskParams1$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ExportTaskParams1' from JSON`);
}
/** @internal */
exports.ExportTaskParams$inboundSchema = z.union([
    z.lazy(() => exports.ExportTaskParams1$inboundSchema),
    z.lazy(() => exports.ExportTaskParams2$inboundSchema),
]);
/** @internal */
exports.ExportTaskParams$outboundSchema = z.union([
    z.lazy(() => exports.ExportTaskParams1$outboundSchema),
    z.lazy(() => exports.ExportTaskParams2$outboundSchema),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var ExportTaskParams$;
(function (ExportTaskParams$) {
    /** @deprecated use `ExportTaskParams$inboundSchema` instead. */
    ExportTaskParams$.inboundSchema = exports.ExportTaskParams$inboundSchema;
    /** @deprecated use `ExportTaskParams$outboundSchema` instead. */
    ExportTaskParams$.outboundSchema = exports.ExportTaskParams$outboundSchema;
})(ExportTaskParams$ || (exports.ExportTaskParams$ = ExportTaskParams$ = {}));
function exportTaskParamsToJSON(exportTaskParams) {
    return JSON.stringify(exports.ExportTaskParams$outboundSchema.parse(exportTaskParams));
}
function exportTaskParamsFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.ExportTaskParams$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ExportTaskParams' from JSON`);
}
//# sourceMappingURL=exporttaskparams.js.map