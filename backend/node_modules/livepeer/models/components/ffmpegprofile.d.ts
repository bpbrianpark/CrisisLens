import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
export declare enum Profile {
    H264Baseline = "H264Baseline",
    H264Main = "H264Main",
    H264High = "H264High",
    H264ConstrainedHigh = "H264ConstrainedHigh"
}
export declare enum Encoder {
    H264 = "H.264"
}
/**
 * Transcode profile
 */
export type FfmpegProfile = {
    width: number;
    name: string;
    height: number;
    bitrate: number;
    fps: number;
    fpsDen?: number | undefined;
    /**
     * Restricts the size of the output video using the constant quality feature. Increasing this value will result in a lower quality video. Note that this parameter might not work if the transcoder lacks support for it.
     *
     * @remarks
     */
    quality?: number | undefined;
    gop?: string | undefined;
    profile?: Profile | undefined;
    encoder?: Encoder | undefined;
};
/** @internal */
export declare const Profile$inboundSchema: z.ZodNativeEnum<typeof Profile>;
/** @internal */
export declare const Profile$outboundSchema: z.ZodNativeEnum<typeof Profile>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Profile$ {
    /** @deprecated use `Profile$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<typeof Profile>;
    /** @deprecated use `Profile$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<typeof Profile>;
}
/** @internal */
export declare const Encoder$inboundSchema: z.ZodNativeEnum<typeof Encoder>;
/** @internal */
export declare const Encoder$outboundSchema: z.ZodNativeEnum<typeof Encoder>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Encoder$ {
    /** @deprecated use `Encoder$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<typeof Encoder>;
    /** @deprecated use `Encoder$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<typeof Encoder>;
}
/** @internal */
export declare const FfmpegProfile$inboundSchema: z.ZodType<FfmpegProfile, z.ZodTypeDef, unknown>;
/** @internal */
export type FfmpegProfile$Outbound = {
    width: number;
    name: string;
    height: number;
    bitrate: number;
    fps: number;
    fpsDen?: number | undefined;
    quality?: number | undefined;
    gop?: string | undefined;
    profile?: string | undefined;
    encoder?: string | undefined;
};
/** @internal */
export declare const FfmpegProfile$outboundSchema: z.ZodType<FfmpegProfile$Outbound, z.ZodTypeDef, FfmpegProfile>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace FfmpegProfile$ {
    /** @deprecated use `FfmpegProfile$inboundSchema` instead. */
    const inboundSchema: z.ZodType<FfmpegProfile, z.ZodTypeDef, unknown>;
    /** @deprecated use `FfmpegProfile$outboundSchema` instead. */
    const outboundSchema: z.ZodType<FfmpegProfile$Outbound, z.ZodTypeDef, FfmpegProfile>;
    /** @deprecated use `FfmpegProfile$Outbound` instead. */
    type Outbound = FfmpegProfile$Outbound;
}
export declare function ffmpegProfileToJSON(ffmpegProfile: FfmpegProfile): string;
export declare function ffmpegProfileFromJSON(jsonString: string): SafeParseResult<FfmpegProfile, SDKValidationError>;
//# sourceMappingURL=ffmpegprofile.d.ts.map