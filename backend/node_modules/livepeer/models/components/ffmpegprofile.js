"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FfmpegProfile$ = exports.FfmpegProfile$outboundSchema = exports.FfmpegProfile$inboundSchema = exports.Encoder$ = exports.Encoder$outboundSchema = exports.Encoder$inboundSchema = exports.Profile$ = exports.Profile$outboundSchema = exports.Profile$inboundSchema = exports.Encoder = exports.Profile = void 0;
exports.ffmpegProfileToJSON = ffmpegProfileToJSON;
exports.ffmpegProfileFromJSON = ffmpegProfileFromJSON;
const z = __importStar(require("zod"));
const schemas_js_1 = require("../../lib/schemas.js");
var Profile;
(function (Profile) {
    Profile["H264Baseline"] = "H264Baseline";
    Profile["H264Main"] = "H264Main";
    Profile["H264High"] = "H264High";
    Profile["H264ConstrainedHigh"] = "H264ConstrainedHigh";
})(Profile || (exports.Profile = Profile = {}));
var Encoder;
(function (Encoder) {
    Encoder["H264"] = "H.264";
})(Encoder || (exports.Encoder = Encoder = {}));
/** @internal */
exports.Profile$inboundSchema = z
    .nativeEnum(Profile);
/** @internal */
exports.Profile$outboundSchema = exports.Profile$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var Profile$;
(function (Profile$) {
    /** @deprecated use `Profile$inboundSchema` instead. */
    Profile$.inboundSchema = exports.Profile$inboundSchema;
    /** @deprecated use `Profile$outboundSchema` instead. */
    Profile$.outboundSchema = exports.Profile$outboundSchema;
})(Profile$ || (exports.Profile$ = Profile$ = {}));
/** @internal */
exports.Encoder$inboundSchema = z
    .nativeEnum(Encoder);
/** @internal */
exports.Encoder$outboundSchema = exports.Encoder$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var Encoder$;
(function (Encoder$) {
    /** @deprecated use `Encoder$inboundSchema` instead. */
    Encoder$.inboundSchema = exports.Encoder$inboundSchema;
    /** @deprecated use `Encoder$outboundSchema` instead. */
    Encoder$.outboundSchema = exports.Encoder$outboundSchema;
})(Encoder$ || (exports.Encoder$ = Encoder$ = {}));
/** @internal */
exports.FfmpegProfile$inboundSchema = z.object({
    width: z.number().int(),
    name: z.string(),
    height: z.number().int(),
    bitrate: z.number().int(),
    fps: z.number().int(),
    fpsDen: z.number().int().optional(),
    quality: z.number().int().optional(),
    gop: z.string().optional(),
    profile: exports.Profile$inboundSchema.optional(),
    encoder: exports.Encoder$inboundSchema.optional(),
});
/** @internal */
exports.FfmpegProfile$outboundSchema = z.object({
    width: z.number().int(),
    name: z.string(),
    height: z.number().int(),
    bitrate: z.number().int(),
    fps: z.number().int(),
    fpsDen: z.number().int().optional(),
    quality: z.number().int().optional(),
    gop: z.string().optional(),
    profile: exports.Profile$outboundSchema.optional(),
    encoder: exports.Encoder$outboundSchema.optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var FfmpegProfile$;
(function (FfmpegProfile$) {
    /** @deprecated use `FfmpegProfile$inboundSchema` instead. */
    FfmpegProfile$.inboundSchema = exports.FfmpegProfile$inboundSchema;
    /** @deprecated use `FfmpegProfile$outboundSchema` instead. */
    FfmpegProfile$.outboundSchema = exports.FfmpegProfile$outboundSchema;
})(FfmpegProfile$ || (exports.FfmpegProfile$ = FfmpegProfile$ = {}));
function ffmpegProfileToJSON(ffmpegProfile) {
    return JSON.stringify(exports.FfmpegProfile$outboundSchema.parse(ffmpegProfile));
}
function ffmpegProfileFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.FfmpegProfile$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'FfmpegProfile' from JSON`);
}
//# sourceMappingURL=ffmpegprofile.js.map