import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
export declare enum InputCreatorIdType {
    Unverified = "unverified"
}
export type InputCreatorId1 = {
    type: InputCreatorIdType;
    value: string;
};
export type InputCreatorId = InputCreatorId1 | string;
/** @internal */
export declare const InputCreatorIdType$inboundSchema: z.ZodNativeEnum<typeof InputCreatorIdType>;
/** @internal */
export declare const InputCreatorIdType$outboundSchema: z.ZodNativeEnum<typeof InputCreatorIdType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace InputCreatorIdType$ {
    /** @deprecated use `InputCreatorIdType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<typeof InputCreatorIdType>;
    /** @deprecated use `InputCreatorIdType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<typeof InputCreatorIdType>;
}
/** @internal */
export declare const InputCreatorId1$inboundSchema: z.ZodType<InputCreatorId1, z.ZodTypeDef, unknown>;
/** @internal */
export type InputCreatorId1$Outbound = {
    type: string;
    value: string;
};
/** @internal */
export declare const InputCreatorId1$outboundSchema: z.ZodType<InputCreatorId1$Outbound, z.ZodTypeDef, InputCreatorId1>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace InputCreatorId1$ {
    /** @deprecated use `InputCreatorId1$inboundSchema` instead. */
    const inboundSchema: z.ZodType<InputCreatorId1, z.ZodTypeDef, unknown>;
    /** @deprecated use `InputCreatorId1$outboundSchema` instead. */
    const outboundSchema: z.ZodType<InputCreatorId1$Outbound, z.ZodTypeDef, InputCreatorId1>;
    /** @deprecated use `InputCreatorId1$Outbound` instead. */
    type Outbound = InputCreatorId1$Outbound;
}
export declare function inputCreatorId1ToJSON(inputCreatorId1: InputCreatorId1): string;
export declare function inputCreatorId1FromJSON(jsonString: string): SafeParseResult<InputCreatorId1, SDKValidationError>;
/** @internal */
export declare const InputCreatorId$inboundSchema: z.ZodType<InputCreatorId, z.ZodTypeDef, unknown>;
/** @internal */
export type InputCreatorId$Outbound = InputCreatorId1$Outbound | string;
/** @internal */
export declare const InputCreatorId$outboundSchema: z.ZodType<InputCreatorId$Outbound, z.ZodTypeDef, InputCreatorId>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace InputCreatorId$ {
    /** @deprecated use `InputCreatorId$inboundSchema` instead. */
    const inboundSchema: z.ZodType<InputCreatorId, z.ZodTypeDef, unknown>;
    /** @deprecated use `InputCreatorId$outboundSchema` instead. */
    const outboundSchema: z.ZodType<InputCreatorId$Outbound, z.ZodTypeDef, InputCreatorId>;
    /** @deprecated use `InputCreatorId$Outbound` instead. */
    type Outbound = InputCreatorId$Outbound;
}
export declare function inputCreatorIdToJSON(inputCreatorId: InputCreatorId): string;
export declare function inputCreatorIdFromJSON(jsonString: string): SafeParseResult<InputCreatorId, SDKValidationError>;
//# sourceMappingURL=inputcreatorid.d.ts.map