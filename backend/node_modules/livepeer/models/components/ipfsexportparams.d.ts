import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
export type IpfsExportParams2 = {
    /**
     * Will be added to the pinata_api_key header.
     */
    apiKey: string;
};
export type IpfsExportParams1 = {};
/**
 * Custom credentials for the Piñata service. Must have either
 *
 * @remarks
 * a JWT or an API key and an API secret.
 */
export type Pinata = IpfsExportParams1 | IpfsExportParams2;
export type IpfsExportParams = {
    dollarRef?: any | undefined;
    /**
     * Custom credentials for the Piñata service. Must have either
     *
     * @remarks
     * a JWT or an API key and an API secret.
     */
    pinata?: IpfsExportParams1 | IpfsExportParams2 | undefined;
};
/** @internal */
export declare const IpfsExportParams2$inboundSchema: z.ZodType<IpfsExportParams2, z.ZodTypeDef, unknown>;
/** @internal */
export type IpfsExportParams2$Outbound = {
    apiKey: string;
};
/** @internal */
export declare const IpfsExportParams2$outboundSchema: z.ZodType<IpfsExportParams2$Outbound, z.ZodTypeDef, IpfsExportParams2>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace IpfsExportParams2$ {
    /** @deprecated use `IpfsExportParams2$inboundSchema` instead. */
    const inboundSchema: z.ZodType<IpfsExportParams2, z.ZodTypeDef, unknown>;
    /** @deprecated use `IpfsExportParams2$outboundSchema` instead. */
    const outboundSchema: z.ZodType<IpfsExportParams2$Outbound, z.ZodTypeDef, IpfsExportParams2>;
    /** @deprecated use `IpfsExportParams2$Outbound` instead. */
    type Outbound = IpfsExportParams2$Outbound;
}
export declare function ipfsExportParams2ToJSON(ipfsExportParams2: IpfsExportParams2): string;
export declare function ipfsExportParams2FromJSON(jsonString: string): SafeParseResult<IpfsExportParams2, SDKValidationError>;
/** @internal */
export declare const IpfsExportParams1$inboundSchema: z.ZodType<IpfsExportParams1, z.ZodTypeDef, unknown>;
/** @internal */
export type IpfsExportParams1$Outbound = {};
/** @internal */
export declare const IpfsExportParams1$outboundSchema: z.ZodType<IpfsExportParams1$Outbound, z.ZodTypeDef, IpfsExportParams1>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace IpfsExportParams1$ {
    /** @deprecated use `IpfsExportParams1$inboundSchema` instead. */
    const inboundSchema: z.ZodType<IpfsExportParams1, z.ZodTypeDef, unknown>;
    /** @deprecated use `IpfsExportParams1$outboundSchema` instead. */
    const outboundSchema: z.ZodType<IpfsExportParams1$Outbound, z.ZodTypeDef, IpfsExportParams1>;
    /** @deprecated use `IpfsExportParams1$Outbound` instead. */
    type Outbound = IpfsExportParams1$Outbound;
}
export declare function ipfsExportParams1ToJSON(ipfsExportParams1: IpfsExportParams1): string;
export declare function ipfsExportParams1FromJSON(jsonString: string): SafeParseResult<IpfsExportParams1, SDKValidationError>;
/** @internal */
export declare const Pinata$inboundSchema: z.ZodType<Pinata, z.ZodTypeDef, unknown>;
/** @internal */
export type Pinata$Outbound = IpfsExportParams1$Outbound | IpfsExportParams2$Outbound;
/** @internal */
export declare const Pinata$outboundSchema: z.ZodType<Pinata$Outbound, z.ZodTypeDef, Pinata>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Pinata$ {
    /** @deprecated use `Pinata$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Pinata, z.ZodTypeDef, unknown>;
    /** @deprecated use `Pinata$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Pinata$Outbound, z.ZodTypeDef, Pinata>;
    /** @deprecated use `Pinata$Outbound` instead. */
    type Outbound = Pinata$Outbound;
}
export declare function pinataToJSON(pinata: Pinata): string;
export declare function pinataFromJSON(jsonString: string): SafeParseResult<Pinata, SDKValidationError>;
/** @internal */
export declare const IpfsExportParams$inboundSchema: z.ZodType<IpfsExportParams, z.ZodTypeDef, unknown>;
/** @internal */
export type IpfsExportParams$Outbound = {
    $ref?: any | undefined;
    pinata?: IpfsExportParams1$Outbound | IpfsExportParams2$Outbound | undefined;
};
/** @internal */
export declare const IpfsExportParams$outboundSchema: z.ZodType<IpfsExportParams$Outbound, z.ZodTypeDef, IpfsExportParams>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace IpfsExportParams$ {
    /** @deprecated use `IpfsExportParams$inboundSchema` instead. */
    const inboundSchema: z.ZodType<IpfsExportParams, z.ZodTypeDef, unknown>;
    /** @deprecated use `IpfsExportParams$outboundSchema` instead. */
    const outboundSchema: z.ZodType<IpfsExportParams$Outbound, z.ZodTypeDef, IpfsExportParams>;
    /** @deprecated use `IpfsExportParams$Outbound` instead. */
    type Outbound = IpfsExportParams$Outbound;
}
export declare function ipfsExportParamsToJSON(ipfsExportParams: IpfsExportParams): string;
export declare function ipfsExportParamsFromJSON(jsonString: string): SafeParseResult<IpfsExportParams, SDKValidationError>;
//# sourceMappingURL=ipfsexportparams.d.ts.map