"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.IpfsExportParams$ = exports.IpfsExportParams$outboundSchema = exports.IpfsExportParams$inboundSchema = exports.Pinata$ = exports.Pinata$outboundSchema = exports.Pinata$inboundSchema = exports.IpfsExportParams1$ = exports.IpfsExportParams1$outboundSchema = exports.IpfsExportParams1$inboundSchema = exports.IpfsExportParams2$ = exports.IpfsExportParams2$outboundSchema = exports.IpfsExportParams2$inboundSchema = void 0;
exports.ipfsExportParams2ToJSON = ipfsExportParams2ToJSON;
exports.ipfsExportParams2FromJSON = ipfsExportParams2FromJSON;
exports.ipfsExportParams1ToJSON = ipfsExportParams1ToJSON;
exports.ipfsExportParams1FromJSON = ipfsExportParams1FromJSON;
exports.pinataToJSON = pinataToJSON;
exports.pinataFromJSON = pinataFromJSON;
exports.ipfsExportParamsToJSON = ipfsExportParamsToJSON;
exports.ipfsExportParamsFromJSON = ipfsExportParamsFromJSON;
const z = __importStar(require("zod"));
const primitives_js_1 = require("../../lib/primitives.js");
const schemas_js_1 = require("../../lib/schemas.js");
/** @internal */
exports.IpfsExportParams2$inboundSchema = z.object({
    apiKey: z.string(),
});
/** @internal */
exports.IpfsExportParams2$outboundSchema = z.object({
    apiKey: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var IpfsExportParams2$;
(function (IpfsExportParams2$) {
    /** @deprecated use `IpfsExportParams2$inboundSchema` instead. */
    IpfsExportParams2$.inboundSchema = exports.IpfsExportParams2$inboundSchema;
    /** @deprecated use `IpfsExportParams2$outboundSchema` instead. */
    IpfsExportParams2$.outboundSchema = exports.IpfsExportParams2$outboundSchema;
})(IpfsExportParams2$ || (exports.IpfsExportParams2$ = IpfsExportParams2$ = {}));
function ipfsExportParams2ToJSON(ipfsExportParams2) {
    return JSON.stringify(exports.IpfsExportParams2$outboundSchema.parse(ipfsExportParams2));
}
function ipfsExportParams2FromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.IpfsExportParams2$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'IpfsExportParams2' from JSON`);
}
/** @internal */
exports.IpfsExportParams1$inboundSchema = z.object({});
/** @internal */
exports.IpfsExportParams1$outboundSchema = z.object({});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var IpfsExportParams1$;
(function (IpfsExportParams1$) {
    /** @deprecated use `IpfsExportParams1$inboundSchema` instead. */
    IpfsExportParams1$.inboundSchema = exports.IpfsExportParams1$inboundSchema;
    /** @deprecated use `IpfsExportParams1$outboundSchema` instead. */
    IpfsExportParams1$.outboundSchema = exports.IpfsExportParams1$outboundSchema;
})(IpfsExportParams1$ || (exports.IpfsExportParams1$ = IpfsExportParams1$ = {}));
function ipfsExportParams1ToJSON(ipfsExportParams1) {
    return JSON.stringify(exports.IpfsExportParams1$outboundSchema.parse(ipfsExportParams1));
}
function ipfsExportParams1FromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.IpfsExportParams1$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'IpfsExportParams1' from JSON`);
}
/** @internal */
exports.Pinata$inboundSchema = z
    .union([
    z.lazy(() => exports.IpfsExportParams1$inboundSchema),
    z.lazy(() => exports.IpfsExportParams2$inboundSchema),
]);
/** @internal */
exports.Pinata$outboundSchema = z.union([
    z.lazy(() => exports.IpfsExportParams1$outboundSchema),
    z.lazy(() => exports.IpfsExportParams2$outboundSchema),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var Pinata$;
(function (Pinata$) {
    /** @deprecated use `Pinata$inboundSchema` instead. */
    Pinata$.inboundSchema = exports.Pinata$inboundSchema;
    /** @deprecated use `Pinata$outboundSchema` instead. */
    Pinata$.outboundSchema = exports.Pinata$outboundSchema;
})(Pinata$ || (exports.Pinata$ = Pinata$ = {}));
function pinataToJSON(pinata) {
    return JSON.stringify(exports.Pinata$outboundSchema.parse(pinata));
}
function pinataFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.Pinata$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Pinata' from JSON`);
}
/** @internal */
exports.IpfsExportParams$inboundSchema = z.object({
    $ref: z.any().optional(),
    pinata: z.union([
        z.lazy(() => exports.IpfsExportParams1$inboundSchema),
        z.lazy(() => exports.IpfsExportParams2$inboundSchema),
    ]).optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "$ref": "dollarRef",
    });
});
/** @internal */
exports.IpfsExportParams$outboundSchema = z.object({
    dollarRef: z.any().optional(),
    pinata: z.union([
        z.lazy(() => exports.IpfsExportParams1$outboundSchema),
        z.lazy(() => exports.IpfsExportParams2$outboundSchema),
    ]).optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        dollarRef: "$ref",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var IpfsExportParams$;
(function (IpfsExportParams$) {
    /** @deprecated use `IpfsExportParams$inboundSchema` instead. */
    IpfsExportParams$.inboundSchema = exports.IpfsExportParams$inboundSchema;
    /** @deprecated use `IpfsExportParams$outboundSchema` instead. */
    IpfsExportParams$.outboundSchema = exports.IpfsExportParams$outboundSchema;
})(IpfsExportParams$ || (exports.IpfsExportParams$ = IpfsExportParams$ = {}));
function ipfsExportParamsToJSON(ipfsExportParams) {
    return JSON.stringify(exports.IpfsExportParams$outboundSchema.parse(ipfsExportParams));
}
function ipfsExportParamsFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.IpfsExportParams$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'IpfsExportParams' from JSON`);
}
//# sourceMappingURL=ipfsexportparams.js.map