import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
export type IpfsFileInfo = {
    /**
     * CID of the file on IPFS
     */
    cid: string;
    /**
     * URL with IPFS scheme for the file
     */
    url?: string | undefined;
    /**
     * URL to access file via HTTP through an IPFS gateway
     */
    gatewayUrl?: string | undefined;
};
/** @internal */
export declare const IpfsFileInfo$inboundSchema: z.ZodType<IpfsFileInfo, z.ZodTypeDef, unknown>;
/** @internal */
export type IpfsFileInfo$Outbound = {
    cid: string;
    url?: string | undefined;
    gatewayUrl?: string | undefined;
};
/** @internal */
export declare const IpfsFileInfo$outboundSchema: z.ZodType<IpfsFileInfo$Outbound, z.ZodTypeDef, IpfsFileInfo>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace IpfsFileInfo$ {
    /** @deprecated use `IpfsFileInfo$inboundSchema` instead. */
    const inboundSchema: z.ZodType<IpfsFileInfo, z.ZodTypeDef, unknown>;
    /** @deprecated use `IpfsFileInfo$outboundSchema` instead. */
    const outboundSchema: z.ZodType<IpfsFileInfo$Outbound, z.ZodTypeDef, IpfsFileInfo>;
    /** @deprecated use `IpfsFileInfo$Outbound` instead. */
    type Outbound = IpfsFileInfo$Outbound;
}
export declare function ipfsFileInfoToJSON(ipfsFileInfo: IpfsFileInfo): string;
export declare function ipfsFileInfoFromJSON(jsonString: string): SafeParseResult<IpfsFileInfo, SDKValidationError>;
//# sourceMappingURL=ipfsfileinfo.d.ts.map