import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
export type LLMResponse = {
    response: string;
    tokensUsed: number;
};
/** @internal */
export declare const LLMResponse$inboundSchema: z.ZodType<LLMResponse, z.ZodTypeDef, unknown>;
/** @internal */
export type LLMResponse$Outbound = {
    response: string;
    tokens_used: number;
};
/** @internal */
export declare const LLMResponse$outboundSchema: z.ZodType<LLMResponse$Outbound, z.ZodTypeDef, LLMResponse>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace LLMResponse$ {
    /** @deprecated use `LLMResponse$inboundSchema` instead. */
    const inboundSchema: z.ZodType<LLMResponse, z.ZodTypeDef, unknown>;
    /** @deprecated use `LLMResponse$outboundSchema` instead. */
    const outboundSchema: z.ZodType<LLMResponse$Outbound, z.ZodTypeDef, LLMResponse>;
    /** @deprecated use `LLMResponse$Outbound` instead. */
    type Outbound = LLMResponse$Outbound;
}
export declare function llmResponseToJSON(llmResponse: LLMResponse): string;
export declare function llmResponseFromJSON(jsonString: string): SafeParseResult<LLMResponse, SDKValidationError>;
//# sourceMappingURL=llmresponse.d.ts.map