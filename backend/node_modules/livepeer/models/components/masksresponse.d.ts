import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
/**
 * Response model for object segmentation.
 */
export type MasksResponse = {
    /**
     * The generated masks.
     */
    masks: string;
    /**
     * The model's confidence scores for each generated mask.
     */
    scores: string;
    /**
     * The raw, unnormalized predictions (logits) for the masks.
     */
    logits: string;
};
/** @internal */
export declare const MasksResponse$inboundSchema: z.ZodType<MasksResponse, z.ZodTypeDef, unknown>;
/** @internal */
export type MasksResponse$Outbound = {
    masks: string;
    scores: string;
    logits: string;
};
/** @internal */
export declare const MasksResponse$outboundSchema: z.ZodType<MasksResponse$Outbound, z.ZodTypeDef, MasksResponse>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace MasksResponse$ {
    /** @deprecated use `MasksResponse$inboundSchema` instead. */
    const inboundSchema: z.ZodType<MasksResponse, z.ZodTypeDef, unknown>;
    /** @deprecated use `MasksResponse$outboundSchema` instead. */
    const outboundSchema: z.ZodType<MasksResponse$Outbound, z.ZodTypeDef, MasksResponse>;
    /** @deprecated use `MasksResponse$Outbound` instead. */
    type Outbound = MasksResponse$Outbound;
}
export declare function masksResponseToJSON(masksResponse: MasksResponse): string;
export declare function masksResponseFromJSON(jsonString: string): SafeParseResult<MasksResponse, SDKValidationError>;
//# sourceMappingURL=masksresponse.d.ts.map