import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
/**
 * A media object containing information about the generated media.
 */
export type Media = {
    /**
     * The URL where the media can be accessed.
     */
    url: string;
    /**
     * The seed used to generate the media.
     */
    seed: number;
    /**
     * Whether the media was flagged as NSFW.
     */
    nsfw: boolean;
};
/** @internal */
export declare const Media$inboundSchema: z.ZodType<Media, z.ZodTypeDef, unknown>;
/** @internal */
export type Media$Outbound = {
    url: string;
    seed: number;
    nsfw: boolean;
};
/** @internal */
export declare const Media$outboundSchema: z.ZodType<Media$Outbound, z.ZodTypeDef, Media>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Media$ {
    /** @deprecated use `Media$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Media, z.ZodTypeDef, unknown>;
    /** @deprecated use `Media$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Media$Outbound, z.ZodTypeDef, Media>;
    /** @deprecated use `Media$Outbound` instead. */
    type Outbound = Media$Outbound;
}
export declare function mediaToJSON(media: Media): string;
export declare function mediaFromJSON(jsonString: string): SafeParseResult<Media, SDKValidationError>;
//# sourceMappingURL=media.d.ts.map