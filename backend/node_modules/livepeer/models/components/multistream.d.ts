import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import { Target, Target$Outbound } from "./target.js";
export type Multistream = {
    /**
     * References to targets where this stream will be simultaneously
     *
     * @remarks
     * streamed to
     */
    targets?: Array<Target> | undefined;
};
/** @internal */
export declare const Multistream$inboundSchema: z.ZodType<Multistream, z.ZodTypeDef, unknown>;
/** @internal */
export type Multistream$Outbound = {
    targets?: Array<Target$Outbound> | undefined;
};
/** @internal */
export declare const Multistream$outboundSchema: z.ZodType<Multistream$Outbound, z.ZodTypeDef, Multistream>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Multistream$ {
    /** @deprecated use `Multistream$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Multistream, z.ZodTypeDef, unknown>;
    /** @deprecated use `Multistream$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Multistream$Outbound, z.ZodTypeDef, Multistream>;
    /** @deprecated use `Multistream$Outbound` instead. */
    type Outbound = Multistream$Outbound;
}
export declare function multistreamToJSON(multistream: Multistream): string;
export declare function multistreamFromJSON(jsonString: string): SafeParseResult<Multistream, SDKValidationError>;
//# sourceMappingURL=multistream.d.ts.map