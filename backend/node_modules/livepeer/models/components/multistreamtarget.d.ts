import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
export type MultistreamTarget = {
    id?: string | undefined;
    name?: string | undefined;
    /**
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    userId?: string | undefined;
    /**
     * If true then this multistream target will not be used for pushing
     *
     * @remarks
     * even if it is configured in a stream object.
     */
    disabled?: boolean | undefined;
    /**
     * Timestamp (in milliseconds) at which multistream target object was
     *
     * @remarks
     * created
     */
    createdAt?: number | undefined;
};
/** @internal */
export declare const MultistreamTarget$inboundSchema: z.ZodType<MultistreamTarget, z.ZodTypeDef, unknown>;
/** @internal */
export type MultistreamTarget$Outbound = {
    id?: string | undefined;
    name?: string | undefined;
    userId?: string | undefined;
    disabled?: boolean | undefined;
    createdAt?: number | undefined;
};
/** @internal */
export declare const MultistreamTarget$outboundSchema: z.ZodType<MultistreamTarget$Outbound, z.ZodTypeDef, MultistreamTarget>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace MultistreamTarget$ {
    /** @deprecated use `MultistreamTarget$inboundSchema` instead. */
    const inboundSchema: z.ZodType<MultistreamTarget, z.ZodTypeDef, unknown>;
    /** @deprecated use `MultistreamTarget$outboundSchema` instead. */
    const outboundSchema: z.ZodType<MultistreamTarget$Outbound, z.ZodTypeDef, MultistreamTarget>;
    /** @deprecated use `MultistreamTarget$Outbound` instead. */
    type Outbound = MultistreamTarget$Outbound;
}
export declare function multistreamTargetToJSON(multistreamTarget: MultistreamTarget): string;
export declare function multistreamTargetFromJSON(jsonString: string): SafeParseResult<MultistreamTarget, SDKValidationError>;
//# sourceMappingURL=multistreamtarget.d.ts.map