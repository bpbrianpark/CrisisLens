import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import { Encryption, Encryption$Outbound } from "./encryption.js";
import { InputCreatorId, InputCreatorId$Outbound } from "./inputcreatorid.js";
import { PlaybackPolicy, PlaybackPolicy$Outbound } from "./playbackpolicy.js";
import { Storage, Storage$Outbound } from "./storage.js";
import { TranscodeProfile, TranscodeProfile$Outbound } from "./transcodeprofile.js";
export type NewAssetFromUrlPayload = {
    /**
     * The name of the asset. This is not necessarily the filename - it can be a custom name or title.
     *
     * @remarks
     */
    name: string;
    /**
     * Whether to generate MP4s for the asset.
     */
    staticMp4?: boolean | undefined;
    /**
     * Whether the playback policy for an asset or stream is public or signed
     */
    playbackPolicy?: PlaybackPolicy | null | undefined;
    creatorId?: InputCreatorId | undefined;
    storage?: Storage | undefined;
    /**
     * URL where the asset contents can be retrieved, e.g. `https://s3.amazonaws.com/my-bucket/path/filename.mp4`.
     *
     * @remarks
     * For an IPFS source, this should be similar to: `ipfs://{CID}`. For an Arweave
     * source: `ar://{CID}`.
     */
    url: string;
    encryption?: Encryption | undefined;
    /**
     * Decides if the output video should include C2PA signature
     */
    c2pa?: boolean | undefined;
    profiles?: Array<TranscodeProfile> | null | undefined;
    /**
     * How many seconds the duration of each output segment should be
     */
    targetSegmentSizeSecs?: number | undefined;
};
/** @internal */
export declare const NewAssetFromUrlPayload$inboundSchema: z.ZodType<NewAssetFromUrlPayload, z.ZodTypeDef, unknown>;
/** @internal */
export type NewAssetFromUrlPayload$Outbound = {
    name: string;
    staticMp4?: boolean | undefined;
    playbackPolicy?: PlaybackPolicy$Outbound | null | undefined;
    creatorId?: InputCreatorId$Outbound | undefined;
    storage?: Storage$Outbound | undefined;
    url: string;
    encryption?: Encryption$Outbound | undefined;
    c2pa?: boolean | undefined;
    profiles?: Array<TranscodeProfile$Outbound> | null | undefined;
    targetSegmentSizeSecs?: number | undefined;
};
/** @internal */
export declare const NewAssetFromUrlPayload$outboundSchema: z.ZodType<NewAssetFromUrlPayload$Outbound, z.ZodTypeDef, NewAssetFromUrlPayload>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace NewAssetFromUrlPayload$ {
    /** @deprecated use `NewAssetFromUrlPayload$inboundSchema` instead. */
    const inboundSchema: z.ZodType<NewAssetFromUrlPayload, z.ZodTypeDef, unknown>;
    /** @deprecated use `NewAssetFromUrlPayload$outboundSchema` instead. */
    const outboundSchema: z.ZodType<NewAssetFromUrlPayload$Outbound, z.ZodTypeDef, NewAssetFromUrlPayload>;
    /** @deprecated use `NewAssetFromUrlPayload$Outbound` instead. */
    type Outbound = NewAssetFromUrlPayload$Outbound;
}
export declare function newAssetFromUrlPayloadToJSON(newAssetFromUrlPayload: NewAssetFromUrlPayload): string;
export declare function newAssetFromUrlPayloadFromJSON(jsonString: string): SafeParseResult<NewAssetFromUrlPayload, SDKValidationError>;
//# sourceMappingURL=newassetfromurlpayload.d.ts.map