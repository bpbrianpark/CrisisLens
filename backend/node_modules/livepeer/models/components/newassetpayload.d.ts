import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import { InputCreatorId, InputCreatorId$Outbound } from "./inputcreatorid.js";
import { PlaybackPolicy, PlaybackPolicy$Outbound } from "./playbackpolicy.js";
import { Spec, Spec$Outbound } from "./spec.js";
import { TranscodeProfile, TranscodeProfile$Outbound } from "./transcodeprofile.js";
export type NewAssetPayload1 = {
    spec?: Spec | null | undefined;
};
/**
 * Set to true to make default export to IPFS. To customize the
 *
 * @remarks
 * pinned files, specify an object with a spec field. False or null
 * means to unpin from IPFS, but it's unsupported right now.
 */
export type NewAssetPayloadIpfs = NewAssetPayload1 | boolean;
export type NewAssetPayloadStorage = {
    /**
     * Set to true to make default export to IPFS. To customize the
     *
     * @remarks
     * pinned files, specify an object with a spec field. False or null
     * means to unpin from IPFS, but it's unsupported right now.
     */
    ipfs?: NewAssetPayload1 | boolean | null | undefined;
};
export type NewAssetPayloadEncryption = {
    /**
     * Encryption key used to encrypt the asset. Only writable in the upload asset endpoints and cannot be retrieved back.
     */
    encryptedKey: string;
};
export type NewAssetPayload = {
    /**
     * The name of the asset. This is not necessarily the filename - it can be a custom name or title.
     *
     * @remarks
     */
    name: string;
    /**
     * Whether to generate MP4s for the asset.
     */
    staticMp4?: boolean | undefined;
    /**
     * Whether the playback policy for an asset or stream is public or signed
     */
    playbackPolicy?: PlaybackPolicy | null | undefined;
    creatorId?: InputCreatorId | undefined;
    storage?: NewAssetPayloadStorage | undefined;
    encryption?: NewAssetPayloadEncryption | undefined;
    /**
     * Decides if the output video should include C2PA signature
     */
    c2pa?: boolean | undefined;
    profiles?: Array<TranscodeProfile> | null | undefined;
    /**
     * How many seconds the duration of each output segment should be
     */
    targetSegmentSizeSecs?: number | undefined;
};
/** @internal */
export declare const NewAssetPayload1$inboundSchema: z.ZodType<NewAssetPayload1, z.ZodTypeDef, unknown>;
/** @internal */
export type NewAssetPayload1$Outbound = {
    spec?: Spec$Outbound | null | undefined;
};
/** @internal */
export declare const NewAssetPayload1$outboundSchema: z.ZodType<NewAssetPayload1$Outbound, z.ZodTypeDef, NewAssetPayload1>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace NewAssetPayload1$ {
    /** @deprecated use `NewAssetPayload1$inboundSchema` instead. */
    const inboundSchema: z.ZodType<NewAssetPayload1, z.ZodTypeDef, unknown>;
    /** @deprecated use `NewAssetPayload1$outboundSchema` instead. */
    const outboundSchema: z.ZodType<NewAssetPayload1$Outbound, z.ZodTypeDef, NewAssetPayload1>;
    /** @deprecated use `NewAssetPayload1$Outbound` instead. */
    type Outbound = NewAssetPayload1$Outbound;
}
export declare function newAssetPayload1ToJSON(newAssetPayload1: NewAssetPayload1): string;
export declare function newAssetPayload1FromJSON(jsonString: string): SafeParseResult<NewAssetPayload1, SDKValidationError>;
/** @internal */
export declare const NewAssetPayloadIpfs$inboundSchema: z.ZodType<NewAssetPayloadIpfs, z.ZodTypeDef, unknown>;
/** @internal */
export type NewAssetPayloadIpfs$Outbound = NewAssetPayload1$Outbound | boolean;
/** @internal */
export declare const NewAssetPayloadIpfs$outboundSchema: z.ZodType<NewAssetPayloadIpfs$Outbound, z.ZodTypeDef, NewAssetPayloadIpfs>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace NewAssetPayloadIpfs$ {
    /** @deprecated use `NewAssetPayloadIpfs$inboundSchema` instead. */
    const inboundSchema: z.ZodType<NewAssetPayloadIpfs, z.ZodTypeDef, unknown>;
    /** @deprecated use `NewAssetPayloadIpfs$outboundSchema` instead. */
    const outboundSchema: z.ZodType<NewAssetPayloadIpfs$Outbound, z.ZodTypeDef, NewAssetPayloadIpfs>;
    /** @deprecated use `NewAssetPayloadIpfs$Outbound` instead. */
    type Outbound = NewAssetPayloadIpfs$Outbound;
}
export declare function newAssetPayloadIpfsToJSON(newAssetPayloadIpfs: NewAssetPayloadIpfs): string;
export declare function newAssetPayloadIpfsFromJSON(jsonString: string): SafeParseResult<NewAssetPayloadIpfs, SDKValidationError>;
/** @internal */
export declare const NewAssetPayloadStorage$inboundSchema: z.ZodType<NewAssetPayloadStorage, z.ZodTypeDef, unknown>;
/** @internal */
export type NewAssetPayloadStorage$Outbound = {
    ipfs?: NewAssetPayload1$Outbound | boolean | null | undefined;
};
/** @internal */
export declare const NewAssetPayloadStorage$outboundSchema: z.ZodType<NewAssetPayloadStorage$Outbound, z.ZodTypeDef, NewAssetPayloadStorage>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace NewAssetPayloadStorage$ {
    /** @deprecated use `NewAssetPayloadStorage$inboundSchema` instead. */
    const inboundSchema: z.ZodType<NewAssetPayloadStorage, z.ZodTypeDef, unknown>;
    /** @deprecated use `NewAssetPayloadStorage$outboundSchema` instead. */
    const outboundSchema: z.ZodType<NewAssetPayloadStorage$Outbound, z.ZodTypeDef, NewAssetPayloadStorage>;
    /** @deprecated use `NewAssetPayloadStorage$Outbound` instead. */
    type Outbound = NewAssetPayloadStorage$Outbound;
}
export declare function newAssetPayloadStorageToJSON(newAssetPayloadStorage: NewAssetPayloadStorage): string;
export declare function newAssetPayloadStorageFromJSON(jsonString: string): SafeParseResult<NewAssetPayloadStorage, SDKValidationError>;
/** @internal */
export declare const NewAssetPayloadEncryption$inboundSchema: z.ZodType<NewAssetPayloadEncryption, z.ZodTypeDef, unknown>;
/** @internal */
export type NewAssetPayloadEncryption$Outbound = {
    encryptedKey: string;
};
/** @internal */
export declare const NewAssetPayloadEncryption$outboundSchema: z.ZodType<NewAssetPayloadEncryption$Outbound, z.ZodTypeDef, NewAssetPayloadEncryption>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace NewAssetPayloadEncryption$ {
    /** @deprecated use `NewAssetPayloadEncryption$inboundSchema` instead. */
    const inboundSchema: z.ZodType<NewAssetPayloadEncryption, z.ZodTypeDef, unknown>;
    /** @deprecated use `NewAssetPayloadEncryption$outboundSchema` instead. */
    const outboundSchema: z.ZodType<NewAssetPayloadEncryption$Outbound, z.ZodTypeDef, NewAssetPayloadEncryption>;
    /** @deprecated use `NewAssetPayloadEncryption$Outbound` instead. */
    type Outbound = NewAssetPayloadEncryption$Outbound;
}
export declare function newAssetPayloadEncryptionToJSON(newAssetPayloadEncryption: NewAssetPayloadEncryption): string;
export declare function newAssetPayloadEncryptionFromJSON(jsonString: string): SafeParseResult<NewAssetPayloadEncryption, SDKValidationError>;
/** @internal */
export declare const NewAssetPayload$inboundSchema: z.ZodType<NewAssetPayload, z.ZodTypeDef, unknown>;
/** @internal */
export type NewAssetPayload$Outbound = {
    name: string;
    staticMp4?: boolean | undefined;
    playbackPolicy?: PlaybackPolicy$Outbound | null | undefined;
    creatorId?: InputCreatorId$Outbound | undefined;
    storage?: NewAssetPayloadStorage$Outbound | undefined;
    encryption?: NewAssetPayloadEncryption$Outbound | undefined;
    c2pa?: boolean | undefined;
    profiles?: Array<TranscodeProfile$Outbound> | null | undefined;
    targetSegmentSizeSecs?: number | undefined;
};
/** @internal */
export declare const NewAssetPayload$outboundSchema: z.ZodType<NewAssetPayload$Outbound, z.ZodTypeDef, NewAssetPayload>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace NewAssetPayload$ {
    /** @deprecated use `NewAssetPayload$inboundSchema` instead. */
    const inboundSchema: z.ZodType<NewAssetPayload, z.ZodTypeDef, unknown>;
    /** @deprecated use `NewAssetPayload$outboundSchema` instead. */
    const outboundSchema: z.ZodType<NewAssetPayload$Outbound, z.ZodTypeDef, NewAssetPayload>;
    /** @deprecated use `NewAssetPayload$Outbound` instead. */
    type Outbound = NewAssetPayload$Outbound;
}
export declare function newAssetPayloadToJSON(newAssetPayload: NewAssetPayload): string;
export declare function newAssetPayloadFromJSON(jsonString: string): SafeParseResult<NewAssetPayload, SDKValidationError>;
//# sourceMappingURL=newassetpayload.d.ts.map