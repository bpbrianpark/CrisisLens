import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import { FfmpegProfile, FfmpegProfile$Outbound } from "./ffmpegprofile.js";
import { InputCreatorId, InputCreatorId$Outbound } from "./inputcreatorid.js";
import { Multistream, Multistream$Outbound } from "./multistream.js";
import { PlaybackPolicy, PlaybackPolicy$Outbound } from "./playbackpolicy.js";
import { Pull, Pull$Outbound } from "./pull.js";
import { TranscodeProfile, TranscodeProfile$Outbound } from "./transcodeprofile.js";
import { UserTags, UserTags$Outbound } from "./usertags.js";
export type NewStreamPayloadRecordingSpec = {
    profiles?: Array<TranscodeProfile> | null | undefined;
};
export type NewStreamPayload = {
    name: string;
    /**
     * Configuration for a stream that should be actively pulled from an
     *
     * @remarks
     * external source, rather than pushed to Livepeer. If specified, the
     * stream will not have a streamKey.
     */
    pull?: Pull | undefined;
    creatorId?: InputCreatorId | undefined;
    /**
     * Whether the playback policy for an asset or stream is public or signed
     */
    playbackPolicy?: PlaybackPolicy | null | undefined;
    profiles?: Array<FfmpegProfile> | null | undefined;
    /**
     * Should this stream be recorded? Uses default settings. For more
     *
     * @remarks
     * customization, create and configure an object store.
     */
    record?: boolean | undefined;
    recordingSpec?: NewStreamPayloadRecordingSpec | undefined;
    multistream?: Multistream | undefined;
    /**
     * User input tags associated with the stream
     */
    userTags?: {
        [k: string]: UserTags;
    } | undefined;
};
/** @internal */
export declare const NewStreamPayloadRecordingSpec$inboundSchema: z.ZodType<NewStreamPayloadRecordingSpec, z.ZodTypeDef, unknown>;
/** @internal */
export type NewStreamPayloadRecordingSpec$Outbound = {
    profiles?: Array<TranscodeProfile$Outbound> | null | undefined;
};
/** @internal */
export declare const NewStreamPayloadRecordingSpec$outboundSchema: z.ZodType<NewStreamPayloadRecordingSpec$Outbound, z.ZodTypeDef, NewStreamPayloadRecordingSpec>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace NewStreamPayloadRecordingSpec$ {
    /** @deprecated use `NewStreamPayloadRecordingSpec$inboundSchema` instead. */
    const inboundSchema: z.ZodType<NewStreamPayloadRecordingSpec, z.ZodTypeDef, unknown>;
    /** @deprecated use `NewStreamPayloadRecordingSpec$outboundSchema` instead. */
    const outboundSchema: z.ZodType<NewStreamPayloadRecordingSpec$Outbound, z.ZodTypeDef, NewStreamPayloadRecordingSpec>;
    /** @deprecated use `NewStreamPayloadRecordingSpec$Outbound` instead. */
    type Outbound = NewStreamPayloadRecordingSpec$Outbound;
}
export declare function newStreamPayloadRecordingSpecToJSON(newStreamPayloadRecordingSpec: NewStreamPayloadRecordingSpec): string;
export declare function newStreamPayloadRecordingSpecFromJSON(jsonString: string): SafeParseResult<NewStreamPayloadRecordingSpec, SDKValidationError>;
/** @internal */
export declare const NewStreamPayload$inboundSchema: z.ZodType<NewStreamPayload, z.ZodTypeDef, unknown>;
/** @internal */
export type NewStreamPayload$Outbound = {
    name: string;
    pull?: Pull$Outbound | undefined;
    creatorId?: InputCreatorId$Outbound | undefined;
    playbackPolicy?: PlaybackPolicy$Outbound | null | undefined;
    profiles?: Array<FfmpegProfile$Outbound> | null | undefined;
    record?: boolean | undefined;
    recordingSpec?: NewStreamPayloadRecordingSpec$Outbound | undefined;
    multistream?: Multistream$Outbound | undefined;
    userTags?: {
        [k: string]: UserTags$Outbound;
    } | undefined;
};
/** @internal */
export declare const NewStreamPayload$outboundSchema: z.ZodType<NewStreamPayload$Outbound, z.ZodTypeDef, NewStreamPayload>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace NewStreamPayload$ {
    /** @deprecated use `NewStreamPayload$inboundSchema` instead. */
    const inboundSchema: z.ZodType<NewStreamPayload, z.ZodTypeDef, unknown>;
    /** @deprecated use `NewStreamPayload$outboundSchema` instead. */
    const outboundSchema: z.ZodType<NewStreamPayload$Outbound, z.ZodTypeDef, NewStreamPayload>;
    /** @deprecated use `NewStreamPayload$Outbound` instead. */
    type Outbound = NewStreamPayload$Outbound;
}
export declare function newStreamPayloadToJSON(newStreamPayload: NewStreamPayload): string;
export declare function newStreamPayloadFromJSON(jsonString: string): SafeParseResult<NewStreamPayload, SDKValidationError>;
//# sourceMappingURL=newstreampayload.d.ts.map