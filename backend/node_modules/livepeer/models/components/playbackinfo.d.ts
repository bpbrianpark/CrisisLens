import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import { Attestation, Attestation$Outbound } from "./attestation.js";
import { PlaybackPolicy, PlaybackPolicy$Outbound } from "./playbackpolicy.js";
export declare enum PlaybackInfoType {
    Live = "live",
    Vod = "vod",
    Recording = "recording"
}
export declare enum Live {
    Zero = 0,
    One = 1
}
/**
 * Human Readable Name
 */
export declare enum Hrn {
    HlsTs = "HLS (TS)",
    Mp4 = "MP4",
    WebRTCH264 = "WebRTC (H264)",
    FlvH264 = "FLV (H264)",
    ThumbnailJPEG = "Thumbnail (JPEG)",
    ThumbnailPNG = "Thumbnail (PNG)",
    Thumbnails = "Thumbnails"
}
export declare enum PlaybackInfoSchemasType {
    Html5ApplicationVndAppleMpegurl = "html5/application/vnd.apple.mpegurl",
    Html5VideoMp4 = "html5/video/mp4",
    Html5VideoH264 = "html5/video/h264",
    VideoXFlv = "video/x-flv",
    ImageJpeg = "image/jpeg",
    ImagePng = "image/png",
    TextVtt = "text/vtt"
}
export type PlaybackInfoSource = {
    /**
     * Human Readable Name
     */
    hrn: Hrn;
    type: PlaybackInfoSchemasType;
    url: string;
    size?: number | undefined;
    width?: number | undefined;
    height?: number | undefined;
    bitrate?: number | undefined;
};
export declare enum PlaybackInfoHrn {
    HlsTs = "HLS (TS)"
}
export declare enum PlaybackInfoSchemasMetaType {
    Html5ApplicationVndAppleMpegurl = "html5/application/vnd.apple.mpegurl"
}
export type DvrPlayback = {
    hrn?: PlaybackInfoHrn | undefined;
    type?: PlaybackInfoSchemasMetaType | undefined;
    url?: string | undefined;
    error?: string | undefined;
};
export type Meta = {
    live?: Live | undefined;
    /**
     * Whether the playback policy for an asset or stream is public or signed
     */
    playbackPolicy?: PlaybackPolicy | null | undefined;
    source: Array<PlaybackInfoSource>;
    dvrPlayback?: Array<DvrPlayback> | undefined;
    attestation?: Attestation | undefined;
};
export type PlaybackInfo = {
    type: PlaybackInfoType;
    meta: Meta;
};
/** @internal */
export declare const PlaybackInfoType$inboundSchema: z.ZodNativeEnum<typeof PlaybackInfoType>;
/** @internal */
export declare const PlaybackInfoType$outboundSchema: z.ZodNativeEnum<typeof PlaybackInfoType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace PlaybackInfoType$ {
    /** @deprecated use `PlaybackInfoType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<typeof PlaybackInfoType>;
    /** @deprecated use `PlaybackInfoType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<typeof PlaybackInfoType>;
}
/** @internal */
export declare const Live$inboundSchema: z.ZodNativeEnum<typeof Live>;
/** @internal */
export declare const Live$outboundSchema: z.ZodNativeEnum<typeof Live>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Live$ {
    /** @deprecated use `Live$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<typeof Live>;
    /** @deprecated use `Live$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<typeof Live>;
}
/** @internal */
export declare const Hrn$inboundSchema: z.ZodNativeEnum<typeof Hrn>;
/** @internal */
export declare const Hrn$outboundSchema: z.ZodNativeEnum<typeof Hrn>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Hrn$ {
    /** @deprecated use `Hrn$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<typeof Hrn>;
    /** @deprecated use `Hrn$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<typeof Hrn>;
}
/** @internal */
export declare const PlaybackInfoSchemasType$inboundSchema: z.ZodNativeEnum<typeof PlaybackInfoSchemasType>;
/** @internal */
export declare const PlaybackInfoSchemasType$outboundSchema: z.ZodNativeEnum<typeof PlaybackInfoSchemasType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace PlaybackInfoSchemasType$ {
    /** @deprecated use `PlaybackInfoSchemasType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<typeof PlaybackInfoSchemasType>;
    /** @deprecated use `PlaybackInfoSchemasType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<typeof PlaybackInfoSchemasType>;
}
/** @internal */
export declare const PlaybackInfoSource$inboundSchema: z.ZodType<PlaybackInfoSource, z.ZodTypeDef, unknown>;
/** @internal */
export type PlaybackInfoSource$Outbound = {
    hrn: string;
    type: string;
    url: string;
    size?: number | undefined;
    width?: number | undefined;
    height?: number | undefined;
    bitrate?: number | undefined;
};
/** @internal */
export declare const PlaybackInfoSource$outboundSchema: z.ZodType<PlaybackInfoSource$Outbound, z.ZodTypeDef, PlaybackInfoSource>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace PlaybackInfoSource$ {
    /** @deprecated use `PlaybackInfoSource$inboundSchema` instead. */
    const inboundSchema: z.ZodType<PlaybackInfoSource, z.ZodTypeDef, unknown>;
    /** @deprecated use `PlaybackInfoSource$outboundSchema` instead. */
    const outboundSchema: z.ZodType<PlaybackInfoSource$Outbound, z.ZodTypeDef, PlaybackInfoSource>;
    /** @deprecated use `PlaybackInfoSource$Outbound` instead. */
    type Outbound = PlaybackInfoSource$Outbound;
}
export declare function playbackInfoSourceToJSON(playbackInfoSource: PlaybackInfoSource): string;
export declare function playbackInfoSourceFromJSON(jsonString: string): SafeParseResult<PlaybackInfoSource, SDKValidationError>;
/** @internal */
export declare const PlaybackInfoHrn$inboundSchema: z.ZodNativeEnum<typeof PlaybackInfoHrn>;
/** @internal */
export declare const PlaybackInfoHrn$outboundSchema: z.ZodNativeEnum<typeof PlaybackInfoHrn>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace PlaybackInfoHrn$ {
    /** @deprecated use `PlaybackInfoHrn$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<typeof PlaybackInfoHrn>;
    /** @deprecated use `PlaybackInfoHrn$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<typeof PlaybackInfoHrn>;
}
/** @internal */
export declare const PlaybackInfoSchemasMetaType$inboundSchema: z.ZodNativeEnum<typeof PlaybackInfoSchemasMetaType>;
/** @internal */
export declare const PlaybackInfoSchemasMetaType$outboundSchema: z.ZodNativeEnum<typeof PlaybackInfoSchemasMetaType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace PlaybackInfoSchemasMetaType$ {
    /** @deprecated use `PlaybackInfoSchemasMetaType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<typeof PlaybackInfoSchemasMetaType>;
    /** @deprecated use `PlaybackInfoSchemasMetaType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<typeof PlaybackInfoSchemasMetaType>;
}
/** @internal */
export declare const DvrPlayback$inboundSchema: z.ZodType<DvrPlayback, z.ZodTypeDef, unknown>;
/** @internal */
export type DvrPlayback$Outbound = {
    hrn?: string | undefined;
    type?: string | undefined;
    url?: string | undefined;
    error?: string | undefined;
};
/** @internal */
export declare const DvrPlayback$outboundSchema: z.ZodType<DvrPlayback$Outbound, z.ZodTypeDef, DvrPlayback>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace DvrPlayback$ {
    /** @deprecated use `DvrPlayback$inboundSchema` instead. */
    const inboundSchema: z.ZodType<DvrPlayback, z.ZodTypeDef, unknown>;
    /** @deprecated use `DvrPlayback$outboundSchema` instead. */
    const outboundSchema: z.ZodType<DvrPlayback$Outbound, z.ZodTypeDef, DvrPlayback>;
    /** @deprecated use `DvrPlayback$Outbound` instead. */
    type Outbound = DvrPlayback$Outbound;
}
export declare function dvrPlaybackToJSON(dvrPlayback: DvrPlayback): string;
export declare function dvrPlaybackFromJSON(jsonString: string): SafeParseResult<DvrPlayback, SDKValidationError>;
/** @internal */
export declare const Meta$inboundSchema: z.ZodType<Meta, z.ZodTypeDef, unknown>;
/** @internal */
export type Meta$Outbound = {
    live?: number | undefined;
    playbackPolicy?: PlaybackPolicy$Outbound | null | undefined;
    source: Array<PlaybackInfoSource$Outbound>;
    dvrPlayback?: Array<DvrPlayback$Outbound> | undefined;
    attestation?: Attestation$Outbound | undefined;
};
/** @internal */
export declare const Meta$outboundSchema: z.ZodType<Meta$Outbound, z.ZodTypeDef, Meta>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Meta$ {
    /** @deprecated use `Meta$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Meta, z.ZodTypeDef, unknown>;
    /** @deprecated use `Meta$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Meta$Outbound, z.ZodTypeDef, Meta>;
    /** @deprecated use `Meta$Outbound` instead. */
    type Outbound = Meta$Outbound;
}
export declare function metaToJSON(meta: Meta): string;
export declare function metaFromJSON(jsonString: string): SafeParseResult<Meta, SDKValidationError>;
/** @internal */
export declare const PlaybackInfo$inboundSchema: z.ZodType<PlaybackInfo, z.ZodTypeDef, unknown>;
/** @internal */
export type PlaybackInfo$Outbound = {
    type: string;
    meta: Meta$Outbound;
};
/** @internal */
export declare const PlaybackInfo$outboundSchema: z.ZodType<PlaybackInfo$Outbound, z.ZodTypeDef, PlaybackInfo>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace PlaybackInfo$ {
    /** @deprecated use `PlaybackInfo$inboundSchema` instead. */
    const inboundSchema: z.ZodType<PlaybackInfo, z.ZodTypeDef, unknown>;
    /** @deprecated use `PlaybackInfo$outboundSchema` instead. */
    const outboundSchema: z.ZodType<PlaybackInfo$Outbound, z.ZodTypeDef, PlaybackInfo>;
    /** @deprecated use `PlaybackInfo$Outbound` instead. */
    type Outbound = PlaybackInfo$Outbound;
}
export declare function playbackInfoToJSON(playbackInfo: PlaybackInfo): string;
export declare function playbackInfoFromJSON(jsonString: string): SafeParseResult<PlaybackInfo, SDKValidationError>;
//# sourceMappingURL=playbackinfo.d.ts.map