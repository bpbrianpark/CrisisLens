"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PlaybackInfo$ = exports.PlaybackInfo$outboundSchema = exports.PlaybackInfo$inboundSchema = exports.Meta$ = exports.Meta$outboundSchema = exports.Meta$inboundSchema = exports.DvrPlayback$ = exports.DvrPlayback$outboundSchema = exports.DvrPlayback$inboundSchema = exports.PlaybackInfoSchemasMetaType$ = exports.PlaybackInfoSchemasMetaType$outboundSchema = exports.PlaybackInfoSchemasMetaType$inboundSchema = exports.PlaybackInfoHrn$ = exports.PlaybackInfoHrn$outboundSchema = exports.PlaybackInfoHrn$inboundSchema = exports.PlaybackInfoSource$ = exports.PlaybackInfoSource$outboundSchema = exports.PlaybackInfoSource$inboundSchema = exports.PlaybackInfoSchemasType$ = exports.PlaybackInfoSchemasType$outboundSchema = exports.PlaybackInfoSchemasType$inboundSchema = exports.Hrn$ = exports.Hrn$outboundSchema = exports.Hrn$inboundSchema = exports.Live$ = exports.Live$outboundSchema = exports.Live$inboundSchema = exports.PlaybackInfoType$ = exports.PlaybackInfoType$outboundSchema = exports.PlaybackInfoType$inboundSchema = exports.PlaybackInfoSchemasMetaType = exports.PlaybackInfoHrn = exports.PlaybackInfoSchemasType = exports.Hrn = exports.Live = exports.PlaybackInfoType = void 0;
exports.playbackInfoSourceToJSON = playbackInfoSourceToJSON;
exports.playbackInfoSourceFromJSON = playbackInfoSourceFromJSON;
exports.dvrPlaybackToJSON = dvrPlaybackToJSON;
exports.dvrPlaybackFromJSON = dvrPlaybackFromJSON;
exports.metaToJSON = metaToJSON;
exports.metaFromJSON = metaFromJSON;
exports.playbackInfoToJSON = playbackInfoToJSON;
exports.playbackInfoFromJSON = playbackInfoFromJSON;
const z = __importStar(require("zod"));
const schemas_js_1 = require("../../lib/schemas.js");
const attestation_js_1 = require("./attestation.js");
const playbackpolicy_js_1 = require("./playbackpolicy.js");
var PlaybackInfoType;
(function (PlaybackInfoType) {
    PlaybackInfoType["Live"] = "live";
    PlaybackInfoType["Vod"] = "vod";
    PlaybackInfoType["Recording"] = "recording";
})(PlaybackInfoType || (exports.PlaybackInfoType = PlaybackInfoType = {}));
var Live;
(function (Live) {
    Live[Live["Zero"] = 0] = "Zero";
    Live[Live["One"] = 1] = "One";
})(Live || (exports.Live = Live = {}));
/**
 * Human Readable Name
 */
var Hrn;
(function (Hrn) {
    Hrn["HlsTs"] = "HLS (TS)";
    Hrn["Mp4"] = "MP4";
    Hrn["WebRTCH264"] = "WebRTC (H264)";
    Hrn["FlvH264"] = "FLV (H264)";
    Hrn["ThumbnailJPEG"] = "Thumbnail (JPEG)";
    Hrn["ThumbnailPNG"] = "Thumbnail (PNG)";
    Hrn["Thumbnails"] = "Thumbnails";
})(Hrn || (exports.Hrn = Hrn = {}));
var PlaybackInfoSchemasType;
(function (PlaybackInfoSchemasType) {
    PlaybackInfoSchemasType["Html5ApplicationVndAppleMpegurl"] = "html5/application/vnd.apple.mpegurl";
    PlaybackInfoSchemasType["Html5VideoMp4"] = "html5/video/mp4";
    PlaybackInfoSchemasType["Html5VideoH264"] = "html5/video/h264";
    PlaybackInfoSchemasType["VideoXFlv"] = "video/x-flv";
    PlaybackInfoSchemasType["ImageJpeg"] = "image/jpeg";
    PlaybackInfoSchemasType["ImagePng"] = "image/png";
    PlaybackInfoSchemasType["TextVtt"] = "text/vtt";
})(PlaybackInfoSchemasType || (exports.PlaybackInfoSchemasType = PlaybackInfoSchemasType = {}));
var PlaybackInfoHrn;
(function (PlaybackInfoHrn) {
    PlaybackInfoHrn["HlsTs"] = "HLS (TS)";
})(PlaybackInfoHrn || (exports.PlaybackInfoHrn = PlaybackInfoHrn = {}));
var PlaybackInfoSchemasMetaType;
(function (PlaybackInfoSchemasMetaType) {
    PlaybackInfoSchemasMetaType["Html5ApplicationVndAppleMpegurl"] = "html5/application/vnd.apple.mpegurl";
})(PlaybackInfoSchemasMetaType || (exports.PlaybackInfoSchemasMetaType = PlaybackInfoSchemasMetaType = {}));
/** @internal */
exports.PlaybackInfoType$inboundSchema = z.nativeEnum(PlaybackInfoType);
/** @internal */
exports.PlaybackInfoType$outboundSchema = exports.PlaybackInfoType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var PlaybackInfoType$;
(function (PlaybackInfoType$) {
    /** @deprecated use `PlaybackInfoType$inboundSchema` instead. */
    PlaybackInfoType$.inboundSchema = exports.PlaybackInfoType$inboundSchema;
    /** @deprecated use `PlaybackInfoType$outboundSchema` instead. */
    PlaybackInfoType$.outboundSchema = exports.PlaybackInfoType$outboundSchema;
})(PlaybackInfoType$ || (exports.PlaybackInfoType$ = PlaybackInfoType$ = {}));
/** @internal */
exports.Live$inboundSchema = z.nativeEnum(Live);
/** @internal */
exports.Live$outboundSchema = exports.Live$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var Live$;
(function (Live$) {
    /** @deprecated use `Live$inboundSchema` instead. */
    Live$.inboundSchema = exports.Live$inboundSchema;
    /** @deprecated use `Live$outboundSchema` instead. */
    Live$.outboundSchema = exports.Live$outboundSchema;
})(Live$ || (exports.Live$ = Live$ = {}));
/** @internal */
exports.Hrn$inboundSchema = z.nativeEnum(Hrn);
/** @internal */
exports.Hrn$outboundSchema = exports.Hrn$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var Hrn$;
(function (Hrn$) {
    /** @deprecated use `Hrn$inboundSchema` instead. */
    Hrn$.inboundSchema = exports.Hrn$inboundSchema;
    /** @deprecated use `Hrn$outboundSchema` instead. */
    Hrn$.outboundSchema = exports.Hrn$outboundSchema;
})(Hrn$ || (exports.Hrn$ = Hrn$ = {}));
/** @internal */
exports.PlaybackInfoSchemasType$inboundSchema = z.nativeEnum(PlaybackInfoSchemasType);
/** @internal */
exports.PlaybackInfoSchemasType$outboundSchema = exports.PlaybackInfoSchemasType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var PlaybackInfoSchemasType$;
(function (PlaybackInfoSchemasType$) {
    /** @deprecated use `PlaybackInfoSchemasType$inboundSchema` instead. */
    PlaybackInfoSchemasType$.inboundSchema = exports.PlaybackInfoSchemasType$inboundSchema;
    /** @deprecated use `PlaybackInfoSchemasType$outboundSchema` instead. */
    PlaybackInfoSchemasType$.outboundSchema = exports.PlaybackInfoSchemasType$outboundSchema;
})(PlaybackInfoSchemasType$ || (exports.PlaybackInfoSchemasType$ = PlaybackInfoSchemasType$ = {}));
/** @internal */
exports.PlaybackInfoSource$inboundSchema = z.object({
    hrn: exports.Hrn$inboundSchema,
    type: exports.PlaybackInfoSchemasType$inboundSchema,
    url: z.string(),
    size: z.number().optional(),
    width: z.number().optional(),
    height: z.number().optional(),
    bitrate: z.number().optional(),
});
/** @internal */
exports.PlaybackInfoSource$outboundSchema = z.object({
    hrn: exports.Hrn$outboundSchema,
    type: exports.PlaybackInfoSchemasType$outboundSchema,
    url: z.string(),
    size: z.number().optional(),
    width: z.number().optional(),
    height: z.number().optional(),
    bitrate: z.number().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var PlaybackInfoSource$;
(function (PlaybackInfoSource$) {
    /** @deprecated use `PlaybackInfoSource$inboundSchema` instead. */
    PlaybackInfoSource$.inboundSchema = exports.PlaybackInfoSource$inboundSchema;
    /** @deprecated use `PlaybackInfoSource$outboundSchema` instead. */
    PlaybackInfoSource$.outboundSchema = exports.PlaybackInfoSource$outboundSchema;
})(PlaybackInfoSource$ || (exports.PlaybackInfoSource$ = PlaybackInfoSource$ = {}));
function playbackInfoSourceToJSON(playbackInfoSource) {
    return JSON.stringify(exports.PlaybackInfoSource$outboundSchema.parse(playbackInfoSource));
}
function playbackInfoSourceFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.PlaybackInfoSource$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'PlaybackInfoSource' from JSON`);
}
/** @internal */
exports.PlaybackInfoHrn$inboundSchema = z.nativeEnum(PlaybackInfoHrn);
/** @internal */
exports.PlaybackInfoHrn$outboundSchema = exports.PlaybackInfoHrn$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var PlaybackInfoHrn$;
(function (PlaybackInfoHrn$) {
    /** @deprecated use `PlaybackInfoHrn$inboundSchema` instead. */
    PlaybackInfoHrn$.inboundSchema = exports.PlaybackInfoHrn$inboundSchema;
    /** @deprecated use `PlaybackInfoHrn$outboundSchema` instead. */
    PlaybackInfoHrn$.outboundSchema = exports.PlaybackInfoHrn$outboundSchema;
})(PlaybackInfoHrn$ || (exports.PlaybackInfoHrn$ = PlaybackInfoHrn$ = {}));
/** @internal */
exports.PlaybackInfoSchemasMetaType$inboundSchema = z.nativeEnum(PlaybackInfoSchemasMetaType);
/** @internal */
exports.PlaybackInfoSchemasMetaType$outboundSchema = exports.PlaybackInfoSchemasMetaType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var PlaybackInfoSchemasMetaType$;
(function (PlaybackInfoSchemasMetaType$) {
    /** @deprecated use `PlaybackInfoSchemasMetaType$inboundSchema` instead. */
    PlaybackInfoSchemasMetaType$.inboundSchema = exports.PlaybackInfoSchemasMetaType$inboundSchema;
    /** @deprecated use `PlaybackInfoSchemasMetaType$outboundSchema` instead. */
    PlaybackInfoSchemasMetaType$.outboundSchema = exports.PlaybackInfoSchemasMetaType$outboundSchema;
})(PlaybackInfoSchemasMetaType$ || (exports.PlaybackInfoSchemasMetaType$ = PlaybackInfoSchemasMetaType$ = {}));
/** @internal */
exports.DvrPlayback$inboundSchema = z.object({
    hrn: exports.PlaybackInfoHrn$inboundSchema.optional(),
    type: exports.PlaybackInfoSchemasMetaType$inboundSchema.optional(),
    url: z.string().optional(),
    error: z.string().optional(),
});
/** @internal */
exports.DvrPlayback$outboundSchema = z.object({
    hrn: exports.PlaybackInfoHrn$outboundSchema.optional(),
    type: exports.PlaybackInfoSchemasMetaType$outboundSchema.optional(),
    url: z.string().optional(),
    error: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var DvrPlayback$;
(function (DvrPlayback$) {
    /** @deprecated use `DvrPlayback$inboundSchema` instead. */
    DvrPlayback$.inboundSchema = exports.DvrPlayback$inboundSchema;
    /** @deprecated use `DvrPlayback$outboundSchema` instead. */
    DvrPlayback$.outboundSchema = exports.DvrPlayback$outboundSchema;
})(DvrPlayback$ || (exports.DvrPlayback$ = DvrPlayback$ = {}));
function dvrPlaybackToJSON(dvrPlayback) {
    return JSON.stringify(exports.DvrPlayback$outboundSchema.parse(dvrPlayback));
}
function dvrPlaybackFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.DvrPlayback$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'DvrPlayback' from JSON`);
}
/** @internal */
exports.Meta$inboundSchema = z
    .object({
    live: exports.Live$inboundSchema.optional(),
    playbackPolicy: z.nullable(playbackpolicy_js_1.PlaybackPolicy$inboundSchema).optional(),
    source: z.array(z.lazy(() => exports.PlaybackInfoSource$inboundSchema)),
    dvrPlayback: z.array(z.lazy(() => exports.DvrPlayback$inboundSchema)).optional(),
    attestation: attestation_js_1.Attestation$inboundSchema.optional(),
});
/** @internal */
exports.Meta$outboundSchema = z.object({
    live: exports.Live$outboundSchema.optional(),
    playbackPolicy: z.nullable(playbackpolicy_js_1.PlaybackPolicy$outboundSchema).optional(),
    source: z.array(z.lazy(() => exports.PlaybackInfoSource$outboundSchema)),
    dvrPlayback: z.array(z.lazy(() => exports.DvrPlayback$outboundSchema)).optional(),
    attestation: attestation_js_1.Attestation$outboundSchema.optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var Meta$;
(function (Meta$) {
    /** @deprecated use `Meta$inboundSchema` instead. */
    Meta$.inboundSchema = exports.Meta$inboundSchema;
    /** @deprecated use `Meta$outboundSchema` instead. */
    Meta$.outboundSchema = exports.Meta$outboundSchema;
})(Meta$ || (exports.Meta$ = Meta$ = {}));
function metaToJSON(meta) {
    return JSON.stringify(exports.Meta$outboundSchema.parse(meta));
}
function metaFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.Meta$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Meta' from JSON`);
}
/** @internal */
exports.PlaybackInfo$inboundSchema = z.object({
    type: exports.PlaybackInfoType$inboundSchema,
    meta: z.lazy(() => exports.Meta$inboundSchema),
});
/** @internal */
exports.PlaybackInfo$outboundSchema = z.object({
    type: exports.PlaybackInfoType$outboundSchema,
    meta: z.lazy(() => exports.Meta$outboundSchema),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var PlaybackInfo$;
(function (PlaybackInfo$) {
    /** @deprecated use `PlaybackInfo$inboundSchema` instead. */
    PlaybackInfo$.inboundSchema = exports.PlaybackInfo$inboundSchema;
    /** @deprecated use `PlaybackInfo$outboundSchema` instead. */
    PlaybackInfo$.outboundSchema = exports.PlaybackInfo$outboundSchema;
})(PlaybackInfo$ || (exports.PlaybackInfo$ = PlaybackInfo$ = {}));
function playbackInfoToJSON(playbackInfo) {
    return JSON.stringify(exports.PlaybackInfo$outboundSchema.parse(playbackInfo));
}
function playbackInfoFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.PlaybackInfo$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'PlaybackInfo' from JSON`);
}
//# sourceMappingURL=playbackinfo.js.map