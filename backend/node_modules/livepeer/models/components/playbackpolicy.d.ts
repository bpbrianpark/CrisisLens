import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
export declare enum Type {
    Public = "public",
    Jwt = "jwt",
    Webhook = "webhook"
}
/**
 * Whether the playback policy for an asset or stream is public or signed
 */
export type PlaybackPolicy = {
    type: Type;
    /**
     * ID of the webhook to use for playback policy
     */
    webhookId?: string | undefined;
    /**
     * User-defined webhook context
     */
    webhookContext?: {
        [k: string]: any;
    } | undefined;
    /**
     * Interval (in seconds) at which the playback policy should be
     *
     * @remarks
     * refreshed (default 600 seconds)
     */
    refreshInterval?: number | undefined;
    /**
     * List of allowed origins for CORS playback (<scheme>://<hostname>:<port>, <scheme>://<hostname>)
     */
    allowedOrigins?: Array<string> | undefined;
};
/** @internal */
export declare const Type$inboundSchema: z.ZodNativeEnum<typeof Type>;
/** @internal */
export declare const Type$outboundSchema: z.ZodNativeEnum<typeof Type>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Type$ {
    /** @deprecated use `Type$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<typeof Type>;
    /** @deprecated use `Type$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<typeof Type>;
}
/** @internal */
export declare const PlaybackPolicy$inboundSchema: z.ZodType<PlaybackPolicy, z.ZodTypeDef, unknown>;
/** @internal */
export type PlaybackPolicy$Outbound = {
    type: string;
    webhookId?: string | undefined;
    webhookContext?: {
        [k: string]: any;
    } | undefined;
    refreshInterval?: number | undefined;
    allowedOrigins?: Array<string> | undefined;
};
/** @internal */
export declare const PlaybackPolicy$outboundSchema: z.ZodType<PlaybackPolicy$Outbound, z.ZodTypeDef, PlaybackPolicy>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace PlaybackPolicy$ {
    /** @deprecated use `PlaybackPolicy$inboundSchema` instead. */
    const inboundSchema: z.ZodType<PlaybackPolicy, z.ZodTypeDef, unknown>;
    /** @deprecated use `PlaybackPolicy$outboundSchema` instead. */
    const outboundSchema: z.ZodType<PlaybackPolicy$Outbound, z.ZodTypeDef, PlaybackPolicy>;
    /** @deprecated use `PlaybackPolicy$Outbound` instead. */
    type Outbound = PlaybackPolicy$Outbound;
}
export declare function playbackPolicyToJSON(playbackPolicy: PlaybackPolicy): string;
export declare function playbackPolicyFromJSON(jsonString: string): SafeParseResult<PlaybackPolicy, SDKValidationError>;
//# sourceMappingURL=playbackpolicy.d.ts.map