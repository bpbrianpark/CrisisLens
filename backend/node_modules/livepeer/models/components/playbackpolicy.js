"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PlaybackPolicy$ = exports.PlaybackPolicy$outboundSchema = exports.PlaybackPolicy$inboundSchema = exports.Type$ = exports.Type$outboundSchema = exports.Type$inboundSchema = exports.Type = void 0;
exports.playbackPolicyToJSON = playbackPolicyToJSON;
exports.playbackPolicyFromJSON = playbackPolicyFromJSON;
const z = __importStar(require("zod"));
const schemas_js_1 = require("../../lib/schemas.js");
var Type;
(function (Type) {
    Type["Public"] = "public";
    Type["Jwt"] = "jwt";
    Type["Webhook"] = "webhook";
})(Type || (exports.Type = Type = {}));
/** @internal */
exports.Type$inboundSchema = z.nativeEnum(Type);
/** @internal */
exports.Type$outboundSchema = exports.Type$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var Type$;
(function (Type$) {
    /** @deprecated use `Type$inboundSchema` instead. */
    Type$.inboundSchema = exports.Type$inboundSchema;
    /** @deprecated use `Type$outboundSchema` instead. */
    Type$.outboundSchema = exports.Type$outboundSchema;
})(Type$ || (exports.Type$ = Type$ = {}));
/** @internal */
exports.PlaybackPolicy$inboundSchema = z.object({
    type: exports.Type$inboundSchema,
    webhookId: z.string().optional(),
    webhookContext: z.record(z.any()).optional(),
    refreshInterval: z.number().optional(),
    allowedOrigins: z.array(z.string()).optional(),
});
/** @internal */
exports.PlaybackPolicy$outboundSchema = z.object({
    type: exports.Type$outboundSchema,
    webhookId: z.string().optional(),
    webhookContext: z.record(z.any()).optional(),
    refreshInterval: z.number().optional(),
    allowedOrigins: z.array(z.string()).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var PlaybackPolicy$;
(function (PlaybackPolicy$) {
    /** @deprecated use `PlaybackPolicy$inboundSchema` instead. */
    PlaybackPolicy$.inboundSchema = exports.PlaybackPolicy$inboundSchema;
    /** @deprecated use `PlaybackPolicy$outboundSchema` instead. */
    PlaybackPolicy$.outboundSchema = exports.PlaybackPolicy$outboundSchema;
})(PlaybackPolicy$ || (exports.PlaybackPolicy$ = PlaybackPolicy$ = {}));
function playbackPolicyToJSON(playbackPolicy) {
    return JSON.stringify(exports.PlaybackPolicy$outboundSchema.parse(playbackPolicy));
}
function playbackPolicyFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.PlaybackPolicy$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'PlaybackPolicy' from JSON`);
}
//# sourceMappingURL=playbackpolicy.js.map