import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
/**
 * 0: not mobile, 1: mobile screen share, 2: mobile camera.
 */
export declare enum One {
    Zero = 0,
    One = 1,
    Two = 2
}
/**
 * Indicates whether the stream will be pulled from a mobile source.
 */
export type IsMobile = One | boolean;
/**
 * Approximate location of the pull source. The location is used to
 *
 * @remarks
 * determine the closest Livepeer region to pull the stream from.
 */
export type Location = {
    /**
     * Latitude of the pull source in degrees. North is positive,
     *
     * @remarks
     * south is negative.
     */
    lat: number;
    /**
     * Longitude of the pull source in degrees. East is positive,
     *
     * @remarks
     * west is negative.
     */
    lon: number;
};
/**
 * Configuration for a stream that should be actively pulled from an
 *
 * @remarks
 * external source, rather than pushed to Livepeer. If specified, the
 * stream will not have a streamKey.
 */
export type Pull = {
    /**
     * URL from which to pull from.
     */
    source: string;
    /**
     * Headers to be sent with the request to the pull source.
     */
    headers?: {
        [k: string]: string;
    } | undefined;
    /**
     * Indicates whether the stream will be pulled from a mobile source.
     */
    isMobile?: One | boolean | undefined;
    /**
     * Approximate location of the pull source. The location is used to
     *
     * @remarks
     * determine the closest Livepeer region to pull the stream from.
     */
    location?: Location | undefined;
};
/** @internal */
export declare const One$inboundSchema: z.ZodNativeEnum<typeof One>;
/** @internal */
export declare const One$outboundSchema: z.ZodNativeEnum<typeof One>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace One$ {
    /** @deprecated use `One$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<typeof One>;
    /** @deprecated use `One$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<typeof One>;
}
/** @internal */
export declare const IsMobile$inboundSchema: z.ZodType<IsMobile, z.ZodTypeDef, unknown>;
/** @internal */
export type IsMobile$Outbound = number | boolean;
/** @internal */
export declare const IsMobile$outboundSchema: z.ZodType<IsMobile$Outbound, z.ZodTypeDef, IsMobile>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace IsMobile$ {
    /** @deprecated use `IsMobile$inboundSchema` instead. */
    const inboundSchema: z.ZodType<IsMobile, z.ZodTypeDef, unknown>;
    /** @deprecated use `IsMobile$outboundSchema` instead. */
    const outboundSchema: z.ZodType<IsMobile$Outbound, z.ZodTypeDef, IsMobile>;
    /** @deprecated use `IsMobile$Outbound` instead. */
    type Outbound = IsMobile$Outbound;
}
export declare function isMobileToJSON(isMobile: IsMobile): string;
export declare function isMobileFromJSON(jsonString: string): SafeParseResult<IsMobile, SDKValidationError>;
/** @internal */
export declare const Location$inboundSchema: z.ZodType<Location, z.ZodTypeDef, unknown>;
/** @internal */
export type Location$Outbound = {
    lat: number;
    lon: number;
};
/** @internal */
export declare const Location$outboundSchema: z.ZodType<Location$Outbound, z.ZodTypeDef, Location>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Location$ {
    /** @deprecated use `Location$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Location, z.ZodTypeDef, unknown>;
    /** @deprecated use `Location$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Location$Outbound, z.ZodTypeDef, Location>;
    /** @deprecated use `Location$Outbound` instead. */
    type Outbound = Location$Outbound;
}
export declare function locationToJSON(location: Location): string;
export declare function locationFromJSON(jsonString: string): SafeParseResult<Location, SDKValidationError>;
/** @internal */
export declare const Pull$inboundSchema: z.ZodType<Pull, z.ZodTypeDef, unknown>;
/** @internal */
export type Pull$Outbound = {
    source: string;
    headers?: {
        [k: string]: string;
    } | undefined;
    isMobile?: number | boolean | undefined;
    location?: Location$Outbound | undefined;
};
/** @internal */
export declare const Pull$outboundSchema: z.ZodType<Pull$Outbound, z.ZodTypeDef, Pull>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Pull$ {
    /** @deprecated use `Pull$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Pull, z.ZodTypeDef, unknown>;
    /** @deprecated use `Pull$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Pull$Outbound, z.ZodTypeDef, Pull>;
    /** @deprecated use `Pull$Outbound` instead. */
    type Outbound = Pull$Outbound;
}
export declare function pullToJSON(pull: Pull): string;
export declare function pullFromJSON(jsonString: string): SafeParseResult<Pull, SDKValidationError>;
//# sourceMappingURL=pull.d.ts.map