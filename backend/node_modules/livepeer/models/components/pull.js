"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Pull$ = exports.Pull$outboundSchema = exports.Pull$inboundSchema = exports.Location$ = exports.Location$outboundSchema = exports.Location$inboundSchema = exports.IsMobile$ = exports.IsMobile$outboundSchema = exports.IsMobile$inboundSchema = exports.One$ = exports.One$outboundSchema = exports.One$inboundSchema = exports.One = void 0;
exports.isMobileToJSON = isMobileToJSON;
exports.isMobileFromJSON = isMobileFromJSON;
exports.locationToJSON = locationToJSON;
exports.locationFromJSON = locationFromJSON;
exports.pullToJSON = pullToJSON;
exports.pullFromJSON = pullFromJSON;
const z = __importStar(require("zod"));
const schemas_js_1 = require("../../lib/schemas.js");
/**
 * 0: not mobile, 1: mobile screen share, 2: mobile camera.
 */
var One;
(function (One) {
    One[One["Zero"] = 0] = "Zero";
    One[One["One"] = 1] = "One";
    One[One["Two"] = 2] = "Two";
})(One || (exports.One = One = {}));
/** @internal */
exports.One$inboundSchema = z.nativeEnum(One);
/** @internal */
exports.One$outboundSchema = exports.One$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var One$;
(function (One$) {
    /** @deprecated use `One$inboundSchema` instead. */
    One$.inboundSchema = exports.One$inboundSchema;
    /** @deprecated use `One$outboundSchema` instead. */
    One$.outboundSchema = exports.One$outboundSchema;
})(One$ || (exports.One$ = One$ = {}));
/** @internal */
exports.IsMobile$inboundSchema = z.union([exports.One$inboundSchema, z.boolean()]);
/** @internal */
exports.IsMobile$outboundSchema = z.union([exports.One$outboundSchema, z.boolean()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var IsMobile$;
(function (IsMobile$) {
    /** @deprecated use `IsMobile$inboundSchema` instead. */
    IsMobile$.inboundSchema = exports.IsMobile$inboundSchema;
    /** @deprecated use `IsMobile$outboundSchema` instead. */
    IsMobile$.outboundSchema = exports.IsMobile$outboundSchema;
})(IsMobile$ || (exports.IsMobile$ = IsMobile$ = {}));
function isMobileToJSON(isMobile) {
    return JSON.stringify(exports.IsMobile$outboundSchema.parse(isMobile));
}
function isMobileFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.IsMobile$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'IsMobile' from JSON`);
}
/** @internal */
exports.Location$inboundSchema = z.object({
    lat: z.number(),
    lon: z.number(),
});
/** @internal */
exports.Location$outboundSchema = z.object({
    lat: z.number(),
    lon: z.number(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var Location$;
(function (Location$) {
    /** @deprecated use `Location$inboundSchema` instead. */
    Location$.inboundSchema = exports.Location$inboundSchema;
    /** @deprecated use `Location$outboundSchema` instead. */
    Location$.outboundSchema = exports.Location$outboundSchema;
})(Location$ || (exports.Location$ = Location$ = {}));
function locationToJSON(location) {
    return JSON.stringify(exports.Location$outboundSchema.parse(location));
}
function locationFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.Location$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Location' from JSON`);
}
/** @internal */
exports.Pull$inboundSchema = z
    .object({
    source: z.string(),
    headers: z.record(z.string()).optional(),
    isMobile: z.union([exports.One$inboundSchema, z.boolean()]).optional(),
    location: z.lazy(() => exports.Location$inboundSchema).optional(),
});
/** @internal */
exports.Pull$outboundSchema = z.object({
    source: z.string(),
    headers: z.record(z.string()).optional(),
    isMobile: z.union([exports.One$outboundSchema, z.boolean()]).optional(),
    location: z.lazy(() => exports.Location$outboundSchema).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var Pull$;
(function (Pull$) {
    /** @deprecated use `Pull$inboundSchema` instead. */
    Pull$.inboundSchema = exports.Pull$inboundSchema;
    /** @deprecated use `Pull$outboundSchema` instead. */
    Pull$.outboundSchema = exports.Pull$outboundSchema;
})(Pull$ || (exports.Pull$ = Pull$ = {}));
function pullToJSON(pull) {
    return JSON.stringify(exports.Pull$outboundSchema.parse(pull));
}
function pullFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.Pull$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Pull' from JSON`);
}
//# sourceMappingURL=pull.js.map