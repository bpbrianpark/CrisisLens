import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
/**
 * An individual metric about realtime viewership of a stream/asset.
 *
 * @remarks
 */
export type RealtimeViewershipMetric = {
    /**
     * The playback ID associated with the metric.
     */
    playbackId?: string | undefined;
    /**
     * The device used by the viewer.
     */
    device?: string | undefined;
    /**
     * The browser used by the viewer.
     */
    browser?: string | undefined;
    /**
     * The country where the viewer is located.
     */
    country?: string | undefined;
    /**
     * The number of views for the stream/asset.
     */
    viewCount: number;
    /**
     * The error rate for the stream/asset.
     */
    errorRate: number;
};
/** @internal */
export declare const RealtimeViewershipMetric$inboundSchema: z.ZodType<RealtimeViewershipMetric, z.ZodTypeDef, unknown>;
/** @internal */
export type RealtimeViewershipMetric$Outbound = {
    playbackId?: string | undefined;
    device?: string | undefined;
    browser?: string | undefined;
    country?: string | undefined;
    viewCount: number;
    errorRate: number;
};
/** @internal */
export declare const RealtimeViewershipMetric$outboundSchema: z.ZodType<RealtimeViewershipMetric$Outbound, z.ZodTypeDef, RealtimeViewershipMetric>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace RealtimeViewershipMetric$ {
    /** @deprecated use `RealtimeViewershipMetric$inboundSchema` instead. */
    const inboundSchema: z.ZodType<RealtimeViewershipMetric, z.ZodTypeDef, unknown>;
    /** @deprecated use `RealtimeViewershipMetric$outboundSchema` instead. */
    const outboundSchema: z.ZodType<RealtimeViewershipMetric$Outbound, z.ZodTypeDef, RealtimeViewershipMetric>;
    /** @deprecated use `RealtimeViewershipMetric$Outbound` instead. */
    type Outbound = RealtimeViewershipMetric$Outbound;
}
export declare function realtimeViewershipMetricToJSON(realtimeViewershipMetric: RealtimeViewershipMetric): string;
export declare function realtimeViewershipMetricFromJSON(jsonString: string): SafeParseResult<RealtimeViewershipMetric, SDKValidationError>;
//# sourceMappingURL=realtimeviewershipmetric.d.ts.map