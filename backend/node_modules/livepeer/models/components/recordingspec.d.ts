import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import { TranscodeProfile, TranscodeProfile$Outbound } from "./transcodeprofile.js";
export type RecordingSpec = {
    profiles?: Array<TranscodeProfile> | null | undefined;
};
/** @internal */
export declare const RecordingSpec$inboundSchema: z.ZodType<RecordingSpec, z.ZodTypeDef, unknown>;
/** @internal */
export type RecordingSpec$Outbound = {
    profiles?: Array<TranscodeProfile$Outbound> | null | undefined;
};
/** @internal */
export declare const RecordingSpec$outboundSchema: z.ZodType<RecordingSpec$Outbound, z.ZodTypeDef, RecordingSpec>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace RecordingSpec$ {
    /** @deprecated use `RecordingSpec$inboundSchema` instead. */
    const inboundSchema: z.ZodType<RecordingSpec, z.ZodTypeDef, unknown>;
    /** @deprecated use `RecordingSpec$outboundSchema` instead. */
    const outboundSchema: z.ZodType<RecordingSpec$Outbound, z.ZodTypeDef, RecordingSpec>;
    /** @deprecated use `RecordingSpec$Outbound` instead. */
    type Outbound = RecordingSpec$Outbound;
}
export declare function recordingSpecToJSON(recordingSpec: RecordingSpec): string;
export declare function recordingSpecFromJSON(jsonString: string): SafeParseResult<RecordingSpec, SDKValidationError>;
//# sourceMappingURL=recordingspec.d.ts.map