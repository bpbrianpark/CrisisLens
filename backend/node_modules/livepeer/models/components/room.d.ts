import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
export type Participants = {
    /**
     * participant ID
     */
    identity?: string | undefined;
    /**
     * user defined participant name
     */
    name?: string | undefined;
    /**
     * the time the participant joined
     */
    joinedAt?: number | undefined;
    /**
     * the time the participant left
     */
    leftAt?: number | undefined;
};
export type Room = {
    /**
     * room ID
     */
    id: string;
    /**
     * Timestamp (in milliseconds) at which the room was created
     */
    createdAt?: number | undefined;
    /**
     * Timestamp (in milliseconds) at which room was updated
     */
    updatedAt?: number | undefined;
    /**
     * internal ID for egress output
     */
    egressId?: string | undefined;
    participants: {
        [k: string]: Participants;
    };
};
/** @internal */
export declare const Participants$inboundSchema: z.ZodType<Participants, z.ZodTypeDef, unknown>;
/** @internal */
export type Participants$Outbound = {
    identity?: string | undefined;
    name?: string | undefined;
    joinedAt?: number | undefined;
    leftAt?: number | undefined;
};
/** @internal */
export declare const Participants$outboundSchema: z.ZodType<Participants$Outbound, z.ZodTypeDef, Participants>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Participants$ {
    /** @deprecated use `Participants$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Participants, z.ZodTypeDef, unknown>;
    /** @deprecated use `Participants$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Participants$Outbound, z.ZodTypeDef, Participants>;
    /** @deprecated use `Participants$Outbound` instead. */
    type Outbound = Participants$Outbound;
}
export declare function participantsToJSON(participants: Participants): string;
export declare function participantsFromJSON(jsonString: string): SafeParseResult<Participants, SDKValidationError>;
/** @internal */
export declare const Room$inboundSchema: z.ZodType<Room, z.ZodTypeDef, unknown>;
/** @internal */
export type Room$Outbound = {
    id: string;
    createdAt?: number | undefined;
    updatedAt?: number | undefined;
    egressId?: string | undefined;
    participants: {
        [k: string]: Participants$Outbound;
    };
};
/** @internal */
export declare const Room$outboundSchema: z.ZodType<Room$Outbound, z.ZodTypeDef, Room>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Room$ {
    /** @deprecated use `Room$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Room, z.ZodTypeDef, unknown>;
    /** @deprecated use `Room$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Room$Outbound, z.ZodTypeDef, Room>;
    /** @deprecated use `Room$Outbound` instead. */
    type Outbound = Room$Outbound;
}
export declare function roomToJSON(room: Room): string;
export declare function roomFromJSON(jsonString: string): SafeParseResult<Room, SDKValidationError>;
//# sourceMappingURL=room.d.ts.map