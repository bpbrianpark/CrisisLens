import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
export type RoomEgressPayload = {
    /**
     * The ID of the Livepeer Stream to stream to
     */
    streamId: string;
};
/** @internal */
export declare const RoomEgressPayload$inboundSchema: z.ZodType<RoomEgressPayload, z.ZodTypeDef, unknown>;
/** @internal */
export type RoomEgressPayload$Outbound = {
    streamId: string;
};
/** @internal */
export declare const RoomEgressPayload$outboundSchema: z.ZodType<RoomEgressPayload$Outbound, z.ZodTypeDef, RoomEgressPayload>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace RoomEgressPayload$ {
    /** @deprecated use `RoomEgressPayload$inboundSchema` instead. */
    const inboundSchema: z.ZodType<RoomEgressPayload, z.ZodTypeDef, unknown>;
    /** @deprecated use `RoomEgressPayload$outboundSchema` instead. */
    const outboundSchema: z.ZodType<RoomEgressPayload$Outbound, z.ZodTypeDef, RoomEgressPayload>;
    /** @deprecated use `RoomEgressPayload$Outbound` instead. */
    type Outbound = RoomEgressPayload$Outbound;
}
export declare function roomEgressPayloadToJSON(roomEgressPayload: RoomEgressPayload): string;
export declare function roomEgressPayloadFromJSON(jsonString: string): SafeParseResult<RoomEgressPayload, SDKValidationError>;
//# sourceMappingURL=roomegresspayload.d.ts.map