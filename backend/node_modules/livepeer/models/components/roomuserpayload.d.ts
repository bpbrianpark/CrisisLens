import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
export type RoomUserPayload = {
    /**
     * Display name
     */
    name: string;
    /**
     * Whether a user is allowed to publish audio/video tracks
     */
    canPublish?: boolean | undefined;
    /**
     * Whether a user is allowed to publish data messages to the room
     */
    canPublishData?: boolean | undefined;
    /**
     * User defined payload to store for the participant
     */
    metadata?: string | undefined;
};
/** @internal */
export declare const RoomUserPayload$inboundSchema: z.ZodType<RoomUserPayload, z.ZodTypeDef, unknown>;
/** @internal */
export type RoomUserPayload$Outbound = {
    name: string;
    canPublish?: boolean | undefined;
    canPublishData?: boolean | undefined;
    metadata?: string | undefined;
};
/** @internal */
export declare const RoomUserPayload$outboundSchema: z.ZodType<RoomUserPayload$Outbound, z.ZodTypeDef, RoomUserPayload>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace RoomUserPayload$ {
    /** @deprecated use `RoomUserPayload$inboundSchema` instead. */
    const inboundSchema: z.ZodType<RoomUserPayload, z.ZodTypeDef, unknown>;
    /** @deprecated use `RoomUserPayload$outboundSchema` instead. */
    const outboundSchema: z.ZodType<RoomUserPayload$Outbound, z.ZodTypeDef, RoomUserPayload>;
    /** @deprecated use `RoomUserPayload$Outbound` instead. */
    type Outbound = RoomUserPayload$Outbound;
}
export declare function roomUserPayloadToJSON(roomUserPayload: RoomUserPayload): string;
export declare function roomUserPayloadFromJSON(jsonString: string): SafeParseResult<RoomUserPayload, SDKValidationError>;
//# sourceMappingURL=roomuserpayload.d.ts.map