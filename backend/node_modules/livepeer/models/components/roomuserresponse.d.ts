import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
export type RoomUserResponse = {
    /**
     * The ID of the user
     */
    id?: string | undefined;
    /**
     * Joining URL - use this for Livepeer's default meeting app (see the multiparticipant streaming guide for more info).
     */
    joinUrl?: string | undefined;
    /**
     * Joining JWT - this can be used if you have a custom meeting app (see the multiparticipant streaming guide for more info).
     */
    token?: string | undefined;
};
/** @internal */
export declare const RoomUserResponse$inboundSchema: z.ZodType<RoomUserResponse, z.ZodTypeDef, unknown>;
/** @internal */
export type RoomUserResponse$Outbound = {
    id?: string | undefined;
    joinUrl?: string | undefined;
    token?: string | undefined;
};
/** @internal */
export declare const RoomUserResponse$outboundSchema: z.ZodType<RoomUserResponse$Outbound, z.ZodTypeDef, RoomUserResponse>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace RoomUserResponse$ {
    /** @deprecated use `RoomUserResponse$inboundSchema` instead. */
    const inboundSchema: z.ZodType<RoomUserResponse, z.ZodTypeDef, unknown>;
    /** @deprecated use `RoomUserResponse$outboundSchema` instead. */
    const outboundSchema: z.ZodType<RoomUserResponse$Outbound, z.ZodTypeDef, RoomUserResponse>;
    /** @deprecated use `RoomUserResponse$Outbound` instead. */
    type Outbound = RoomUserResponse$Outbound;
}
export declare function roomUserResponseToJSON(roomUserResponse: RoomUserResponse): string;
export declare function roomUserResponseFromJSON(jsonString: string): SafeParseResult<RoomUserResponse, SDKValidationError>;
//# sourceMappingURL=roomuserresponse.d.ts.map