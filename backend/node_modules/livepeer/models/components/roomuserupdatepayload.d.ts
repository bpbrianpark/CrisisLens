import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
export type RoomUserUpdatePayload = {
    /**
     * Whether a user is allowed to publish audio/video tracks (i.e. their microphone and webcam)
     */
    canPublish?: boolean | undefined;
    /**
     * Whether a user is allowed to publish data messages to the room
     */
    canPublishData?: boolean | undefined;
    /**
     * User defined payload to store for the participant
     */
    metadata?: string | undefined;
};
/** @internal */
export declare const RoomUserUpdatePayload$inboundSchema: z.ZodType<RoomUserUpdatePayload, z.ZodTypeDef, unknown>;
/** @internal */
export type RoomUserUpdatePayload$Outbound = {
    canPublish: boolean;
    canPublishData: boolean;
    metadata?: string | undefined;
};
/** @internal */
export declare const RoomUserUpdatePayload$outboundSchema: z.ZodType<RoomUserUpdatePayload$Outbound, z.ZodTypeDef, RoomUserUpdatePayload>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace RoomUserUpdatePayload$ {
    /** @deprecated use `RoomUserUpdatePayload$inboundSchema` instead. */
    const inboundSchema: z.ZodType<RoomUserUpdatePayload, z.ZodTypeDef, unknown>;
    /** @deprecated use `RoomUserUpdatePayload$outboundSchema` instead. */
    const outboundSchema: z.ZodType<RoomUserUpdatePayload$Outbound, z.ZodTypeDef, RoomUserUpdatePayload>;
    /** @deprecated use `RoomUserUpdatePayload$Outbound` instead. */
    type Outbound = RoomUserUpdatePayload$Outbound;
}
export declare function roomUserUpdatePayloadToJSON(roomUserUpdatePayload: RoomUserUpdatePayload): string;
export declare function roomUserUpdatePayloadFromJSON(jsonString: string): SafeParseResult<RoomUserUpdatePayload, SDKValidationError>;
//# sourceMappingURL=roomuserupdatepayload.d.ts.map