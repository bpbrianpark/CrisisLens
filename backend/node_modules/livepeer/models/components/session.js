"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Session$ = exports.Session$outboundSchema = exports.Session$inboundSchema = exports.RecordingStatus$ = exports.RecordingStatus$outboundSchema = exports.RecordingStatus$inboundSchema = exports.RecordingStatus = void 0;
exports.sessionToJSON = sessionToJSON;
exports.sessionFromJSON = sessionFromJSON;
const z = __importStar(require("zod"));
const schemas_js_1 = require("../../lib/schemas.js");
const ffmpegprofile_js_1 = require("./ffmpegprofile.js");
const recordingspec_js_1 = require("./recordingspec.js");
/**
 * The status of the recording process of this stream session.
 */
var RecordingStatus;
(function (RecordingStatus) {
    RecordingStatus["Waiting"] = "waiting";
    RecordingStatus["Ready"] = "ready";
    RecordingStatus["Failed"] = "failed";
    RecordingStatus["Deleted"] = "deleted";
    RecordingStatus["None"] = "none";
})(RecordingStatus || (exports.RecordingStatus = RecordingStatus = {}));
/** @internal */
exports.RecordingStatus$inboundSchema = z.nativeEnum(RecordingStatus);
/** @internal */
exports.RecordingStatus$outboundSchema = exports.RecordingStatus$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var RecordingStatus$;
(function (RecordingStatus$) {
    /** @deprecated use `RecordingStatus$inboundSchema` instead. */
    RecordingStatus$.inboundSchema = exports.RecordingStatus$inboundSchema;
    /** @deprecated use `RecordingStatus$outboundSchema` instead. */
    RecordingStatus$.outboundSchema = exports.RecordingStatus$outboundSchema;
})(RecordingStatus$ || (exports.RecordingStatus$ = RecordingStatus$ = {}));
/** @internal */
exports.Session$inboundSchema = z.object({
    id: z.string().optional(),
    kind: z.string().optional(),
    userId: z.string().optional(),
    name: z.string(),
    lastSeen: z.number().optional(),
    sourceSegments: z.number().optional(),
    transcodedSegments: z.number().optional(),
    sourceSegmentsDuration: z.number().optional(),
    transcodedSegmentsDuration: z.number().optional(),
    sourceBytes: z.number().optional(),
    transcodedBytes: z.number().optional(),
    ingestRate: z.number().optional(),
    outgoingRate: z.number().optional(),
    isHealthy: z.nullable(z.boolean()).optional(),
    issues: z.nullable(z.array(z.string())).optional(),
    createdAt: z.number().optional(),
    parentId: z.string().optional(),
    projectId: z.string().optional(),
    record: z.boolean().optional(),
    recordingStatus: exports.RecordingStatus$inboundSchema.optional(),
    recordingUrl: z.string().optional(),
    mp4Url: z.string().optional(),
    playbackId: z.string().optional(),
    profiles: z.array(ffmpegprofile_js_1.FfmpegProfile$inboundSchema).optional(),
    recordingSpec: recordingspec_js_1.RecordingSpec$inboundSchema.optional(),
});
/** @internal */
exports.Session$outboundSchema = z.object({
    id: z.string().optional(),
    kind: z.string().optional(),
    userId: z.string().optional(),
    name: z.string(),
    lastSeen: z.number().optional(),
    sourceSegments: z.number().optional(),
    transcodedSegments: z.number().optional(),
    sourceSegmentsDuration: z.number().optional(),
    transcodedSegmentsDuration: z.number().optional(),
    sourceBytes: z.number().optional(),
    transcodedBytes: z.number().optional(),
    ingestRate: z.number().optional(),
    outgoingRate: z.number().optional(),
    isHealthy: z.nullable(z.boolean()).optional(),
    issues: z.nullable(z.array(z.string())).optional(),
    createdAt: z.number().optional(),
    parentId: z.string().optional(),
    projectId: z.string().optional(),
    record: z.boolean().optional(),
    recordingStatus: exports.RecordingStatus$outboundSchema.optional(),
    recordingUrl: z.string().optional(),
    mp4Url: z.string().optional(),
    playbackId: z.string().optional(),
    profiles: z.array(ffmpegprofile_js_1.FfmpegProfile$outboundSchema).optional(),
    recordingSpec: recordingspec_js_1.RecordingSpec$outboundSchema.optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var Session$;
(function (Session$) {
    /** @deprecated use `Session$inboundSchema` instead. */
    Session$.inboundSchema = exports.Session$inboundSchema;
    /** @deprecated use `Session$outboundSchema` instead. */
    Session$.outboundSchema = exports.Session$outboundSchema;
})(Session$ || (exports.Session$ = Session$ = {}));
function sessionToJSON(session) {
    return JSON.stringify(exports.Session$outboundSchema.parse(session));
}
function sessionFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.Session$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Session' from JSON`);
}
//# sourceMappingURL=session.js.map