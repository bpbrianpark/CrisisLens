import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
export type SigningKey = {
    id?: string | undefined;
    /**
     * Name of the signing key
     */
    name?: string | undefined;
    /**
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    userId?: string | undefined;
    /**
     * Timestamp (in milliseconds) at which the signing-key was created
     */
    createdAt?: number | undefined;
    /**
     * Timestamp (in milliseconds) at which the signing-key was last used
     */
    lastSeen?: number | undefined;
    publicKey: string;
    /**
     * Disable the signing key to allow rotation safely
     */
    disabled?: boolean | undefined;
    /**
     * The ID of the project
     */
    projectId?: string | undefined;
};
/** @internal */
export declare const SigningKey$inboundSchema: z.ZodType<SigningKey, z.ZodTypeDef, unknown>;
/** @internal */
export type SigningKey$Outbound = {
    id?: string | undefined;
    name?: string | undefined;
    userId?: string | undefined;
    createdAt?: number | undefined;
    lastSeen?: number | undefined;
    publicKey: string;
    disabled?: boolean | undefined;
    projectId?: string | undefined;
};
/** @internal */
export declare const SigningKey$outboundSchema: z.ZodType<SigningKey$Outbound, z.ZodTypeDef, SigningKey>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace SigningKey$ {
    /** @deprecated use `SigningKey$inboundSchema` instead. */
    const inboundSchema: z.ZodType<SigningKey, z.ZodTypeDef, unknown>;
    /** @deprecated use `SigningKey$outboundSchema` instead. */
    const outboundSchema: z.ZodType<SigningKey$Outbound, z.ZodTypeDef, SigningKey>;
    /** @deprecated use `SigningKey$Outbound` instead. */
    type Outbound = SigningKey$Outbound;
}
export declare function signingKeyToJSON(signingKey: SigningKey): string;
export declare function signingKeyFromJSON(jsonString: string): SafeParseResult<SigningKey, SDKValidationError>;
//# sourceMappingURL=signingkey.d.ts.map