import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
/**
 * Name of the NFT metadata template to export. 'player'
 *
 * @remarks
 * will embed the Livepeer Player on the NFT while 'file'
 * will reference only the immutable MP4 files.
 */
export declare enum NftMetadataTemplate {
    File = "file",
    Player = "player"
}
/**
 * Additional data to add to the NFT metadata exported to
 *
 * @remarks
 * IPFS. Will be deep merged with the default metadata
 * exported.
 */
export type NftMetadata = {};
export type Spec = {
    /**
     * Name of the NFT metadata template to export. 'player'
     *
     * @remarks
     * will embed the Livepeer Player on the NFT while 'file'
     * will reference only the immutable MP4 files.
     */
    nftMetadataTemplate?: NftMetadataTemplate | undefined;
    /**
     * Additional data to add to the NFT metadata exported to
     *
     * @remarks
     * IPFS. Will be deep merged with the default metadata
     * exported.
     */
    nftMetadata?: NftMetadata | undefined;
};
/** @internal */
export declare const NftMetadataTemplate$inboundSchema: z.ZodNativeEnum<typeof NftMetadataTemplate>;
/** @internal */
export declare const NftMetadataTemplate$outboundSchema: z.ZodNativeEnum<typeof NftMetadataTemplate>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace NftMetadataTemplate$ {
    /** @deprecated use `NftMetadataTemplate$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<typeof NftMetadataTemplate>;
    /** @deprecated use `NftMetadataTemplate$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<typeof NftMetadataTemplate>;
}
/** @internal */
export declare const NftMetadata$inboundSchema: z.ZodType<NftMetadata, z.ZodTypeDef, unknown>;
/** @internal */
export type NftMetadata$Outbound = {};
/** @internal */
export declare const NftMetadata$outboundSchema: z.ZodType<NftMetadata$Outbound, z.ZodTypeDef, NftMetadata>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace NftMetadata$ {
    /** @deprecated use `NftMetadata$inboundSchema` instead. */
    const inboundSchema: z.ZodType<NftMetadata, z.ZodTypeDef, unknown>;
    /** @deprecated use `NftMetadata$outboundSchema` instead. */
    const outboundSchema: z.ZodType<NftMetadata$Outbound, z.ZodTypeDef, NftMetadata>;
    /** @deprecated use `NftMetadata$Outbound` instead. */
    type Outbound = NftMetadata$Outbound;
}
export declare function nftMetadataToJSON(nftMetadata: NftMetadata): string;
export declare function nftMetadataFromJSON(jsonString: string): SafeParseResult<NftMetadata, SDKValidationError>;
/** @internal */
export declare const Spec$inboundSchema: z.ZodType<Spec, z.ZodTypeDef, unknown>;
/** @internal */
export type Spec$Outbound = {
    nftMetadataTemplate: string;
    nftMetadata?: NftMetadata$Outbound | undefined;
};
/** @internal */
export declare const Spec$outboundSchema: z.ZodType<Spec$Outbound, z.ZodTypeDef, Spec>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Spec$ {
    /** @deprecated use `Spec$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Spec, z.ZodTypeDef, unknown>;
    /** @deprecated use `Spec$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Spec$Outbound, z.ZodTypeDef, Spec>;
    /** @deprecated use `Spec$Outbound` instead. */
    type Outbound = Spec$Outbound;
}
export declare function specToJSON(spec: Spec): string;
export declare function specFromJSON(jsonString: string): SafeParseResult<Spec, SDKValidationError>;
//# sourceMappingURL=spec.d.ts.map