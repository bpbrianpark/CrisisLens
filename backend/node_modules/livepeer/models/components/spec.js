"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Spec$ = exports.Spec$outboundSchema = exports.Spec$inboundSchema = exports.NftMetadata$ = exports.NftMetadata$outboundSchema = exports.NftMetadata$inboundSchema = exports.NftMetadataTemplate$ = exports.NftMetadataTemplate$outboundSchema = exports.NftMetadataTemplate$inboundSchema = exports.NftMetadataTemplate = void 0;
exports.nftMetadataToJSON = nftMetadataToJSON;
exports.nftMetadataFromJSON = nftMetadataFromJSON;
exports.specToJSON = specToJSON;
exports.specFromJSON = specFromJSON;
const z = __importStar(require("zod"));
const schemas_js_1 = require("../../lib/schemas.js");
/**
 * Name of the NFT metadata template to export. 'player'
 *
 * @remarks
 * will embed the Livepeer Player on the NFT while 'file'
 * will reference only the immutable MP4 files.
 */
var NftMetadataTemplate;
(function (NftMetadataTemplate) {
    NftMetadataTemplate["File"] = "file";
    NftMetadataTemplate["Player"] = "player";
})(NftMetadataTemplate || (exports.NftMetadataTemplate = NftMetadataTemplate = {}));
/** @internal */
exports.NftMetadataTemplate$inboundSchema = z.nativeEnum(NftMetadataTemplate);
/** @internal */
exports.NftMetadataTemplate$outboundSchema = exports.NftMetadataTemplate$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var NftMetadataTemplate$;
(function (NftMetadataTemplate$) {
    /** @deprecated use `NftMetadataTemplate$inboundSchema` instead. */
    NftMetadataTemplate$.inboundSchema = exports.NftMetadataTemplate$inboundSchema;
    /** @deprecated use `NftMetadataTemplate$outboundSchema` instead. */
    NftMetadataTemplate$.outboundSchema = exports.NftMetadataTemplate$outboundSchema;
})(NftMetadataTemplate$ || (exports.NftMetadataTemplate$ = NftMetadataTemplate$ = {}));
/** @internal */
exports.NftMetadata$inboundSchema = z.object({});
/** @internal */
exports.NftMetadata$outboundSchema = z.object({});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var NftMetadata$;
(function (NftMetadata$) {
    /** @deprecated use `NftMetadata$inboundSchema` instead. */
    NftMetadata$.inboundSchema = exports.NftMetadata$inboundSchema;
    /** @deprecated use `NftMetadata$outboundSchema` instead. */
    NftMetadata$.outboundSchema = exports.NftMetadata$outboundSchema;
})(NftMetadata$ || (exports.NftMetadata$ = NftMetadata$ = {}));
function nftMetadataToJSON(nftMetadata) {
    return JSON.stringify(exports.NftMetadata$outboundSchema.parse(nftMetadata));
}
function nftMetadataFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.NftMetadata$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'NftMetadata' from JSON`);
}
/** @internal */
exports.Spec$inboundSchema = z
    .object({
    nftMetadataTemplate: exports.NftMetadataTemplate$inboundSchema.default(NftMetadataTemplate.File),
    nftMetadata: z.lazy(() => exports.NftMetadata$inboundSchema).optional(),
});
/** @internal */
exports.Spec$outboundSchema = z.object({
    nftMetadataTemplate: exports.NftMetadataTemplate$outboundSchema.default(NftMetadataTemplate.File),
    nftMetadata: z.lazy(() => exports.NftMetadata$outboundSchema).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var Spec$;
(function (Spec$) {
    /** @deprecated use `Spec$inboundSchema` instead. */
    Spec$.inboundSchema = exports.Spec$inboundSchema;
    /** @deprecated use `Spec$outboundSchema` instead. */
    Spec$.outboundSchema = exports.Spec$outboundSchema;
})(Spec$ || (exports.Spec$ = Spec$ = {}));
function specToJSON(spec) {
    return JSON.stringify(exports.Spec$outboundSchema.parse(spec));
}
function specFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.Spec$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Spec' from JSON`);
}
//# sourceMappingURL=spec.js.map