import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import { Spec, Spec$Outbound } from "./spec.js";
export type Storage1 = {
    spec?: Spec | null | undefined;
};
/**
 * Set to true to make default export to IPFS. To customize the
 *
 * @remarks
 * pinned files, specify an object with a spec field. False or null
 * means to unpin from IPFS, but it's unsupported right now.
 */
export type Ipfs = Storage1 | boolean;
export type Storage = {
    /**
     * Set to true to make default export to IPFS. To customize the
     *
     * @remarks
     * pinned files, specify an object with a spec field. False or null
     * means to unpin from IPFS, but it's unsupported right now.
     */
    ipfs?: Storage1 | boolean | null | undefined;
};
/** @internal */
export declare const Storage1$inboundSchema: z.ZodType<Storage1, z.ZodTypeDef, unknown>;
/** @internal */
export type Storage1$Outbound = {
    spec?: Spec$Outbound | null | undefined;
};
/** @internal */
export declare const Storage1$outboundSchema: z.ZodType<Storage1$Outbound, z.ZodTypeDef, Storage1>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Storage1$ {
    /** @deprecated use `Storage1$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Storage1, z.ZodTypeDef, unknown>;
    /** @deprecated use `Storage1$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Storage1$Outbound, z.ZodTypeDef, Storage1>;
    /** @deprecated use `Storage1$Outbound` instead. */
    type Outbound = Storage1$Outbound;
}
export declare function storage1ToJSON(storage1: Storage1): string;
export declare function storage1FromJSON(jsonString: string): SafeParseResult<Storage1, SDKValidationError>;
/** @internal */
export declare const Ipfs$inboundSchema: z.ZodType<Ipfs, z.ZodTypeDef, unknown>;
/** @internal */
export type Ipfs$Outbound = Storage1$Outbound | boolean;
/** @internal */
export declare const Ipfs$outboundSchema: z.ZodType<Ipfs$Outbound, z.ZodTypeDef, Ipfs>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Ipfs$ {
    /** @deprecated use `Ipfs$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Ipfs, z.ZodTypeDef, unknown>;
    /** @deprecated use `Ipfs$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Ipfs$Outbound, z.ZodTypeDef, Ipfs>;
    /** @deprecated use `Ipfs$Outbound` instead. */
    type Outbound = Ipfs$Outbound;
}
export declare function ipfsToJSON(ipfs: Ipfs): string;
export declare function ipfsFromJSON(jsonString: string): SafeParseResult<Ipfs, SDKValidationError>;
/** @internal */
export declare const Storage$inboundSchema: z.ZodType<Storage, z.ZodTypeDef, unknown>;
/** @internal */
export type Storage$Outbound = {
    ipfs?: Storage1$Outbound | boolean | null | undefined;
};
/** @internal */
export declare const Storage$outboundSchema: z.ZodType<Storage$Outbound, z.ZodTypeDef, Storage>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Storage$ {
    /** @deprecated use `Storage$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Storage, z.ZodTypeDef, unknown>;
    /** @deprecated use `Storage$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Storage$Outbound, z.ZodTypeDef, Storage>;
    /** @deprecated use `Storage$Outbound` instead. */
    type Outbound = Storage$Outbound;
}
export declare function storageToJSON(storage: Storage): string;
export declare function storageFromJSON(jsonString: string): SafeParseResult<Storage, SDKValidationError>;
//# sourceMappingURL=storage.d.ts.map