"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Storage$ = exports.Storage$outboundSchema = exports.Storage$inboundSchema = exports.Ipfs$ = exports.Ipfs$outboundSchema = exports.Ipfs$inboundSchema = exports.Storage1$ = exports.Storage1$outboundSchema = exports.Storage1$inboundSchema = void 0;
exports.storage1ToJSON = storage1ToJSON;
exports.storage1FromJSON = storage1FromJSON;
exports.ipfsToJSON = ipfsToJSON;
exports.ipfsFromJSON = ipfsFromJSON;
exports.storageToJSON = storageToJSON;
exports.storageFromJSON = storageFromJSON;
const z = __importStar(require("zod"));
const schemas_js_1 = require("../../lib/schemas.js");
const spec_js_1 = require("./spec.js");
/** @internal */
exports.Storage1$inboundSchema = z.object({
    spec: z.nullable(spec_js_1.Spec$inboundSchema).optional(),
});
/** @internal */
exports.Storage1$outboundSchema = z.object({
    spec: z.nullable(spec_js_1.Spec$outboundSchema).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var Storage1$;
(function (Storage1$) {
    /** @deprecated use `Storage1$inboundSchema` instead. */
    Storage1$.inboundSchema = exports.Storage1$inboundSchema;
    /** @deprecated use `Storage1$outboundSchema` instead. */
    Storage1$.outboundSchema = exports.Storage1$outboundSchema;
})(Storage1$ || (exports.Storage1$ = Storage1$ = {}));
function storage1ToJSON(storage1) {
    return JSON.stringify(exports.Storage1$outboundSchema.parse(storage1));
}
function storage1FromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.Storage1$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Storage1' from JSON`);
}
/** @internal */
exports.Ipfs$inboundSchema = z
    .union([z.lazy(() => exports.Storage1$inboundSchema), z.boolean()]);
/** @internal */
exports.Ipfs$outboundSchema = z.union([z.lazy(() => exports.Storage1$outboundSchema), z.boolean()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var Ipfs$;
(function (Ipfs$) {
    /** @deprecated use `Ipfs$inboundSchema` instead. */
    Ipfs$.inboundSchema = exports.Ipfs$inboundSchema;
    /** @deprecated use `Ipfs$outboundSchema` instead. */
    Ipfs$.outboundSchema = exports.Ipfs$outboundSchema;
})(Ipfs$ || (exports.Ipfs$ = Ipfs$ = {}));
function ipfsToJSON(ipfs) {
    return JSON.stringify(exports.Ipfs$outboundSchema.parse(ipfs));
}
function ipfsFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.Ipfs$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Ipfs' from JSON`);
}
/** @internal */
exports.Storage$inboundSchema = z.object({
    ipfs: z.nullable(z.union([z.lazy(() => exports.Storage1$inboundSchema), z.boolean()])).optional(),
});
/** @internal */
exports.Storage$outboundSchema = z.object({
    ipfs: z.nullable(z.union([z.lazy(() => exports.Storage1$outboundSchema), z.boolean()])).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var Storage$;
(function (Storage$) {
    /** @deprecated use `Storage$inboundSchema` instead. */
    Storage$.inboundSchema = exports.Storage$inboundSchema;
    /** @deprecated use `Storage$outboundSchema` instead. */
    Storage$.outboundSchema = exports.Storage$outboundSchema;
})(Storage$ || (exports.Storage$ = Storage$ = {}));
function storageToJSON(storage) {
    return JSON.stringify(exports.Storage$outboundSchema.parse(storage));
}
function storageFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.Storage$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Storage' from JSON`);
}
//# sourceMappingURL=storage.js.map