import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
/**
 * Phase of the asset storage
 */
export declare enum Phase {
    Waiting = "waiting",
    Processing = "processing",
    Ready = "ready",
    Failed = "failed",
    Reverted = "reverted"
}
export type Tasks = {
    /**
     * ID of any currently running task that is exporting this
     *
     * @remarks
     * asset to IPFS.
     */
    pending?: string | undefined;
    /**
     * ID of the last task to run successfully, that created
     *
     * @remarks
     * the currently saved data.
     */
    last?: string | undefined;
    /**
     * ID of the last task to fail execution.
     */
    failed?: string | undefined;
};
export type StorageStatus = {
    /**
     * Phase of the asset storage
     */
    phase: Phase;
    /**
     * Current progress of the task updating the storage.
     */
    progress?: number | undefined;
    /**
     * Error message if the last storage changed failed.
     */
    errorMessage?: string | undefined;
    tasks: Tasks;
};
/** @internal */
export declare const Phase$inboundSchema: z.ZodNativeEnum<typeof Phase>;
/** @internal */
export declare const Phase$outboundSchema: z.ZodNativeEnum<typeof Phase>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Phase$ {
    /** @deprecated use `Phase$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<typeof Phase>;
    /** @deprecated use `Phase$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<typeof Phase>;
}
/** @internal */
export declare const Tasks$inboundSchema: z.ZodType<Tasks, z.ZodTypeDef, unknown>;
/** @internal */
export type Tasks$Outbound = {
    pending?: string | undefined;
    last?: string | undefined;
    failed?: string | undefined;
};
/** @internal */
export declare const Tasks$outboundSchema: z.ZodType<Tasks$Outbound, z.ZodTypeDef, Tasks>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Tasks$ {
    /** @deprecated use `Tasks$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Tasks, z.ZodTypeDef, unknown>;
    /** @deprecated use `Tasks$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Tasks$Outbound, z.ZodTypeDef, Tasks>;
    /** @deprecated use `Tasks$Outbound` instead. */
    type Outbound = Tasks$Outbound;
}
export declare function tasksToJSON(tasks: Tasks): string;
export declare function tasksFromJSON(jsonString: string): SafeParseResult<Tasks, SDKValidationError>;
/** @internal */
export declare const StorageStatus$inboundSchema: z.ZodType<StorageStatus, z.ZodTypeDef, unknown>;
/** @internal */
export type StorageStatus$Outbound = {
    phase: string;
    progress?: number | undefined;
    errorMessage?: string | undefined;
    tasks: Tasks$Outbound;
};
/** @internal */
export declare const StorageStatus$outboundSchema: z.ZodType<StorageStatus$Outbound, z.ZodTypeDef, StorageStatus>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace StorageStatus$ {
    /** @deprecated use `StorageStatus$inboundSchema` instead. */
    const inboundSchema: z.ZodType<StorageStatus, z.ZodTypeDef, unknown>;
    /** @deprecated use `StorageStatus$outboundSchema` instead. */
    const outboundSchema: z.ZodType<StorageStatus$Outbound, z.ZodTypeDef, StorageStatus>;
    /** @deprecated use `StorageStatus$Outbound` instead. */
    type Outbound = StorageStatus$Outbound;
}
export declare function storageStatusToJSON(storageStatus: StorageStatus): string;
export declare function storageStatusFromJSON(jsonString: string): SafeParseResult<StorageStatus, SDKValidationError>;
//# sourceMappingURL=storagestatus.d.ts.map