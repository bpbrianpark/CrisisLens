"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.StorageStatus$ = exports.StorageStatus$outboundSchema = exports.StorageStatus$inboundSchema = exports.Tasks$ = exports.Tasks$outboundSchema = exports.Tasks$inboundSchema = exports.Phase$ = exports.Phase$outboundSchema = exports.Phase$inboundSchema = exports.Phase = void 0;
exports.tasksToJSON = tasksToJSON;
exports.tasksFromJSON = tasksFromJSON;
exports.storageStatusToJSON = storageStatusToJSON;
exports.storageStatusFromJSON = storageStatusFromJSON;
const z = __importStar(require("zod"));
const schemas_js_1 = require("../../lib/schemas.js");
/**
 * Phase of the asset storage
 */
var Phase;
(function (Phase) {
    Phase["Waiting"] = "waiting";
    Phase["Processing"] = "processing";
    Phase["Ready"] = "ready";
    Phase["Failed"] = "failed";
    Phase["Reverted"] = "reverted";
})(Phase || (exports.Phase = Phase = {}));
/** @internal */
exports.Phase$inboundSchema = z.nativeEnum(Phase);
/** @internal */
exports.Phase$outboundSchema = exports.Phase$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var Phase$;
(function (Phase$) {
    /** @deprecated use `Phase$inboundSchema` instead. */
    Phase$.inboundSchema = exports.Phase$inboundSchema;
    /** @deprecated use `Phase$outboundSchema` instead. */
    Phase$.outboundSchema = exports.Phase$outboundSchema;
})(Phase$ || (exports.Phase$ = Phase$ = {}));
/** @internal */
exports.Tasks$inboundSchema = z
    .object({
    pending: z.string().optional(),
    last: z.string().optional(),
    failed: z.string().optional(),
});
/** @internal */
exports.Tasks$outboundSchema = z.object({
    pending: z.string().optional(),
    last: z.string().optional(),
    failed: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var Tasks$;
(function (Tasks$) {
    /** @deprecated use `Tasks$inboundSchema` instead. */
    Tasks$.inboundSchema = exports.Tasks$inboundSchema;
    /** @deprecated use `Tasks$outboundSchema` instead. */
    Tasks$.outboundSchema = exports.Tasks$outboundSchema;
})(Tasks$ || (exports.Tasks$ = Tasks$ = {}));
function tasksToJSON(tasks) {
    return JSON.stringify(exports.Tasks$outboundSchema.parse(tasks));
}
function tasksFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.Tasks$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Tasks' from JSON`);
}
/** @internal */
exports.StorageStatus$inboundSchema = z.object({
    phase: exports.Phase$inboundSchema,
    progress: z.number().optional(),
    errorMessage: z.string().optional(),
    tasks: z.lazy(() => exports.Tasks$inboundSchema),
});
/** @internal */
exports.StorageStatus$outboundSchema = z.object({
    phase: exports.Phase$outboundSchema,
    progress: z.number().optional(),
    errorMessage: z.string().optional(),
    tasks: z.lazy(() => exports.Tasks$outboundSchema),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var StorageStatus$;
(function (StorageStatus$) {
    /** @deprecated use `StorageStatus$inboundSchema` instead. */
    StorageStatus$.inboundSchema = exports.StorageStatus$inboundSchema;
    /** @deprecated use `StorageStatus$outboundSchema` instead. */
    StorageStatus$.outboundSchema = exports.StorageStatus$outboundSchema;
})(StorageStatus$ || (exports.StorageStatus$ = StorageStatus$ = {}));
function storageStatusToJSON(storageStatus) {
    return JSON.stringify(exports.StorageStatus$outboundSchema.parse(storageStatus));
}
function storageStatusFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.StorageStatus$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'StorageStatus' from JSON`);
}
//# sourceMappingURL=storagestatus.js.map