"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Stream$ = exports.Stream$outboundSchema = exports.Stream$inboundSchema = exports.Renditions$ = exports.Renditions$outboundSchema = exports.Renditions$inboundSchema = exports.StreamMultistream$ = exports.StreamMultistream$outboundSchema = exports.StreamMultistream$inboundSchema = exports.StreamRecordingSpec$ = exports.StreamRecordingSpec$outboundSchema = exports.StreamRecordingSpec$inboundSchema = exports.StreamPull$ = exports.StreamPull$outboundSchema = exports.StreamPull$inboundSchema = exports.StreamLocation$ = exports.StreamLocation$outboundSchema = exports.StreamLocation$inboundSchema = exports.StreamIsMobile$ = exports.StreamIsMobile$outboundSchema = exports.StreamIsMobile$inboundSchema = exports.Stream1$ = exports.Stream1$outboundSchema = exports.Stream1$inboundSchema = exports.StreamUserTags$ = exports.StreamUserTags$outboundSchema = exports.StreamUserTags$inboundSchema = exports.Stream3$ = exports.Stream3$outboundSchema = exports.Stream3$inboundSchema = exports.Stream1 = void 0;
exports.stream3ToJSON = stream3ToJSON;
exports.stream3FromJSON = stream3FromJSON;
exports.streamUserTagsToJSON = streamUserTagsToJSON;
exports.streamUserTagsFromJSON = streamUserTagsFromJSON;
exports.streamIsMobileToJSON = streamIsMobileToJSON;
exports.streamIsMobileFromJSON = streamIsMobileFromJSON;
exports.streamLocationToJSON = streamLocationToJSON;
exports.streamLocationFromJSON = streamLocationFromJSON;
exports.streamPullToJSON = streamPullToJSON;
exports.streamPullFromJSON = streamPullFromJSON;
exports.streamRecordingSpecToJSON = streamRecordingSpecToJSON;
exports.streamRecordingSpecFromJSON = streamRecordingSpecFromJSON;
exports.streamMultistreamToJSON = streamMultistreamToJSON;
exports.streamMultistreamFromJSON = streamMultistreamFromJSON;
exports.renditionsToJSON = renditionsToJSON;
exports.renditionsFromJSON = renditionsFromJSON;
exports.streamToJSON = streamToJSON;
exports.streamFromJSON = streamFromJSON;
const z = __importStar(require("zod"));
const schemas_js_1 = require("../../lib/schemas.js");
const creatorid_js_1 = require("./creatorid.js");
const ffmpegprofile_js_1 = require("./ffmpegprofile.js");
const playbackpolicy_js_1 = require("./playbackpolicy.js");
const targetoutput_js_1 = require("./targetoutput.js");
const transcodeprofile_js_1 = require("./transcodeprofile.js");
/**
 * 0: not mobile, 1: mobile screen share, 2: mobile camera.
 */
var Stream1;
(function (Stream1) {
    Stream1[Stream1["Zero"] = 0] = "Zero";
    Stream1[Stream1["One"] = 1] = "One";
    Stream1[Stream1["Two"] = 2] = "Two";
})(Stream1 || (exports.Stream1 = Stream1 = {}));
/** @internal */
exports.Stream3$inboundSchema = z.union([z.string(), z.number()]);
/** @internal */
exports.Stream3$outboundSchema = z.union([z.string(), z.number()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var Stream3$;
(function (Stream3$) {
    /** @deprecated use `Stream3$inboundSchema` instead. */
    Stream3$.inboundSchema = exports.Stream3$inboundSchema;
    /** @deprecated use `Stream3$outboundSchema` instead. */
    Stream3$.outboundSchema = exports.Stream3$outboundSchema;
})(Stream3$ || (exports.Stream3$ = Stream3$ = {}));
function stream3ToJSON(stream3) {
    return JSON.stringify(exports.Stream3$outboundSchema.parse(stream3));
}
function stream3FromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.Stream3$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Stream3' from JSON`);
}
/** @internal */
exports.StreamUserTags$inboundSchema = z.union([
    z.string(),
    z.number(),
    z.array(z.union([z.string(), z.number()])),
]);
/** @internal */
exports.StreamUserTags$outboundSchema = z.union([
    z.string(),
    z.number(),
    z.array(z.union([z.string(), z.number()])),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var StreamUserTags$;
(function (StreamUserTags$) {
    /** @deprecated use `StreamUserTags$inboundSchema` instead. */
    StreamUserTags$.inboundSchema = exports.StreamUserTags$inboundSchema;
    /** @deprecated use `StreamUserTags$outboundSchema` instead. */
    StreamUserTags$.outboundSchema = exports.StreamUserTags$outboundSchema;
})(StreamUserTags$ || (exports.StreamUserTags$ = StreamUserTags$ = {}));
function streamUserTagsToJSON(streamUserTags) {
    return JSON.stringify(exports.StreamUserTags$outboundSchema.parse(streamUserTags));
}
function streamUserTagsFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.StreamUserTags$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'StreamUserTags' from JSON`);
}
/** @internal */
exports.Stream1$inboundSchema = z
    .nativeEnum(Stream1);
/** @internal */
exports.Stream1$outboundSchema = exports.Stream1$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var Stream1$;
(function (Stream1$) {
    /** @deprecated use `Stream1$inboundSchema` instead. */
    Stream1$.inboundSchema = exports.Stream1$inboundSchema;
    /** @deprecated use `Stream1$outboundSchema` instead. */
    Stream1$.outboundSchema = exports.Stream1$outboundSchema;
})(Stream1$ || (exports.Stream1$ = Stream1$ = {}));
/** @internal */
exports.StreamIsMobile$inboundSchema = z.union([exports.Stream1$inboundSchema, z.boolean()]);
/** @internal */
exports.StreamIsMobile$outboundSchema = z.union([exports.Stream1$outboundSchema, z.boolean()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var StreamIsMobile$;
(function (StreamIsMobile$) {
    /** @deprecated use `StreamIsMobile$inboundSchema` instead. */
    StreamIsMobile$.inboundSchema = exports.StreamIsMobile$inboundSchema;
    /** @deprecated use `StreamIsMobile$outboundSchema` instead. */
    StreamIsMobile$.outboundSchema = exports.StreamIsMobile$outboundSchema;
})(StreamIsMobile$ || (exports.StreamIsMobile$ = StreamIsMobile$ = {}));
function streamIsMobileToJSON(streamIsMobile) {
    return JSON.stringify(exports.StreamIsMobile$outboundSchema.parse(streamIsMobile));
}
function streamIsMobileFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.StreamIsMobile$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'StreamIsMobile' from JSON`);
}
/** @internal */
exports.StreamLocation$inboundSchema = z.object({
    lat: z.number(),
    lon: z.number(),
});
/** @internal */
exports.StreamLocation$outboundSchema = z.object({
    lat: z.number(),
    lon: z.number(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var StreamLocation$;
(function (StreamLocation$) {
    /** @deprecated use `StreamLocation$inboundSchema` instead. */
    StreamLocation$.inboundSchema = exports.StreamLocation$inboundSchema;
    /** @deprecated use `StreamLocation$outboundSchema` instead. */
    StreamLocation$.outboundSchema = exports.StreamLocation$outboundSchema;
})(StreamLocation$ || (exports.StreamLocation$ = StreamLocation$ = {}));
function streamLocationToJSON(streamLocation) {
    return JSON.stringify(exports.StreamLocation$outboundSchema.parse(streamLocation));
}
function streamLocationFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.StreamLocation$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'StreamLocation' from JSON`);
}
/** @internal */
exports.StreamPull$inboundSchema = z.object({
    source: z.string(),
    headers: z.record(z.string()).optional(),
    isMobile: z.union([exports.Stream1$inboundSchema, z.boolean()]).optional(),
    location: z.lazy(() => exports.StreamLocation$inboundSchema).optional(),
});
/** @internal */
exports.StreamPull$outboundSchema = z.object({
    source: z.string(),
    headers: z.record(z.string()).optional(),
    isMobile: z.union([exports.Stream1$outboundSchema, z.boolean()]).optional(),
    location: z.lazy(() => exports.StreamLocation$outboundSchema).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var StreamPull$;
(function (StreamPull$) {
    /** @deprecated use `StreamPull$inboundSchema` instead. */
    StreamPull$.inboundSchema = exports.StreamPull$inboundSchema;
    /** @deprecated use `StreamPull$outboundSchema` instead. */
    StreamPull$.outboundSchema = exports.StreamPull$outboundSchema;
})(StreamPull$ || (exports.StreamPull$ = StreamPull$ = {}));
function streamPullToJSON(streamPull) {
    return JSON.stringify(exports.StreamPull$outboundSchema.parse(streamPull));
}
function streamPullFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.StreamPull$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'StreamPull' from JSON`);
}
/** @internal */
exports.StreamRecordingSpec$inboundSchema = z.object({
    profiles: z.array(transcodeprofile_js_1.TranscodeProfile$inboundSchema).optional(),
});
/** @internal */
exports.StreamRecordingSpec$outboundSchema = z.object({
    profiles: z.array(transcodeprofile_js_1.TranscodeProfile$outboundSchema).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var StreamRecordingSpec$;
(function (StreamRecordingSpec$) {
    /** @deprecated use `StreamRecordingSpec$inboundSchema` instead. */
    StreamRecordingSpec$.inboundSchema = exports.StreamRecordingSpec$inboundSchema;
    /** @deprecated use `StreamRecordingSpec$outboundSchema` instead. */
    StreamRecordingSpec$.outboundSchema = exports.StreamRecordingSpec$outboundSchema;
})(StreamRecordingSpec$ || (exports.StreamRecordingSpec$ = StreamRecordingSpec$ = {}));
function streamRecordingSpecToJSON(streamRecordingSpec) {
    return JSON.stringify(exports.StreamRecordingSpec$outboundSchema.parse(streamRecordingSpec));
}
function streamRecordingSpecFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.StreamRecordingSpec$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'StreamRecordingSpec' from JSON`);
}
/** @internal */
exports.StreamMultistream$inboundSchema = z.object({
    targets: z.array(targetoutput_js_1.TargetOutput$inboundSchema).optional(),
});
/** @internal */
exports.StreamMultistream$outboundSchema = z.object({
    targets: z.array(targetoutput_js_1.TargetOutput$outboundSchema).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var StreamMultistream$;
(function (StreamMultistream$) {
    /** @deprecated use `StreamMultistream$inboundSchema` instead. */
    StreamMultistream$.inboundSchema = exports.StreamMultistream$inboundSchema;
    /** @deprecated use `StreamMultistream$outboundSchema` instead. */
    StreamMultistream$.outboundSchema = exports.StreamMultistream$outboundSchema;
})(StreamMultistream$ || (exports.StreamMultistream$ = StreamMultistream$ = {}));
function streamMultistreamToJSON(streamMultistream) {
    return JSON.stringify(exports.StreamMultistream$outboundSchema.parse(streamMultistream));
}
function streamMultistreamFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.StreamMultistream$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'StreamMultistream' from JSON`);
}
/** @internal */
exports.Renditions$inboundSchema = z.object({});
/** @internal */
exports.Renditions$outboundSchema = z.object({});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var Renditions$;
(function (Renditions$) {
    /** @deprecated use `Renditions$inboundSchema` instead. */
    Renditions$.inboundSchema = exports.Renditions$inboundSchema;
    /** @deprecated use `Renditions$outboundSchema` instead. */
    Renditions$.outboundSchema = exports.Renditions$outboundSchema;
})(Renditions$ || (exports.Renditions$ = Renditions$ = {}));
function renditionsToJSON(renditions) {
    return JSON.stringify(exports.Renditions$outboundSchema.parse(renditions));
}
function renditionsFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.Renditions$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Renditions' from JSON`);
}
/** @internal */
exports.Stream$inboundSchema = z
    .object({
    id: z.string().optional(),
    name: z.string(),
    kind: z.string().optional(),
    creatorId: creatorid_js_1.CreatorId$inboundSchema.optional(),
    userTags: z.record(z.union([
        z.string(),
        z.number(),
        z.array(z.union([z.string(), z.number()])),
    ])).optional(),
    lastSeen: z.number().optional(),
    sourceSegments: z.number().optional(),
    transcodedSegments: z.number().optional(),
    sourceSegmentsDuration: z.number().optional(),
    transcodedSegmentsDuration: z.number().optional(),
    sourceBytes: z.number().optional(),
    transcodedBytes: z.number().optional(),
    ingestRate: z.number().optional(),
    outgoingRate: z.number().optional(),
    isActive: z.boolean().optional(),
    isHealthy: z.nullable(z.boolean()).optional(),
    issues: z.nullable(z.array(z.string())).optional(),
    createdByTokenName: z.string().optional(),
    createdAt: z.number().optional(),
    parentId: z.string().optional(),
    streamKey: z.string().optional(),
    pull: z.lazy(() => exports.StreamPull$inboundSchema).optional(),
    playbackId: z.string().optional(),
    playbackPolicy: z.nullable(playbackpolicy_js_1.PlaybackPolicy$inboundSchema).optional(),
    profiles: z.array(ffmpegprofile_js_1.FfmpegProfile$inboundSchema).optional(),
    projectId: z.string().optional(),
    record: z.boolean().optional(),
    recordingSpec: z.lazy(() => exports.StreamRecordingSpec$inboundSchema).optional(),
    multistream: z.lazy(() => exports.StreamMultistream$inboundSchema).optional(),
    suspended: z.boolean().optional(),
    lastTerminatedAt: z.nullable(z.number()).optional(),
    userId: z.string().optional(),
    renditions: z.lazy(() => exports.Renditions$inboundSchema).optional(),
});
/** @internal */
exports.Stream$outboundSchema = z.object({
    id: z.string().optional(),
    name: z.string(),
    kind: z.string().optional(),
    creatorId: creatorid_js_1.CreatorId$outboundSchema.optional(),
    userTags: z.record(z.union([
        z.string(),
        z.number(),
        z.array(z.union([z.string(), z.number()])),
    ])).optional(),
    lastSeen: z.number().optional(),
    sourceSegments: z.number().optional(),
    transcodedSegments: z.number().optional(),
    sourceSegmentsDuration: z.number().optional(),
    transcodedSegmentsDuration: z.number().optional(),
    sourceBytes: z.number().optional(),
    transcodedBytes: z.number().optional(),
    ingestRate: z.number().optional(),
    outgoingRate: z.number().optional(),
    isActive: z.boolean().optional(),
    isHealthy: z.nullable(z.boolean()).optional(),
    issues: z.nullable(z.array(z.string())).optional(),
    createdByTokenName: z.string().optional(),
    createdAt: z.number().optional(),
    parentId: z.string().optional(),
    streamKey: z.string().optional(),
    pull: z.lazy(() => exports.StreamPull$outboundSchema).optional(),
    playbackId: z.string().optional(),
    playbackPolicy: z.nullable(playbackpolicy_js_1.PlaybackPolicy$outboundSchema).optional(),
    profiles: z.array(ffmpegprofile_js_1.FfmpegProfile$outboundSchema).optional(),
    projectId: z.string().optional(),
    record: z.boolean().optional(),
    recordingSpec: z.lazy(() => exports.StreamRecordingSpec$outboundSchema).optional(),
    multistream: z.lazy(() => exports.StreamMultistream$outboundSchema).optional(),
    suspended: z.boolean().optional(),
    lastTerminatedAt: z.nullable(z.number()).optional(),
    userId: z.string().optional(),
    renditions: z.lazy(() => exports.Renditions$outboundSchema).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var Stream$;
(function (Stream$) {
    /** @deprecated use `Stream$inboundSchema` instead. */
    Stream$.inboundSchema = exports.Stream$inboundSchema;
    /** @deprecated use `Stream$outboundSchema` instead. */
    Stream$.outboundSchema = exports.Stream$outboundSchema;
})(Stream$ || (exports.Stream$ = Stream$ = {}));
function streamToJSON(stream) {
    return JSON.stringify(exports.Stream$outboundSchema.parse(stream));
}
function streamFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.Stream$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Stream' from JSON`);
}
//# sourceMappingURL=stream.js.map