import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import { FfmpegProfile, FfmpegProfile$Outbound } from "./ffmpegprofile.js";
import { InputCreatorId, InputCreatorId$Outbound } from "./inputcreatorid.js";
import { Multistream, Multistream$Outbound } from "./multistream.js";
import { PlaybackPolicy, PlaybackPolicy$Outbound } from "./playbackpolicy.js";
import { RecordingSpec, RecordingSpec$Outbound } from "./recordingspec.js";
import { UserTags, UserTags$Outbound } from "./usertags.js";
export type StreamPatchPayload = {
    creatorId?: InputCreatorId | undefined;
    /**
     * Should this stream be recorded? Uses default settings. For more
     *
     * @remarks
     * customization, create and configure an object store.
     */
    record?: boolean | undefined;
    /**
     * If currently suspended
     */
    suspended?: boolean | undefined;
    multistream?: Multistream | undefined;
    /**
     * Whether the playback policy for an asset or stream is public or signed
     */
    playbackPolicy?: PlaybackPolicy | null | undefined;
    profiles?: Array<FfmpegProfile> | null | undefined;
    recordingSpec?: RecordingSpec | undefined;
    /**
     * User input tags associated with the stream
     */
    userTags?: {
        [k: string]: UserTags;
    } | undefined;
    name?: string | undefined;
};
/** @internal */
export declare const StreamPatchPayload$inboundSchema: z.ZodType<StreamPatchPayload, z.ZodTypeDef, unknown>;
/** @internal */
export type StreamPatchPayload$Outbound = {
    creatorId?: InputCreatorId$Outbound | undefined;
    record?: boolean | undefined;
    suspended?: boolean | undefined;
    multistream?: Multistream$Outbound | undefined;
    playbackPolicy?: PlaybackPolicy$Outbound | null | undefined;
    profiles?: Array<FfmpegProfile$Outbound> | null | undefined;
    recordingSpec?: RecordingSpec$Outbound | undefined;
    userTags?: {
        [k: string]: UserTags$Outbound;
    } | undefined;
    name?: string | undefined;
};
/** @internal */
export declare const StreamPatchPayload$outboundSchema: z.ZodType<StreamPatchPayload$Outbound, z.ZodTypeDef, StreamPatchPayload>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace StreamPatchPayload$ {
    /** @deprecated use `StreamPatchPayload$inboundSchema` instead. */
    const inboundSchema: z.ZodType<StreamPatchPayload, z.ZodTypeDef, unknown>;
    /** @deprecated use `StreamPatchPayload$outboundSchema` instead. */
    const outboundSchema: z.ZodType<StreamPatchPayload$Outbound, z.ZodTypeDef, StreamPatchPayload>;
    /** @deprecated use `StreamPatchPayload$Outbound` instead. */
    type Outbound = StreamPatchPayload$Outbound;
}
export declare function streamPatchPayloadToJSON(streamPatchPayload: StreamPatchPayload): string;
export declare function streamPatchPayloadFromJSON(jsonString: string): SafeParseResult<StreamPatchPayload, SDKValidationError>;
//# sourceMappingURL=streampatchpayload.d.ts.map