import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
export type StudioApiError = {
    errors?: Array<string> | undefined;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse?: Response | undefined;
};
/** @internal */
export declare const StudioApiError$inboundSchema: z.ZodType<StudioApiError, z.ZodTypeDef, unknown>;
/** @internal */
export type StudioApiError$Outbound = {
    errors?: Array<string> | undefined;
    RawResponse?: never | undefined;
};
/** @internal */
export declare const StudioApiError$outboundSchema: z.ZodType<StudioApiError$Outbound, z.ZodTypeDef, StudioApiError>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace StudioApiError$ {
    /** @deprecated use `StudioApiError$inboundSchema` instead. */
    const inboundSchema: z.ZodType<StudioApiError, z.ZodTypeDef, unknown>;
    /** @deprecated use `StudioApiError$outboundSchema` instead. */
    const outboundSchema: z.ZodType<StudioApiError$Outbound, z.ZodTypeDef, StudioApiError>;
    /** @deprecated use `StudioApiError$Outbound` instead. */
    type Outbound = StudioApiError$Outbound;
}
export declare function studioApiErrorToJSON(studioApiError: StudioApiError): string;
export declare function studioApiErrorFromJSON(jsonString: string): SafeParseResult<StudioApiError, SDKValidationError>;
//# sourceMappingURL=studioapierror.d.ts.map