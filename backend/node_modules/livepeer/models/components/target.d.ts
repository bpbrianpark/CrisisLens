import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
/**
 * Inline multistream target object. Will automatically
 *
 * @remarks
 * create the target resource to be used by the created
 * stream.
 */
export type TargetSpec = {
    name?: string | undefined;
    /**
     * Livepeer-compatible multistream target URL (RTMP(S) or SRT)
     */
    url: string;
};
export type Target = {
    /**
     * Name of transcoding profile that should be sent. Use
     *
     * @remarks
     * "source" for pushing source stream data
     */
    profile: string;
    /**
     * If true, the stream audio will be muted and only silent
     *
     * @remarks
     * video will be pushed to the target.
     */
    videoOnly?: boolean | undefined;
    /**
     * ID of multistream target object where to push this stream
     */
    id?: string | undefined;
    /**
     * Inline multistream target object. Will automatically
     *
     * @remarks
     * create the target resource to be used by the created
     * stream.
     */
    spec?: TargetSpec | undefined;
};
/** @internal */
export declare const TargetSpec$inboundSchema: z.ZodType<TargetSpec, z.ZodTypeDef, unknown>;
/** @internal */
export type TargetSpec$Outbound = {
    name?: string | undefined;
    url: string;
};
/** @internal */
export declare const TargetSpec$outboundSchema: z.ZodType<TargetSpec$Outbound, z.ZodTypeDef, TargetSpec>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace TargetSpec$ {
    /** @deprecated use `TargetSpec$inboundSchema` instead. */
    const inboundSchema: z.ZodType<TargetSpec, z.ZodTypeDef, unknown>;
    /** @deprecated use `TargetSpec$outboundSchema` instead. */
    const outboundSchema: z.ZodType<TargetSpec$Outbound, z.ZodTypeDef, TargetSpec>;
    /** @deprecated use `TargetSpec$Outbound` instead. */
    type Outbound = TargetSpec$Outbound;
}
export declare function targetSpecToJSON(targetSpec: TargetSpec): string;
export declare function targetSpecFromJSON(jsonString: string): SafeParseResult<TargetSpec, SDKValidationError>;
/** @internal */
export declare const Target$inboundSchema: z.ZodType<Target, z.ZodTypeDef, unknown>;
/** @internal */
export type Target$Outbound = {
    profile: string;
    videoOnly: boolean;
    id?: string | undefined;
    spec?: TargetSpec$Outbound | undefined;
};
/** @internal */
export declare const Target$outboundSchema: z.ZodType<Target$Outbound, z.ZodTypeDef, Target>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Target$ {
    /** @deprecated use `Target$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Target, z.ZodTypeDef, unknown>;
    /** @deprecated use `Target$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Target$Outbound, z.ZodTypeDef, Target>;
    /** @deprecated use `Target$Outbound` instead. */
    type Outbound = Target$Outbound;
}
export declare function targetToJSON(target: Target): string;
export declare function targetFromJSON(jsonString: string): SafeParseResult<Target, SDKValidationError>;
//# sourceMappingURL=target.d.ts.map