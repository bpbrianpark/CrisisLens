import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
/**
 * Inline multistream target object. Will automatically
 *
 * @remarks
 * create the target resource to be used by the created
 * stream.
 */
export type TargetAddPayloadSpec = {
    name?: string | undefined;
    /**
     * Livepeer-compatible multistream target URL (RTMP(S) or SRT)
     */
    url: string;
};
export type TargetAddPayload = {
    /**
     * Name of transcoding profile that should be sent. Use
     *
     * @remarks
     * "source" for pushing source stream data
     */
    profile: string;
    /**
     * If true, the stream audio will be muted and only silent
     *
     * @remarks
     * video will be pushed to the target.
     */
    videoOnly?: boolean | undefined;
    /**
     * ID of multistream target object where to push this stream
     */
    id?: string | undefined;
    /**
     * Inline multistream target object. Will automatically
     *
     * @remarks
     * create the target resource to be used by the created
     * stream.
     */
    spec?: TargetAddPayloadSpec | undefined;
};
/** @internal */
export declare const TargetAddPayloadSpec$inboundSchema: z.ZodType<TargetAddPayloadSpec, z.ZodTypeDef, unknown>;
/** @internal */
export type TargetAddPayloadSpec$Outbound = {
    name?: string | undefined;
    url: string;
};
/** @internal */
export declare const TargetAddPayloadSpec$outboundSchema: z.ZodType<TargetAddPayloadSpec$Outbound, z.ZodTypeDef, TargetAddPayloadSpec>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace TargetAddPayloadSpec$ {
    /** @deprecated use `TargetAddPayloadSpec$inboundSchema` instead. */
    const inboundSchema: z.ZodType<TargetAddPayloadSpec, z.ZodTypeDef, unknown>;
    /** @deprecated use `TargetAddPayloadSpec$outboundSchema` instead. */
    const outboundSchema: z.ZodType<TargetAddPayloadSpec$Outbound, z.ZodTypeDef, TargetAddPayloadSpec>;
    /** @deprecated use `TargetAddPayloadSpec$Outbound` instead. */
    type Outbound = TargetAddPayloadSpec$Outbound;
}
export declare function targetAddPayloadSpecToJSON(targetAddPayloadSpec: TargetAddPayloadSpec): string;
export declare function targetAddPayloadSpecFromJSON(jsonString: string): SafeParseResult<TargetAddPayloadSpec, SDKValidationError>;
/** @internal */
export declare const TargetAddPayload$inboundSchema: z.ZodType<TargetAddPayload, z.ZodTypeDef, unknown>;
/** @internal */
export type TargetAddPayload$Outbound = {
    profile: string;
    videoOnly: boolean;
    id?: string | undefined;
    spec?: TargetAddPayloadSpec$Outbound | undefined;
};
/** @internal */
export declare const TargetAddPayload$outboundSchema: z.ZodType<TargetAddPayload$Outbound, z.ZodTypeDef, TargetAddPayload>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace TargetAddPayload$ {
    /** @deprecated use `TargetAddPayload$inboundSchema` instead. */
    const inboundSchema: z.ZodType<TargetAddPayload, z.ZodTypeDef, unknown>;
    /** @deprecated use `TargetAddPayload$outboundSchema` instead. */
    const outboundSchema: z.ZodType<TargetAddPayload$Outbound, z.ZodTypeDef, TargetAddPayload>;
    /** @deprecated use `TargetAddPayload$Outbound` instead. */
    type Outbound = TargetAddPayload$Outbound;
}
export declare function targetAddPayloadToJSON(targetAddPayload: TargetAddPayload): string;
export declare function targetAddPayloadFromJSON(jsonString: string): SafeParseResult<TargetAddPayload, SDKValidationError>;
//# sourceMappingURL=targetaddpayload.d.ts.map