"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TargetAddPayload$ = exports.TargetAddPayload$outboundSchema = exports.TargetAddPayload$inboundSchema = exports.TargetAddPayloadSpec$ = exports.TargetAddPayloadSpec$outboundSchema = exports.TargetAddPayloadSpec$inboundSchema = void 0;
exports.targetAddPayloadSpecToJSON = targetAddPayloadSpecToJSON;
exports.targetAddPayloadSpecFromJSON = targetAddPayloadSpecFromJSON;
exports.targetAddPayloadToJSON = targetAddPayloadToJSON;
exports.targetAddPayloadFromJSON = targetAddPayloadFromJSON;
const z = __importStar(require("zod"));
const schemas_js_1 = require("../../lib/schemas.js");
/** @internal */
exports.TargetAddPayloadSpec$inboundSchema = z.object({
    name: z.string().optional(),
    url: z.string(),
});
/** @internal */
exports.TargetAddPayloadSpec$outboundSchema = z.object({
    name: z.string().optional(),
    url: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var TargetAddPayloadSpec$;
(function (TargetAddPayloadSpec$) {
    /** @deprecated use `TargetAddPayloadSpec$inboundSchema` instead. */
    TargetAddPayloadSpec$.inboundSchema = exports.TargetAddPayloadSpec$inboundSchema;
    /** @deprecated use `TargetAddPayloadSpec$outboundSchema` instead. */
    TargetAddPayloadSpec$.outboundSchema = exports.TargetAddPayloadSpec$outboundSchema;
})(TargetAddPayloadSpec$ || (exports.TargetAddPayloadSpec$ = TargetAddPayloadSpec$ = {}));
function targetAddPayloadSpecToJSON(targetAddPayloadSpec) {
    return JSON.stringify(exports.TargetAddPayloadSpec$outboundSchema.parse(targetAddPayloadSpec));
}
function targetAddPayloadSpecFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.TargetAddPayloadSpec$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'TargetAddPayloadSpec' from JSON`);
}
/** @internal */
exports.TargetAddPayload$inboundSchema = z.object({
    profile: z.string(),
    videoOnly: z.boolean().default(false),
    id: z.string().optional(),
    spec: z.lazy(() => exports.TargetAddPayloadSpec$inboundSchema).optional(),
});
/** @internal */
exports.TargetAddPayload$outboundSchema = z.object({
    profile: z.string(),
    videoOnly: z.boolean().default(false),
    id: z.string().optional(),
    spec: z.lazy(() => exports.TargetAddPayloadSpec$outboundSchema).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var TargetAddPayload$;
(function (TargetAddPayload$) {
    /** @deprecated use `TargetAddPayload$inboundSchema` instead. */
    TargetAddPayload$.inboundSchema = exports.TargetAddPayload$inboundSchema;
    /** @deprecated use `TargetAddPayload$outboundSchema` instead. */
    TargetAddPayload$.outboundSchema = exports.TargetAddPayload$outboundSchema;
})(TargetAddPayload$ || (exports.TargetAddPayload$ = TargetAddPayload$ = {}));
function targetAddPayloadToJSON(targetAddPayload) {
    return JSON.stringify(exports.TargetAddPayload$outboundSchema.parse(targetAddPayload));
}
function targetAddPayloadFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.TargetAddPayload$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'TargetAddPayload' from JSON`);
}
//# sourceMappingURL=targetaddpayload.js.map