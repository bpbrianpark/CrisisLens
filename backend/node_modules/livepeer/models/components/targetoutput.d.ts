import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
export type TargetOutput = {
    /**
     * Name of transcoding profile that should be sent. Use
     *
     * @remarks
     * "source" for pushing source stream data
     */
    profile: string;
    /**
     * If true, the stream audio will be muted and only silent
     *
     * @remarks
     * video will be pushed to the target.
     */
    videoOnly?: boolean | undefined;
    /**
     * ID of multistream target object where to push this stream
     */
    id?: string | undefined;
};
/** @internal */
export declare const TargetOutput$inboundSchema: z.ZodType<TargetOutput, z.ZodTypeDef, unknown>;
/** @internal */
export type TargetOutput$Outbound = {
    profile: string;
    videoOnly: boolean;
    id?: string | undefined;
};
/** @internal */
export declare const TargetOutput$outboundSchema: z.ZodType<TargetOutput$Outbound, z.ZodTypeDef, TargetOutput>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace TargetOutput$ {
    /** @deprecated use `TargetOutput$inboundSchema` instead. */
    const inboundSchema: z.ZodType<TargetOutput, z.ZodTypeDef, unknown>;
    /** @deprecated use `TargetOutput$outboundSchema` instead. */
    const outboundSchema: z.ZodType<TargetOutput$Outbound, z.ZodTypeDef, TargetOutput>;
    /** @deprecated use `TargetOutput$Outbound` instead. */
    type Outbound = TargetOutput$Outbound;
}
export declare function targetOutputToJSON(targetOutput: TargetOutput): string;
export declare function targetOutputFromJSON(jsonString: string): SafeParseResult<TargetOutput, SDKValidationError>;
//# sourceMappingURL=targetoutput.d.ts.map