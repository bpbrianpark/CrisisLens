"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TaskStatus$outboundSchema = exports.TaskStatus$inboundSchema = exports.TaskPhase$ = exports.TaskPhase$outboundSchema = exports.TaskPhase$inboundSchema = exports.Params$ = exports.Params$outboundSchema = exports.Params$inboundSchema = exports.Clip$ = exports.Clip$outboundSchema = exports.Clip$inboundSchema = exports.CatalystPipelineStrategy$ = exports.CatalystPipelineStrategy$outboundSchema = exports.CatalystPipelineStrategy$inboundSchema = exports.ClipStrategy$ = exports.ClipStrategy$outboundSchema = exports.ClipStrategy$inboundSchema = exports.TranscodeFile$ = exports.TranscodeFile$outboundSchema = exports.TranscodeFile$inboundSchema = exports.TaskOutputs$ = exports.TaskOutputs$outboundSchema = exports.TaskOutputs$inboundSchema = exports.TaskMp4$ = exports.TaskMp4$outboundSchema = exports.TaskMp4$inboundSchema = exports.TaskHls$ = exports.TaskHls$outboundSchema = exports.TaskHls$inboundSchema = exports.TaskStorage$ = exports.TaskStorage$outboundSchema = exports.TaskStorage$inboundSchema = exports.TaskInput$ = exports.TaskInput$outboundSchema = exports.TaskInput$inboundSchema = exports.TaskExportData$ = exports.TaskExportData$outboundSchema = exports.TaskExportData$inboundSchema = exports.Content$ = exports.Content$outboundSchema = exports.Content$inboundSchema = exports.Upload$ = exports.Upload$outboundSchema = exports.Upload$inboundSchema = exports.TaskType$ = exports.TaskType$outboundSchema = exports.TaskType$inboundSchema = exports.TaskPhase = exports.CatalystPipelineStrategy = exports.TaskType = void 0;
exports.Task$ = exports.Task$outboundSchema = exports.Task$inboundSchema = exports.Output$ = exports.Output$outboundSchema = exports.Output$inboundSchema = exports.ExportData$ = exports.ExportData$outboundSchema = exports.ExportData$inboundSchema = exports.TaskSchemasIpfs$ = exports.TaskSchemasIpfs$outboundSchema = exports.TaskSchemasIpfs$inboundSchema = exports.Export$ = exports.Export$outboundSchema = exports.Export$inboundSchema = exports.TaskIpfs$ = exports.TaskIpfs$outboundSchema = exports.TaskIpfs$inboundSchema = exports.TaskUpload$ = exports.TaskUpload$outboundSchema = exports.TaskUpload$inboundSchema = exports.TaskStatus$ = void 0;
exports.uploadToJSON = uploadToJSON;
exports.uploadFromJSON = uploadFromJSON;
exports.contentToJSON = contentToJSON;
exports.contentFromJSON = contentFromJSON;
exports.taskExportDataToJSON = taskExportDataToJSON;
exports.taskExportDataFromJSON = taskExportDataFromJSON;
exports.taskInputToJSON = taskInputToJSON;
exports.taskInputFromJSON = taskInputFromJSON;
exports.taskStorageToJSON = taskStorageToJSON;
exports.taskStorageFromJSON = taskStorageFromJSON;
exports.taskHlsToJSON = taskHlsToJSON;
exports.taskHlsFromJSON = taskHlsFromJSON;
exports.taskMp4ToJSON = taskMp4ToJSON;
exports.taskMp4FromJSON = taskMp4FromJSON;
exports.taskOutputsToJSON = taskOutputsToJSON;
exports.taskOutputsFromJSON = taskOutputsFromJSON;
exports.transcodeFileToJSON = transcodeFileToJSON;
exports.transcodeFileFromJSON = transcodeFileFromJSON;
exports.clipStrategyToJSON = clipStrategyToJSON;
exports.clipStrategyFromJSON = clipStrategyFromJSON;
exports.clipToJSON = clipToJSON;
exports.clipFromJSON = clipFromJSON;
exports.paramsToJSON = paramsToJSON;
exports.paramsFromJSON = paramsFromJSON;
exports.taskStatusToJSON = taskStatusToJSON;
exports.taskStatusFromJSON = taskStatusFromJSON;
exports.taskUploadToJSON = taskUploadToJSON;
exports.taskUploadFromJSON = taskUploadFromJSON;
exports.taskIpfsToJSON = taskIpfsToJSON;
exports.taskIpfsFromJSON = taskIpfsFromJSON;
exports.exportToJSON = exportToJSON;
exports.exportFromJSON = exportFromJSON;
exports.taskSchemasIpfsToJSON = taskSchemasIpfsToJSON;
exports.taskSchemasIpfsFromJSON = taskSchemasIpfsFromJSON;
exports.exportDataToJSON = exportDataToJSON;
exports.exportDataFromJSON = exportDataFromJSON;
exports.outputToJSON = outputToJSON;
exports.outputFromJSON = outputFromJSON;
exports.taskToJSON = taskToJSON;
exports.taskFromJSON = taskFromJSON;
const z = __importStar(require("zod"));
const primitives_js_1 = require("../../lib/primitives.js");
const schemas_js_1 = require("../../lib/schemas.js");
const asset_js_1 = require("./asset.js");
const encryptionoutput_js_1 = require("./encryptionoutput.js");
const exporttaskparams_js_1 = require("./exporttaskparams.js");
const inputcreatorid_js_1 = require("./inputcreatorid.js");
const ipfsexportparams_js_1 = require("./ipfsexportparams.js");
const transcodeprofile_js_1 = require("./transcodeprofile.js");
/**
 * Type of the task
 */
var TaskType;
(function (TaskType) {
    TaskType["Upload"] = "upload";
    TaskType["Export"] = "export";
    TaskType["ExportData"] = "export-data";
    TaskType["TranscodeFile"] = "transcode-file";
    TaskType["Clip"] = "clip";
})(TaskType || (exports.TaskType = TaskType = {}));
/**
 * Force to use a specific strategy in the Catalyst pipeline. If not specified, the default strategy that Catalyst is configured for will be used. This field only available for admin users, and is only used for E2E testing.
 */
var CatalystPipelineStrategy;
(function (CatalystPipelineStrategy) {
    CatalystPipelineStrategy["Catalyst"] = "catalyst";
    CatalystPipelineStrategy["CatalystFfmpeg"] = "catalyst_ffmpeg";
    CatalystPipelineStrategy["BackgroundExternal"] = "background_external";
    CatalystPipelineStrategy["BackgroundMist"] = "background_mist";
    CatalystPipelineStrategy["FallbackExternal"] = "fallback_external";
    CatalystPipelineStrategy["External"] = "external";
})(CatalystPipelineStrategy || (exports.CatalystPipelineStrategy = CatalystPipelineStrategy = {}));
/**
 * Phase of the task
 */
var TaskPhase;
(function (TaskPhase) {
    TaskPhase["Pending"] = "pending";
    TaskPhase["Waiting"] = "waiting";
    TaskPhase["Running"] = "running";
    TaskPhase["Failed"] = "failed";
    TaskPhase["Completed"] = "completed";
    TaskPhase["Cancelled"] = "cancelled";
})(TaskPhase || (exports.TaskPhase = TaskPhase = {}));
/** @internal */
exports.TaskType$inboundSchema = z
    .nativeEnum(TaskType);
/** @internal */
exports.TaskType$outboundSchema = exports.TaskType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var TaskType$;
(function (TaskType$) {
    /** @deprecated use `TaskType$inboundSchema` instead. */
    TaskType$.inboundSchema = exports.TaskType$inboundSchema;
    /** @deprecated use `TaskType$outboundSchema` instead. */
    TaskType$.outboundSchema = exports.TaskType$outboundSchema;
})(TaskType$ || (exports.TaskType$ = TaskType$ = {}));
/** @internal */
exports.Upload$inboundSchema = z
    .object({
    url: z.string().optional(),
    encryption: encryptionoutput_js_1.EncryptionOutput$inboundSchema.optional(),
    c2pa: z.boolean().optional(),
    profiles: z.array(transcodeprofile_js_1.TranscodeProfile$inboundSchema).optional(),
    targetSegmentSizeSecs: z.number().optional(),
});
/** @internal */
exports.Upload$outboundSchema = z.object({
    url: z.string().optional(),
    encryption: encryptionoutput_js_1.EncryptionOutput$outboundSchema.optional(),
    c2pa: z.boolean().optional(),
    profiles: z.array(transcodeprofile_js_1.TranscodeProfile$outboundSchema).optional(),
    targetSegmentSizeSecs: z.number().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var Upload$;
(function (Upload$) {
    /** @deprecated use `Upload$inboundSchema` instead. */
    Upload$.inboundSchema = exports.Upload$inboundSchema;
    /** @deprecated use `Upload$outboundSchema` instead. */
    Upload$.outboundSchema = exports.Upload$outboundSchema;
})(Upload$ || (exports.Upload$ = Upload$ = {}));
function uploadToJSON(upload) {
    return JSON.stringify(exports.Upload$outboundSchema.parse(upload));
}
function uploadFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.Upload$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Upload' from JSON`);
}
/** @internal */
exports.Content$inboundSchema = z.object({});
/** @internal */
exports.Content$outboundSchema = z.object({});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var Content$;
(function (Content$) {
    /** @deprecated use `Content$inboundSchema` instead. */
    Content$.inboundSchema = exports.Content$inboundSchema;
    /** @deprecated use `Content$outboundSchema` instead. */
    Content$.outboundSchema = exports.Content$outboundSchema;
})(Content$ || (exports.Content$ = Content$ = {}));
function contentToJSON(content) {
    return JSON.stringify(exports.Content$outboundSchema.parse(content));
}
function contentFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.Content$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Content' from JSON`);
}
/** @internal */
exports.TaskExportData$inboundSchema = z.object({
    content: z.lazy(() => exports.Content$inboundSchema),
    ipfs: ipfsexportparams_js_1.IpfsExportParams$inboundSchema.optional(),
    type: z.string().optional(),
    id: z.string().optional(),
});
/** @internal */
exports.TaskExportData$outboundSchema = z.object({
    content: z.lazy(() => exports.Content$outboundSchema),
    ipfs: ipfsexportparams_js_1.IpfsExportParams$outboundSchema.optional(),
    type: z.string().optional(),
    id: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var TaskExportData$;
(function (TaskExportData$) {
    /** @deprecated use `TaskExportData$inboundSchema` instead. */
    TaskExportData$.inboundSchema = exports.TaskExportData$inboundSchema;
    /** @deprecated use `TaskExportData$outboundSchema` instead. */
    TaskExportData$.outboundSchema = exports.TaskExportData$outboundSchema;
})(TaskExportData$ || (exports.TaskExportData$ = TaskExportData$ = {}));
function taskExportDataToJSON(taskExportData) {
    return JSON.stringify(exports.TaskExportData$outboundSchema.parse(taskExportData));
}
function taskExportDataFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.TaskExportData$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'TaskExportData' from JSON`);
}
/** @internal */
exports.TaskInput$inboundSchema = z.object({
    url: z.string().optional(),
});
/** @internal */
exports.TaskInput$outboundSchema = z.object({
    url: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var TaskInput$;
(function (TaskInput$) {
    /** @deprecated use `TaskInput$inboundSchema` instead. */
    TaskInput$.inboundSchema = exports.TaskInput$inboundSchema;
    /** @deprecated use `TaskInput$outboundSchema` instead. */
    TaskInput$.outboundSchema = exports.TaskInput$outboundSchema;
})(TaskInput$ || (exports.TaskInput$ = TaskInput$ = {}));
function taskInputToJSON(taskInput) {
    return JSON.stringify(exports.TaskInput$outboundSchema.parse(taskInput));
}
function taskInputFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.TaskInput$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'TaskInput' from JSON`);
}
/** @internal */
exports.TaskStorage$inboundSchema = z.object({
    url: z.string().optional(),
});
/** @internal */
exports.TaskStorage$outboundSchema = z.object({
    url: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var TaskStorage$;
(function (TaskStorage$) {
    /** @deprecated use `TaskStorage$inboundSchema` instead. */
    TaskStorage$.inboundSchema = exports.TaskStorage$inboundSchema;
    /** @deprecated use `TaskStorage$outboundSchema` instead. */
    TaskStorage$.outboundSchema = exports.TaskStorage$outboundSchema;
})(TaskStorage$ || (exports.TaskStorage$ = TaskStorage$ = {}));
function taskStorageToJSON(taskStorage) {
    return JSON.stringify(exports.TaskStorage$outboundSchema.parse(taskStorage));
}
function taskStorageFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.TaskStorage$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'TaskStorage' from JSON`);
}
/** @internal */
exports.TaskHls$inboundSchema = z.object({
    path: z.string().optional(),
});
/** @internal */
exports.TaskHls$outboundSchema = z.object({
    path: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var TaskHls$;
(function (TaskHls$) {
    /** @deprecated use `TaskHls$inboundSchema` instead. */
    TaskHls$.inboundSchema = exports.TaskHls$inboundSchema;
    /** @deprecated use `TaskHls$outboundSchema` instead. */
    TaskHls$.outboundSchema = exports.TaskHls$outboundSchema;
})(TaskHls$ || (exports.TaskHls$ = TaskHls$ = {}));
function taskHlsToJSON(taskHls) {
    return JSON.stringify(exports.TaskHls$outboundSchema.parse(taskHls));
}
function taskHlsFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.TaskHls$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'TaskHls' from JSON`);
}
/** @internal */
exports.TaskMp4$inboundSchema = z.object({
    path: z.string().optional(),
});
/** @internal */
exports.TaskMp4$outboundSchema = z.object({
    path: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var TaskMp4$;
(function (TaskMp4$) {
    /** @deprecated use `TaskMp4$inboundSchema` instead. */
    TaskMp4$.inboundSchema = exports.TaskMp4$inboundSchema;
    /** @deprecated use `TaskMp4$outboundSchema` instead. */
    TaskMp4$.outboundSchema = exports.TaskMp4$outboundSchema;
})(TaskMp4$ || (exports.TaskMp4$ = TaskMp4$ = {}));
function taskMp4ToJSON(taskMp4) {
    return JSON.stringify(exports.TaskMp4$outboundSchema.parse(taskMp4));
}
function taskMp4FromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.TaskMp4$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'TaskMp4' from JSON`);
}
/** @internal */
exports.TaskOutputs$inboundSchema = z.object({
    hls: z.lazy(() => exports.TaskHls$inboundSchema).optional(),
    mp4: z.lazy(() => exports.TaskMp4$inboundSchema).optional(),
});
/** @internal */
exports.TaskOutputs$outboundSchema = z.object({
    hls: z.lazy(() => exports.TaskHls$outboundSchema).optional(),
    mp4: z.lazy(() => exports.TaskMp4$outboundSchema).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var TaskOutputs$;
(function (TaskOutputs$) {
    /** @deprecated use `TaskOutputs$inboundSchema` instead. */
    TaskOutputs$.inboundSchema = exports.TaskOutputs$inboundSchema;
    /** @deprecated use `TaskOutputs$outboundSchema` instead. */
    TaskOutputs$.outboundSchema = exports.TaskOutputs$outboundSchema;
})(TaskOutputs$ || (exports.TaskOutputs$ = TaskOutputs$ = {}));
function taskOutputsToJSON(taskOutputs) {
    return JSON.stringify(exports.TaskOutputs$outboundSchema.parse(taskOutputs));
}
function taskOutputsFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.TaskOutputs$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'TaskOutputs' from JSON`);
}
/** @internal */
exports.TranscodeFile$inboundSchema = z.object({
    input: z.lazy(() => exports.TaskInput$inboundSchema).optional(),
    storage: z.lazy(() => exports.TaskStorage$inboundSchema).optional(),
    outputs: z.lazy(() => exports.TaskOutputs$inboundSchema).optional(),
    profiles: z.array(transcodeprofile_js_1.TranscodeProfile$inboundSchema).optional(),
    targetSegmentSizeSecs: z.number().optional(),
    creatorId: inputcreatorid_js_1.InputCreatorId$inboundSchema.optional(),
    c2pa: z.boolean().optional(),
});
/** @internal */
exports.TranscodeFile$outboundSchema = z.object({
    input: z.lazy(() => exports.TaskInput$outboundSchema).optional(),
    storage: z.lazy(() => exports.TaskStorage$outboundSchema).optional(),
    outputs: z.lazy(() => exports.TaskOutputs$outboundSchema).optional(),
    profiles: z.array(transcodeprofile_js_1.TranscodeProfile$outboundSchema).optional(),
    targetSegmentSizeSecs: z.number().optional(),
    creatorId: inputcreatorid_js_1.InputCreatorId$outboundSchema.optional(),
    c2pa: z.boolean().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var TranscodeFile$;
(function (TranscodeFile$) {
    /** @deprecated use `TranscodeFile$inboundSchema` instead. */
    TranscodeFile$.inboundSchema = exports.TranscodeFile$inboundSchema;
    /** @deprecated use `TranscodeFile$outboundSchema` instead. */
    TranscodeFile$.outboundSchema = exports.TranscodeFile$outboundSchema;
})(TranscodeFile$ || (exports.TranscodeFile$ = TranscodeFile$ = {}));
function transcodeFileToJSON(transcodeFile) {
    return JSON.stringify(exports.TranscodeFile$outboundSchema.parse(transcodeFile));
}
function transcodeFileFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.TranscodeFile$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'TranscodeFile' from JSON`);
}
/** @internal */
exports.ClipStrategy$inboundSchema = z.object({
    startTime: z.number().optional(),
    endTime: z.number().optional(),
    playbackId: z.string().optional(),
});
/** @internal */
exports.ClipStrategy$outboundSchema = z.object({
    startTime: z.number().optional(),
    endTime: z.number().optional(),
    playbackId: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var ClipStrategy$;
(function (ClipStrategy$) {
    /** @deprecated use `ClipStrategy$inboundSchema` instead. */
    ClipStrategy$.inboundSchema = exports.ClipStrategy$inboundSchema;
    /** @deprecated use `ClipStrategy$outboundSchema` instead. */
    ClipStrategy$.outboundSchema = exports.ClipStrategy$outboundSchema;
})(ClipStrategy$ || (exports.ClipStrategy$ = ClipStrategy$ = {}));
function clipStrategyToJSON(clipStrategy) {
    return JSON.stringify(exports.ClipStrategy$outboundSchema.parse(clipStrategy));
}
function clipStrategyFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.ClipStrategy$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ClipStrategy' from JSON`);
}
/** @internal */
exports.CatalystPipelineStrategy$inboundSchema = z.nativeEnum(CatalystPipelineStrategy);
/** @internal */
exports.CatalystPipelineStrategy$outboundSchema = exports.CatalystPipelineStrategy$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var CatalystPipelineStrategy$;
(function (CatalystPipelineStrategy$) {
    /** @deprecated use `CatalystPipelineStrategy$inboundSchema` instead. */
    CatalystPipelineStrategy$.inboundSchema = exports.CatalystPipelineStrategy$inboundSchema;
    /** @deprecated use `CatalystPipelineStrategy$outboundSchema` instead. */
    CatalystPipelineStrategy$.outboundSchema = exports.CatalystPipelineStrategy$outboundSchema;
})(CatalystPipelineStrategy$ || (exports.CatalystPipelineStrategy$ = CatalystPipelineStrategy$ = {}));
/** @internal */
exports.Clip$inboundSchema = z
    .object({
    url: z.string().optional(),
    clipStrategy: z.lazy(() => exports.ClipStrategy$inboundSchema).optional(),
    catalystPipelineStrategy: exports.CatalystPipelineStrategy$inboundSchema.optional(),
    sessionId: z.string().optional(),
    inputId: z.string().optional(),
});
/** @internal */
exports.Clip$outboundSchema = z.object({
    url: z.string().optional(),
    clipStrategy: z.lazy(() => exports.ClipStrategy$outboundSchema).optional(),
    catalystPipelineStrategy: exports.CatalystPipelineStrategy$outboundSchema
        .optional(),
    sessionId: z.string().optional(),
    inputId: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var Clip$;
(function (Clip$) {
    /** @deprecated use `Clip$inboundSchema` instead. */
    Clip$.inboundSchema = exports.Clip$inboundSchema;
    /** @deprecated use `Clip$outboundSchema` instead. */
    Clip$.outboundSchema = exports.Clip$outboundSchema;
})(Clip$ || (exports.Clip$ = Clip$ = {}));
function clipToJSON(clip) {
    return JSON.stringify(exports.Clip$outboundSchema.parse(clip));
}
function clipFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.Clip$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Clip' from JSON`);
}
/** @internal */
exports.Params$inboundSchema = z
    .object({
    upload: z.lazy(() => exports.Upload$inboundSchema).optional(),
    export: exporttaskparams_js_1.ExportTaskParams$inboundSchema.optional(),
    exportData: z.lazy(() => exports.TaskExportData$inboundSchema).optional(),
    "transcode-file": z.lazy(() => exports.TranscodeFile$inboundSchema).optional(),
    clip: z.lazy(() => exports.Clip$inboundSchema).optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "transcode-file": "transcodeFile",
    });
});
/** @internal */
exports.Params$outboundSchema = z.object({
    upload: z.lazy(() => exports.Upload$outboundSchema).optional(),
    export: exporttaskparams_js_1.ExportTaskParams$outboundSchema.optional(),
    exportData: z.lazy(() => exports.TaskExportData$outboundSchema).optional(),
    transcodeFile: z.lazy(() => exports.TranscodeFile$outboundSchema).optional(),
    clip: z.lazy(() => exports.Clip$outboundSchema).optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        transcodeFile: "transcode-file",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var Params$;
(function (Params$) {
    /** @deprecated use `Params$inboundSchema` instead. */
    Params$.inboundSchema = exports.Params$inboundSchema;
    /** @deprecated use `Params$outboundSchema` instead. */
    Params$.outboundSchema = exports.Params$outboundSchema;
})(Params$ || (exports.Params$ = Params$ = {}));
function paramsToJSON(params) {
    return JSON.stringify(exports.Params$outboundSchema.parse(params));
}
function paramsFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.Params$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Params' from JSON`);
}
/** @internal */
exports.TaskPhase$inboundSchema = z
    .nativeEnum(TaskPhase);
/** @internal */
exports.TaskPhase$outboundSchema = exports.TaskPhase$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var TaskPhase$;
(function (TaskPhase$) {
    /** @deprecated use `TaskPhase$inboundSchema` instead. */
    TaskPhase$.inboundSchema = exports.TaskPhase$inboundSchema;
    /** @deprecated use `TaskPhase$outboundSchema` instead. */
    TaskPhase$.outboundSchema = exports.TaskPhase$outboundSchema;
})(TaskPhase$ || (exports.TaskPhase$ = TaskPhase$ = {}));
/** @internal */
exports.TaskStatus$inboundSchema = z.object({
    phase: exports.TaskPhase$inboundSchema,
    updatedAt: z.number(),
    progress: z.number().optional(),
    errorMessage: z.string().optional(),
    retries: z.number().optional(),
});
/** @internal */
exports.TaskStatus$outboundSchema = z.object({
    phase: exports.TaskPhase$outboundSchema,
    updatedAt: z.number(),
    progress: z.number().optional(),
    errorMessage: z.string().optional(),
    retries: z.number().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var TaskStatus$;
(function (TaskStatus$) {
    /** @deprecated use `TaskStatus$inboundSchema` instead. */
    TaskStatus$.inboundSchema = exports.TaskStatus$inboundSchema;
    /** @deprecated use `TaskStatus$outboundSchema` instead. */
    TaskStatus$.outboundSchema = exports.TaskStatus$outboundSchema;
})(TaskStatus$ || (exports.TaskStatus$ = TaskStatus$ = {}));
function taskStatusToJSON(taskStatus) {
    return JSON.stringify(exports.TaskStatus$outboundSchema.parse(taskStatus));
}
function taskStatusFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.TaskStatus$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'TaskStatus' from JSON`);
}
/** @internal */
exports.TaskUpload$inboundSchema = (0, schemas_js_1.collectExtraKeys)(z.object({
    assetSpec: asset_js_1.Asset$inboundSchema.optional(),
}).catchall(z.any()), "additionalProperties");
/** @internal */
exports.TaskUpload$outboundSchema = z.object({
    assetSpec: asset_js_1.Asset$outboundSchema.optional(),
    additionalProperties: z.record(z.any()),
}).transform((v) => {
    return {
        ...v.additionalProperties,
        ...(0, primitives_js_1.remap)(v, {
            additionalProperties: null,
        }),
    };
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var TaskUpload$;
(function (TaskUpload$) {
    /** @deprecated use `TaskUpload$inboundSchema` instead. */
    TaskUpload$.inboundSchema = exports.TaskUpload$inboundSchema;
    /** @deprecated use `TaskUpload$outboundSchema` instead. */
    TaskUpload$.outboundSchema = exports.TaskUpload$outboundSchema;
})(TaskUpload$ || (exports.TaskUpload$ = TaskUpload$ = {}));
function taskUploadToJSON(taskUpload) {
    return JSON.stringify(exports.TaskUpload$outboundSchema.parse(taskUpload));
}
function taskUploadFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.TaskUpload$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'TaskUpload' from JSON`);
}
/** @internal */
exports.TaskIpfs$inboundSchema = z.object({
    videoFileCid: z.string(),
    videoFileUrl: z.string().optional(),
    videoFileGatewayUrl: z.string().optional(),
    nftMetadataCid: z.string().optional(),
    nftMetadataUrl: z.string().optional(),
    nftMetadataGatewayUrl: z.string().optional(),
});
/** @internal */
exports.TaskIpfs$outboundSchema = z.object({
    videoFileCid: z.string(),
    videoFileUrl: z.string().optional(),
    videoFileGatewayUrl: z.string().optional(),
    nftMetadataCid: z.string().optional(),
    nftMetadataUrl: z.string().optional(),
    nftMetadataGatewayUrl: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var TaskIpfs$;
(function (TaskIpfs$) {
    /** @deprecated use `TaskIpfs$inboundSchema` instead. */
    TaskIpfs$.inboundSchema = exports.TaskIpfs$inboundSchema;
    /** @deprecated use `TaskIpfs$outboundSchema` instead. */
    TaskIpfs$.outboundSchema = exports.TaskIpfs$outboundSchema;
})(TaskIpfs$ || (exports.TaskIpfs$ = TaskIpfs$ = {}));
function taskIpfsToJSON(taskIpfs) {
    return JSON.stringify(exports.TaskIpfs$outboundSchema.parse(taskIpfs));
}
function taskIpfsFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.TaskIpfs$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'TaskIpfs' from JSON`);
}
/** @internal */
exports.Export$inboundSchema = z
    .object({
    ipfs: z.lazy(() => exports.TaskIpfs$inboundSchema).optional(),
});
/** @internal */
exports.Export$outboundSchema = z.object({
    ipfs: z.lazy(() => exports.TaskIpfs$outboundSchema).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var Export$;
(function (Export$) {
    /** @deprecated use `Export$inboundSchema` instead. */
    Export$.inboundSchema = exports.Export$inboundSchema;
    /** @deprecated use `Export$outboundSchema` instead. */
    Export$.outboundSchema = exports.Export$outboundSchema;
})(Export$ || (exports.Export$ = Export$ = {}));
function exportToJSON(value) {
    return JSON.stringify(exports.Export$outboundSchema.parse(value));
}
function exportFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.Export$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Export' from JSON`);
}
/** @internal */
exports.TaskSchemasIpfs$inboundSchema = z.object({
    cid: z.string(),
});
/** @internal */
exports.TaskSchemasIpfs$outboundSchema = z.object({
    cid: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var TaskSchemasIpfs$;
(function (TaskSchemasIpfs$) {
    /** @deprecated use `TaskSchemasIpfs$inboundSchema` instead. */
    TaskSchemasIpfs$.inboundSchema = exports.TaskSchemasIpfs$inboundSchema;
    /** @deprecated use `TaskSchemasIpfs$outboundSchema` instead. */
    TaskSchemasIpfs$.outboundSchema = exports.TaskSchemasIpfs$outboundSchema;
})(TaskSchemasIpfs$ || (exports.TaskSchemasIpfs$ = TaskSchemasIpfs$ = {}));
function taskSchemasIpfsToJSON(taskSchemasIpfs) {
    return JSON.stringify(exports.TaskSchemasIpfs$outboundSchema.parse(taskSchemasIpfs));
}
function taskSchemasIpfsFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.TaskSchemasIpfs$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'TaskSchemasIpfs' from JSON`);
}
/** @internal */
exports.ExportData$inboundSchema = z.object({
    ipfs: z.lazy(() => exports.TaskSchemasIpfs$inboundSchema).optional(),
});
/** @internal */
exports.ExportData$outboundSchema = z.object({
    ipfs: z.lazy(() => exports.TaskSchemasIpfs$outboundSchema).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var ExportData$;
(function (ExportData$) {
    /** @deprecated use `ExportData$inboundSchema` instead. */
    ExportData$.inboundSchema = exports.ExportData$inboundSchema;
    /** @deprecated use `ExportData$outboundSchema` instead. */
    ExportData$.outboundSchema = exports.ExportData$outboundSchema;
})(ExportData$ || (exports.ExportData$ = ExportData$ = {}));
function exportDataToJSON(exportData) {
    return JSON.stringify(exports.ExportData$outboundSchema.parse(exportData));
}
function exportDataFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.ExportData$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ExportData' from JSON`);
}
/** @internal */
exports.Output$inboundSchema = z
    .object({
    upload: z.lazy(() => exports.TaskUpload$inboundSchema).optional(),
    export: z.lazy(() => exports.Export$inboundSchema).optional(),
    exportData: z.lazy(() => exports.ExportData$inboundSchema).optional(),
});
/** @internal */
exports.Output$outboundSchema = z.object({
    upload: z.lazy(() => exports.TaskUpload$outboundSchema).optional(),
    export: z.lazy(() => exports.Export$outboundSchema).optional(),
    exportData: z.lazy(() => exports.ExportData$outboundSchema).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var Output$;
(function (Output$) {
    /** @deprecated use `Output$inboundSchema` instead. */
    Output$.inboundSchema = exports.Output$inboundSchema;
    /** @deprecated use `Output$outboundSchema` instead. */
    Output$.outboundSchema = exports.Output$outboundSchema;
})(Output$ || (exports.Output$ = Output$ = {}));
function outputToJSON(output) {
    return JSON.stringify(exports.Output$outboundSchema.parse(output));
}
function outputFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.Output$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Output' from JSON`);
}
/** @internal */
exports.Task$inboundSchema = z
    .object({
    id: z.string().optional(),
    type: exports.TaskType$inboundSchema.optional(),
    createdAt: z.number().optional(),
    scheduledAt: z.number().optional(),
    inputAssetId: z.string().optional(),
    outputAssetId: z.string().optional(),
    projectId: z.string().optional(),
    requesterId: z.string().optional(),
    params: z.lazy(() => exports.Params$inboundSchema).optional(),
    status: z.lazy(() => exports.TaskStatus$inboundSchema).optional(),
    output: z.lazy(() => exports.Output$inboundSchema).optional(),
});
/** @internal */
exports.Task$outboundSchema = z.object({
    id: z.string().optional(),
    type: exports.TaskType$outboundSchema.optional(),
    createdAt: z.number().optional(),
    scheduledAt: z.number().optional(),
    inputAssetId: z.string().optional(),
    outputAssetId: z.string().optional(),
    projectId: z.string().optional(),
    requesterId: z.string().optional(),
    params: z.lazy(() => exports.Params$outboundSchema).optional(),
    status: z.lazy(() => exports.TaskStatus$outboundSchema).optional(),
    output: z.lazy(() => exports.Output$outboundSchema).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var Task$;
(function (Task$) {
    /** @deprecated use `Task$inboundSchema` instead. */
    Task$.inboundSchema = exports.Task$inboundSchema;
    /** @deprecated use `Task$outboundSchema` instead. */
    Task$.outboundSchema = exports.Task$outboundSchema;
})(Task$ || (exports.Task$ = Task$ = {}));
function taskToJSON(task) {
    return JSON.stringify(exports.Task$outboundSchema.parse(task));
}
function taskFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.Task$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Task' from JSON`);
}
//# sourceMappingURL=task.js.map