import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import { Chunk, Chunk$Outbound } from "./chunk.js";
/**
 * Response model for text generation.
 */
export type TextResponse = {
    /**
     * The generated text.
     */
    text: string;
    /**
     * The generated text chunks.
     */
    chunks: Array<Chunk>;
};
/** @internal */
export declare const TextResponse$inboundSchema: z.ZodType<TextResponse, z.ZodTypeDef, unknown>;
/** @internal */
export type TextResponse$Outbound = {
    text: string;
    chunks: Array<Chunk$Outbound>;
};
/** @internal */
export declare const TextResponse$outboundSchema: z.ZodType<TextResponse$Outbound, z.ZodTypeDef, TextResponse>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace TextResponse$ {
    /** @deprecated use `TextResponse$inboundSchema` instead. */
    const inboundSchema: z.ZodType<TextResponse, z.ZodTypeDef, unknown>;
    /** @deprecated use `TextResponse$outboundSchema` instead. */
    const outboundSchema: z.ZodType<TextResponse$Outbound, z.ZodTypeDef, TextResponse>;
    /** @deprecated use `TextResponse$Outbound` instead. */
    type Outbound = TextResponse$Outbound;
}
export declare function textResponseToJSON(textResponse: TextResponse): string;
export declare function textResponseFromJSON(jsonString: string): SafeParseResult<TextResponse, SDKValidationError>;
//# sourceMappingURL=textresponse.d.ts.map