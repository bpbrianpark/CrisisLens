import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
export type TextToImageParams = {
    /**
     * Hugging Face model ID used for image generation.
     */
    modelId?: string | undefined;
    /**
     * A LoRA (Low-Rank Adaptation) model and its corresponding weight for image generation. Example: { "latent-consistency/lcm-lora-sdxl": 1.0, "nerijs/pixel-art-xl": 1.2}.
     */
    loras?: string | undefined;
    /**
     * Text prompt(s) to guide image generation. Separate multiple prompts with '|' if supported by the model.
     */
    prompt: string;
    /**
     * The height in pixels of the generated image.
     */
    height?: number | undefined;
    /**
     * The width in pixels of the generated image.
     */
    width?: number | undefined;
    /**
     * Encourages model to generate images closely linked to the text prompt (higher values may reduce image quality).
     */
    guidanceScale?: number | undefined;
    /**
     * Text prompt(s) to guide what to exclude from image generation. Ignored if guidance_scale < 1.
     */
    negativePrompt?: string | undefined;
    /**
     * Perform a safety check to estimate if generated images could be offensive or harmful.
     */
    safetyCheck?: boolean | undefined;
    /**
     * Seed for random number generation.
     */
    seed?: number | undefined;
    /**
     * Number of denoising steps. More steps usually lead to higher quality images but slower inference. Modulated by strength.
     */
    numInferenceSteps?: number | undefined;
    /**
     * Number of images to generate per prompt.
     */
    numImagesPerPrompt?: number | undefined;
};
/** @internal */
export declare const TextToImageParams$inboundSchema: z.ZodType<TextToImageParams, z.ZodTypeDef, unknown>;
/** @internal */
export type TextToImageParams$Outbound = {
    model_id: string;
    loras: string;
    prompt: string;
    height: number;
    width: number;
    guidance_scale: number;
    negative_prompt: string;
    safety_check: boolean;
    seed?: number | undefined;
    num_inference_steps: number;
    num_images_per_prompt: number;
};
/** @internal */
export declare const TextToImageParams$outboundSchema: z.ZodType<TextToImageParams$Outbound, z.ZodTypeDef, TextToImageParams>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace TextToImageParams$ {
    /** @deprecated use `TextToImageParams$inboundSchema` instead. */
    const inboundSchema: z.ZodType<TextToImageParams, z.ZodTypeDef, unknown>;
    /** @deprecated use `TextToImageParams$outboundSchema` instead. */
    const outboundSchema: z.ZodType<TextToImageParams$Outbound, z.ZodTypeDef, TextToImageParams>;
    /** @deprecated use `TextToImageParams$Outbound` instead. */
    type Outbound = TextToImageParams$Outbound;
}
export declare function textToImageParamsToJSON(textToImageParams: TextToImageParams): string;
export declare function textToImageParamsFromJSON(jsonString: string): SafeParseResult<TextToImageParams, SDKValidationError>;
//# sourceMappingURL=texttoimageparams.d.ts.map