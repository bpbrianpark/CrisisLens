"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TextToImageParams$ = exports.TextToImageParams$outboundSchema = exports.TextToImageParams$inboundSchema = void 0;
exports.textToImageParamsToJSON = textToImageParamsToJSON;
exports.textToImageParamsFromJSON = textToImageParamsFromJSON;
const z = __importStar(require("zod"));
const primitives_js_1 = require("../../lib/primitives.js");
const schemas_js_1 = require("../../lib/schemas.js");
/** @internal */
exports.TextToImageParams$inboundSchema = z.object({
    model_id: z.string().default("SG161222/RealVisXL_V4.0_Lightning"),
    loras: z.string().default(""),
    prompt: z.string(),
    height: z.number().int().default(576),
    width: z.number().int().default(1024),
    guidance_scale: z.number().default(7.5),
    negative_prompt: z.string().default(""),
    safety_check: z.boolean().default(true),
    seed: z.number().int().optional(),
    num_inference_steps: z.number().int().default(50),
    num_images_per_prompt: z.number().int().default(1),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "model_id": "modelId",
        "guidance_scale": "guidanceScale",
        "negative_prompt": "negativePrompt",
        "safety_check": "safetyCheck",
        "num_inference_steps": "numInferenceSteps",
        "num_images_per_prompt": "numImagesPerPrompt",
    });
});
/** @internal */
exports.TextToImageParams$outboundSchema = z.object({
    modelId: z.string().default("SG161222/RealVisXL_V4.0_Lightning"),
    loras: z.string().default(""),
    prompt: z.string(),
    height: z.number().int().default(576),
    width: z.number().int().default(1024),
    guidanceScale: z.number().default(7.5),
    negativePrompt: z.string().default(""),
    safetyCheck: z.boolean().default(true),
    seed: z.number().int().optional(),
    numInferenceSteps: z.number().int().default(50),
    numImagesPerPrompt: z.number().int().default(1),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        modelId: "model_id",
        guidanceScale: "guidance_scale",
        negativePrompt: "negative_prompt",
        safetyCheck: "safety_check",
        numInferenceSteps: "num_inference_steps",
        numImagesPerPrompt: "num_images_per_prompt",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var TextToImageParams$;
(function (TextToImageParams$) {
    /** @deprecated use `TextToImageParams$inboundSchema` instead. */
    TextToImageParams$.inboundSchema = exports.TextToImageParams$inboundSchema;
    /** @deprecated use `TextToImageParams$outboundSchema` instead. */
    TextToImageParams$.outboundSchema = exports.TextToImageParams$outboundSchema;
})(TextToImageParams$ || (exports.TextToImageParams$ = TextToImageParams$ = {}));
function textToImageParamsToJSON(textToImageParams) {
    return JSON.stringify(exports.TextToImageParams$outboundSchema.parse(textToImageParams));
}
function textToImageParamsFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.TextToImageParams$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'TextToImageParams' from JSON`);
}
//# sourceMappingURL=texttoimageparams.js.map