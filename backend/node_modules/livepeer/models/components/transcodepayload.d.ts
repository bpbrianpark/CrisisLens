import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import { InputCreatorId, InputCreatorId$Outbound } from "./inputcreatorid.js";
import { TranscodeProfile, TranscodeProfile$Outbound } from "./transcodeprofile.js";
/**
 * Type of service. This is optional and defaults to `url` if
 *
 * @remarks
 * ŚURL field is provided.
 */
export declare enum TranscodePayloadType {
    S3 = "s3"
}
/**
 * Credentials for the private input video storage
 */
export type Credentials = {
    /**
     * Access Key ID
     */
    accessKeyId: string;
    /**
     * Secret Access Key
     */
    secretAccessKey: string;
};
/**
 * S3-like storage input video
 */
export type TranscodePayload2 = {
    /**
     * Type of service. This is optional and defaults to `url` if
     *
     * @remarks
     * ŚURL field is provided.
     */
    type: TranscodePayloadType;
    /**
     * Service endpoint URL (AWS S3 endpoint list: https://docs.aws.amazon.com/general/latest/gr/s3.html, GCP S3 endpoint: https://storage.googleapis.com, Storj: https://gateway.storjshare.io)
     */
    endpoint: string;
    /**
     * Bucket with input file
     */
    bucket: string;
    /**
     * Path to the input file inside the bucket
     */
    path: string;
    /**
     * Credentials for the private input video storage
     */
    credentials: Credentials;
};
/**
 * URL input video
 */
export type TranscodePayload1 = {
    /**
     * URL of the video to transcode
     */
    url: string;
};
export type Input = TranscodePayload1 | TranscodePayload2;
/**
 * Type of service used for output files
 */
export declare enum TranscodePayloadSchemasStorageType {
    Web3Storage = "web3.storage"
}
/**
 * Delegation proof for Livepeer to be able to upload to
 *
 * @remarks
 * web3.storage
 */
export type TranscodePayloadSchemasCredentials = {
    /**
     * Base64 encoded UCAN delegation proof
     */
    proof: string;
};
/**
 * Storage for the output files
 */
export type TranscodePayloadSchemas2 = {
    /**
     * Type of service used for output files
     */
    type: TranscodePayloadSchemasStorageType;
    /**
     * Delegation proof for Livepeer to be able to upload to
     *
     * @remarks
     * web3.storage
     */
    credentials: TranscodePayloadSchemasCredentials;
};
/**
 * Type of service used for output files
 */
export declare enum TranscodePayloadSchemasType {
    S3 = "s3"
}
/**
 * Credentials for the output video storage
 */
export type TranscodePayloadCredentials = {
    /**
     * Access Key ID
     */
    accessKeyId: string;
    /**
     * Secret Access Key
     */
    secretAccessKey: string;
};
/**
 * Storage for the output files
 */
export type TranscodePayloadSchemas1 = {
    /**
     * Type of service used for output files
     */
    type: TranscodePayloadSchemasType;
    /**
     * Service endpoint URL (AWS S3 endpoint list: https://docs.aws.amazon.com/general/latest/gr/s3.html, GCP S3 endpoint: https://storage.googleapis.com, Storj: https://gateway.storjshare.io)
     */
    endpoint: string;
    /**
     * Bucket with output files
     */
    bucket: string;
    /**
     * Credentials for the output video storage
     */
    credentials: TranscodePayloadCredentials;
};
export type TranscodePayloadStorage = TranscodePayloadSchemas2 | TranscodePayloadSchemas1;
/**
 * HLS output format
 */
export type Hls = {
    /**
     * Path for the HLS output
     */
    path: string;
};
/**
 * MP4 output format
 */
export type Mp4 = {
    /**
     * Path for the MP4 output
     */
    path: string;
};
/**
 * FMP4 output format
 */
export type Fmp4 = {
    /**
     * Path for the FMP4 output
     */
    path: string;
};
/**
 * Output formats
 */
export type Outputs = {
    /**
     * HLS output format
     */
    hls?: Hls | undefined;
    /**
     * MP4 output format
     */
    mp4?: Mp4 | undefined;
    /**
     * FMP4 output format
     */
    fmp4?: Fmp4 | undefined;
};
export type TranscodePayload = {
    input: TranscodePayload1 | TranscodePayload2;
    storage: TranscodePayloadSchemas2 | TranscodePayloadSchemas1;
    /**
     * Output formats
     */
    outputs: Outputs;
    profiles?: Array<TranscodeProfile> | undefined;
    /**
     * How many seconds the duration of each output segment should be
     */
    targetSegmentSizeSecs?: number | undefined;
    creatorId?: InputCreatorId | undefined;
    /**
     * Decides if the output video should include C2PA signature
     */
    c2pa?: boolean | undefined;
};
/** @internal */
export declare const TranscodePayloadType$inboundSchema: z.ZodNativeEnum<typeof TranscodePayloadType>;
/** @internal */
export declare const TranscodePayloadType$outboundSchema: z.ZodNativeEnum<typeof TranscodePayloadType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace TranscodePayloadType$ {
    /** @deprecated use `TranscodePayloadType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<typeof TranscodePayloadType>;
    /** @deprecated use `TranscodePayloadType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<typeof TranscodePayloadType>;
}
/** @internal */
export declare const Credentials$inboundSchema: z.ZodType<Credentials, z.ZodTypeDef, unknown>;
/** @internal */
export type Credentials$Outbound = {
    accessKeyId: string;
    secretAccessKey: string;
};
/** @internal */
export declare const Credentials$outboundSchema: z.ZodType<Credentials$Outbound, z.ZodTypeDef, Credentials>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Credentials$ {
    /** @deprecated use `Credentials$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Credentials, z.ZodTypeDef, unknown>;
    /** @deprecated use `Credentials$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Credentials$Outbound, z.ZodTypeDef, Credentials>;
    /** @deprecated use `Credentials$Outbound` instead. */
    type Outbound = Credentials$Outbound;
}
export declare function credentialsToJSON(credentials: Credentials): string;
export declare function credentialsFromJSON(jsonString: string): SafeParseResult<Credentials, SDKValidationError>;
/** @internal */
export declare const TranscodePayload2$inboundSchema: z.ZodType<TranscodePayload2, z.ZodTypeDef, unknown>;
/** @internal */
export type TranscodePayload2$Outbound = {
    type: string;
    endpoint: string;
    bucket: string;
    path: string;
    credentials: Credentials$Outbound;
};
/** @internal */
export declare const TranscodePayload2$outboundSchema: z.ZodType<TranscodePayload2$Outbound, z.ZodTypeDef, TranscodePayload2>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace TranscodePayload2$ {
    /** @deprecated use `TranscodePayload2$inboundSchema` instead. */
    const inboundSchema: z.ZodType<TranscodePayload2, z.ZodTypeDef, unknown>;
    /** @deprecated use `TranscodePayload2$outboundSchema` instead. */
    const outboundSchema: z.ZodType<TranscodePayload2$Outbound, z.ZodTypeDef, TranscodePayload2>;
    /** @deprecated use `TranscodePayload2$Outbound` instead. */
    type Outbound = TranscodePayload2$Outbound;
}
export declare function transcodePayload2ToJSON(transcodePayload2: TranscodePayload2): string;
export declare function transcodePayload2FromJSON(jsonString: string): SafeParseResult<TranscodePayload2, SDKValidationError>;
/** @internal */
export declare const TranscodePayload1$inboundSchema: z.ZodType<TranscodePayload1, z.ZodTypeDef, unknown>;
/** @internal */
export type TranscodePayload1$Outbound = {
    url: string;
};
/** @internal */
export declare const TranscodePayload1$outboundSchema: z.ZodType<TranscodePayload1$Outbound, z.ZodTypeDef, TranscodePayload1>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace TranscodePayload1$ {
    /** @deprecated use `TranscodePayload1$inboundSchema` instead. */
    const inboundSchema: z.ZodType<TranscodePayload1, z.ZodTypeDef, unknown>;
    /** @deprecated use `TranscodePayload1$outboundSchema` instead. */
    const outboundSchema: z.ZodType<TranscodePayload1$Outbound, z.ZodTypeDef, TranscodePayload1>;
    /** @deprecated use `TranscodePayload1$Outbound` instead. */
    type Outbound = TranscodePayload1$Outbound;
}
export declare function transcodePayload1ToJSON(transcodePayload1: TranscodePayload1): string;
export declare function transcodePayload1FromJSON(jsonString: string): SafeParseResult<TranscodePayload1, SDKValidationError>;
/** @internal */
export declare const Input$inboundSchema: z.ZodType<Input, z.ZodTypeDef, unknown>;
/** @internal */
export type Input$Outbound = TranscodePayload1$Outbound | TranscodePayload2$Outbound;
/** @internal */
export declare const Input$outboundSchema: z.ZodType<Input$Outbound, z.ZodTypeDef, Input>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Input$ {
    /** @deprecated use `Input$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Input, z.ZodTypeDef, unknown>;
    /** @deprecated use `Input$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Input$Outbound, z.ZodTypeDef, Input>;
    /** @deprecated use `Input$Outbound` instead. */
    type Outbound = Input$Outbound;
}
export declare function inputToJSON(input: Input): string;
export declare function inputFromJSON(jsonString: string): SafeParseResult<Input, SDKValidationError>;
/** @internal */
export declare const TranscodePayloadSchemasStorageType$inboundSchema: z.ZodNativeEnum<typeof TranscodePayloadSchemasStorageType>;
/** @internal */
export declare const TranscodePayloadSchemasStorageType$outboundSchema: z.ZodNativeEnum<typeof TranscodePayloadSchemasStorageType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace TranscodePayloadSchemasStorageType$ {
    /** @deprecated use `TranscodePayloadSchemasStorageType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<typeof TranscodePayloadSchemasStorageType>;
    /** @deprecated use `TranscodePayloadSchemasStorageType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<typeof TranscodePayloadSchemasStorageType>;
}
/** @internal */
export declare const TranscodePayloadSchemasCredentials$inboundSchema: z.ZodType<TranscodePayloadSchemasCredentials, z.ZodTypeDef, unknown>;
/** @internal */
export type TranscodePayloadSchemasCredentials$Outbound = {
    proof: string;
};
/** @internal */
export declare const TranscodePayloadSchemasCredentials$outboundSchema: z.ZodType<TranscodePayloadSchemasCredentials$Outbound, z.ZodTypeDef, TranscodePayloadSchemasCredentials>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace TranscodePayloadSchemasCredentials$ {
    /** @deprecated use `TranscodePayloadSchemasCredentials$inboundSchema` instead. */
    const inboundSchema: z.ZodType<TranscodePayloadSchemasCredentials, z.ZodTypeDef, unknown>;
    /** @deprecated use `TranscodePayloadSchemasCredentials$outboundSchema` instead. */
    const outboundSchema: z.ZodType<TranscodePayloadSchemasCredentials$Outbound, z.ZodTypeDef, TranscodePayloadSchemasCredentials>;
    /** @deprecated use `TranscodePayloadSchemasCredentials$Outbound` instead. */
    type Outbound = TranscodePayloadSchemasCredentials$Outbound;
}
export declare function transcodePayloadSchemasCredentialsToJSON(transcodePayloadSchemasCredentials: TranscodePayloadSchemasCredentials): string;
export declare function transcodePayloadSchemasCredentialsFromJSON(jsonString: string): SafeParseResult<TranscodePayloadSchemasCredentials, SDKValidationError>;
/** @internal */
export declare const TranscodePayloadSchemas2$inboundSchema: z.ZodType<TranscodePayloadSchemas2, z.ZodTypeDef, unknown>;
/** @internal */
export type TranscodePayloadSchemas2$Outbound = {
    type: string;
    credentials: TranscodePayloadSchemasCredentials$Outbound;
};
/** @internal */
export declare const TranscodePayloadSchemas2$outboundSchema: z.ZodType<TranscodePayloadSchemas2$Outbound, z.ZodTypeDef, TranscodePayloadSchemas2>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace TranscodePayloadSchemas2$ {
    /** @deprecated use `TranscodePayloadSchemas2$inboundSchema` instead. */
    const inboundSchema: z.ZodType<TranscodePayloadSchemas2, z.ZodTypeDef, unknown>;
    /** @deprecated use `TranscodePayloadSchemas2$outboundSchema` instead. */
    const outboundSchema: z.ZodType<TranscodePayloadSchemas2$Outbound, z.ZodTypeDef, TranscodePayloadSchemas2>;
    /** @deprecated use `TranscodePayloadSchemas2$Outbound` instead. */
    type Outbound = TranscodePayloadSchemas2$Outbound;
}
export declare function transcodePayloadSchemas2ToJSON(transcodePayloadSchemas2: TranscodePayloadSchemas2): string;
export declare function transcodePayloadSchemas2FromJSON(jsonString: string): SafeParseResult<TranscodePayloadSchemas2, SDKValidationError>;
/** @internal */
export declare const TranscodePayloadSchemasType$inboundSchema: z.ZodNativeEnum<typeof TranscodePayloadSchemasType>;
/** @internal */
export declare const TranscodePayloadSchemasType$outboundSchema: z.ZodNativeEnum<typeof TranscodePayloadSchemasType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace TranscodePayloadSchemasType$ {
    /** @deprecated use `TranscodePayloadSchemasType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<typeof TranscodePayloadSchemasType>;
    /** @deprecated use `TranscodePayloadSchemasType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<typeof TranscodePayloadSchemasType>;
}
/** @internal */
export declare const TranscodePayloadCredentials$inboundSchema: z.ZodType<TranscodePayloadCredentials, z.ZodTypeDef, unknown>;
/** @internal */
export type TranscodePayloadCredentials$Outbound = {
    accessKeyId: string;
    secretAccessKey: string;
};
/** @internal */
export declare const TranscodePayloadCredentials$outboundSchema: z.ZodType<TranscodePayloadCredentials$Outbound, z.ZodTypeDef, TranscodePayloadCredentials>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace TranscodePayloadCredentials$ {
    /** @deprecated use `TranscodePayloadCredentials$inboundSchema` instead. */
    const inboundSchema: z.ZodType<TranscodePayloadCredentials, z.ZodTypeDef, unknown>;
    /** @deprecated use `TranscodePayloadCredentials$outboundSchema` instead. */
    const outboundSchema: z.ZodType<TranscodePayloadCredentials$Outbound, z.ZodTypeDef, TranscodePayloadCredentials>;
    /** @deprecated use `TranscodePayloadCredentials$Outbound` instead. */
    type Outbound = TranscodePayloadCredentials$Outbound;
}
export declare function transcodePayloadCredentialsToJSON(transcodePayloadCredentials: TranscodePayloadCredentials): string;
export declare function transcodePayloadCredentialsFromJSON(jsonString: string): SafeParseResult<TranscodePayloadCredentials, SDKValidationError>;
/** @internal */
export declare const TranscodePayloadSchemas1$inboundSchema: z.ZodType<TranscodePayloadSchemas1, z.ZodTypeDef, unknown>;
/** @internal */
export type TranscodePayloadSchemas1$Outbound = {
    type: string;
    endpoint: string;
    bucket: string;
    credentials: TranscodePayloadCredentials$Outbound;
};
/** @internal */
export declare const TranscodePayloadSchemas1$outboundSchema: z.ZodType<TranscodePayloadSchemas1$Outbound, z.ZodTypeDef, TranscodePayloadSchemas1>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace TranscodePayloadSchemas1$ {
    /** @deprecated use `TranscodePayloadSchemas1$inboundSchema` instead. */
    const inboundSchema: z.ZodType<TranscodePayloadSchemas1, z.ZodTypeDef, unknown>;
    /** @deprecated use `TranscodePayloadSchemas1$outboundSchema` instead. */
    const outboundSchema: z.ZodType<TranscodePayloadSchemas1$Outbound, z.ZodTypeDef, TranscodePayloadSchemas1>;
    /** @deprecated use `TranscodePayloadSchemas1$Outbound` instead. */
    type Outbound = TranscodePayloadSchemas1$Outbound;
}
export declare function transcodePayloadSchemas1ToJSON(transcodePayloadSchemas1: TranscodePayloadSchemas1): string;
export declare function transcodePayloadSchemas1FromJSON(jsonString: string): SafeParseResult<TranscodePayloadSchemas1, SDKValidationError>;
/** @internal */
export declare const TranscodePayloadStorage$inboundSchema: z.ZodType<TranscodePayloadStorage, z.ZodTypeDef, unknown>;
/** @internal */
export type TranscodePayloadStorage$Outbound = TranscodePayloadSchemas2$Outbound | TranscodePayloadSchemas1$Outbound;
/** @internal */
export declare const TranscodePayloadStorage$outboundSchema: z.ZodType<TranscodePayloadStorage$Outbound, z.ZodTypeDef, TranscodePayloadStorage>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace TranscodePayloadStorage$ {
    /** @deprecated use `TranscodePayloadStorage$inboundSchema` instead. */
    const inboundSchema: z.ZodType<TranscodePayloadStorage, z.ZodTypeDef, unknown>;
    /** @deprecated use `TranscodePayloadStorage$outboundSchema` instead. */
    const outboundSchema: z.ZodType<TranscodePayloadStorage$Outbound, z.ZodTypeDef, TranscodePayloadStorage>;
    /** @deprecated use `TranscodePayloadStorage$Outbound` instead. */
    type Outbound = TranscodePayloadStorage$Outbound;
}
export declare function transcodePayloadStorageToJSON(transcodePayloadStorage: TranscodePayloadStorage): string;
export declare function transcodePayloadStorageFromJSON(jsonString: string): SafeParseResult<TranscodePayloadStorage, SDKValidationError>;
/** @internal */
export declare const Hls$inboundSchema: z.ZodType<Hls, z.ZodTypeDef, unknown>;
/** @internal */
export type Hls$Outbound = {
    path: string;
};
/** @internal */
export declare const Hls$outboundSchema: z.ZodType<Hls$Outbound, z.ZodTypeDef, Hls>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Hls$ {
    /** @deprecated use `Hls$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Hls, z.ZodTypeDef, unknown>;
    /** @deprecated use `Hls$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Hls$Outbound, z.ZodTypeDef, Hls>;
    /** @deprecated use `Hls$Outbound` instead. */
    type Outbound = Hls$Outbound;
}
export declare function hlsToJSON(hls: Hls): string;
export declare function hlsFromJSON(jsonString: string): SafeParseResult<Hls, SDKValidationError>;
/** @internal */
export declare const Mp4$inboundSchema: z.ZodType<Mp4, z.ZodTypeDef, unknown>;
/** @internal */
export type Mp4$Outbound = {
    path: string;
};
/** @internal */
export declare const Mp4$outboundSchema: z.ZodType<Mp4$Outbound, z.ZodTypeDef, Mp4>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Mp4$ {
    /** @deprecated use `Mp4$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Mp4, z.ZodTypeDef, unknown>;
    /** @deprecated use `Mp4$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Mp4$Outbound, z.ZodTypeDef, Mp4>;
    /** @deprecated use `Mp4$Outbound` instead. */
    type Outbound = Mp4$Outbound;
}
export declare function mp4ToJSON(mp4: Mp4): string;
export declare function mp4FromJSON(jsonString: string): SafeParseResult<Mp4, SDKValidationError>;
/** @internal */
export declare const Fmp4$inboundSchema: z.ZodType<Fmp4, z.ZodTypeDef, unknown>;
/** @internal */
export type Fmp4$Outbound = {
    path: string;
};
/** @internal */
export declare const Fmp4$outboundSchema: z.ZodType<Fmp4$Outbound, z.ZodTypeDef, Fmp4>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Fmp4$ {
    /** @deprecated use `Fmp4$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Fmp4, z.ZodTypeDef, unknown>;
    /** @deprecated use `Fmp4$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Fmp4$Outbound, z.ZodTypeDef, Fmp4>;
    /** @deprecated use `Fmp4$Outbound` instead. */
    type Outbound = Fmp4$Outbound;
}
export declare function fmp4ToJSON(fmp4: Fmp4): string;
export declare function fmp4FromJSON(jsonString: string): SafeParseResult<Fmp4, SDKValidationError>;
/** @internal */
export declare const Outputs$inboundSchema: z.ZodType<Outputs, z.ZodTypeDef, unknown>;
/** @internal */
export type Outputs$Outbound = {
    hls?: Hls$Outbound | undefined;
    mp4?: Mp4$Outbound | undefined;
    fmp4?: Fmp4$Outbound | undefined;
};
/** @internal */
export declare const Outputs$outboundSchema: z.ZodType<Outputs$Outbound, z.ZodTypeDef, Outputs>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Outputs$ {
    /** @deprecated use `Outputs$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Outputs, z.ZodTypeDef, unknown>;
    /** @deprecated use `Outputs$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Outputs$Outbound, z.ZodTypeDef, Outputs>;
    /** @deprecated use `Outputs$Outbound` instead. */
    type Outbound = Outputs$Outbound;
}
export declare function outputsToJSON(outputs: Outputs): string;
export declare function outputsFromJSON(jsonString: string): SafeParseResult<Outputs, SDKValidationError>;
/** @internal */
export declare const TranscodePayload$inboundSchema: z.ZodType<TranscodePayload, z.ZodTypeDef, unknown>;
/** @internal */
export type TranscodePayload$Outbound = {
    input: TranscodePayload1$Outbound | TranscodePayload2$Outbound;
    storage: TranscodePayloadSchemas2$Outbound | TranscodePayloadSchemas1$Outbound;
    outputs: Outputs$Outbound;
    profiles?: Array<TranscodeProfile$Outbound> | undefined;
    targetSegmentSizeSecs?: number | undefined;
    creatorId?: InputCreatorId$Outbound | undefined;
    c2pa?: boolean | undefined;
};
/** @internal */
export declare const TranscodePayload$outboundSchema: z.ZodType<TranscodePayload$Outbound, z.ZodTypeDef, TranscodePayload>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace TranscodePayload$ {
    /** @deprecated use `TranscodePayload$inboundSchema` instead. */
    const inboundSchema: z.ZodType<TranscodePayload, z.ZodTypeDef, unknown>;
    /** @deprecated use `TranscodePayload$outboundSchema` instead. */
    const outboundSchema: z.ZodType<TranscodePayload$Outbound, z.ZodTypeDef, TranscodePayload>;
    /** @deprecated use `TranscodePayload$Outbound` instead. */
    type Outbound = TranscodePayload$Outbound;
}
export declare function transcodePayloadToJSON(transcodePayload: TranscodePayload): string;
export declare function transcodePayloadFromJSON(jsonString: string): SafeParseResult<TranscodePayload, SDKValidationError>;
//# sourceMappingURL=transcodepayload.d.ts.map