"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Outputs$outboundSchema = exports.Outputs$inboundSchema = exports.Fmp4$ = exports.Fmp4$outboundSchema = exports.Fmp4$inboundSchema = exports.Mp4$ = exports.Mp4$outboundSchema = exports.Mp4$inboundSchema = exports.Hls$ = exports.Hls$outboundSchema = exports.Hls$inboundSchema = exports.TranscodePayloadStorage$ = exports.TranscodePayloadStorage$outboundSchema = exports.TranscodePayloadStorage$inboundSchema = exports.TranscodePayloadSchemas1$ = exports.TranscodePayloadSchemas1$outboundSchema = exports.TranscodePayloadSchemas1$inboundSchema = exports.TranscodePayloadCredentials$ = exports.TranscodePayloadCredentials$outboundSchema = exports.TranscodePayloadCredentials$inboundSchema = exports.TranscodePayloadSchemasType$ = exports.TranscodePayloadSchemasType$outboundSchema = exports.TranscodePayloadSchemasType$inboundSchema = exports.TranscodePayloadSchemas2$ = exports.TranscodePayloadSchemas2$outboundSchema = exports.TranscodePayloadSchemas2$inboundSchema = exports.TranscodePayloadSchemasCredentials$ = exports.TranscodePayloadSchemasCredentials$outboundSchema = exports.TranscodePayloadSchemasCredentials$inboundSchema = exports.TranscodePayloadSchemasStorageType$ = exports.TranscodePayloadSchemasStorageType$outboundSchema = exports.TranscodePayloadSchemasStorageType$inboundSchema = exports.Input$ = exports.Input$outboundSchema = exports.Input$inboundSchema = exports.TranscodePayload1$ = exports.TranscodePayload1$outboundSchema = exports.TranscodePayload1$inboundSchema = exports.TranscodePayload2$ = exports.TranscodePayload2$outboundSchema = exports.TranscodePayload2$inboundSchema = exports.Credentials$ = exports.Credentials$outboundSchema = exports.Credentials$inboundSchema = exports.TranscodePayloadType$ = exports.TranscodePayloadType$outboundSchema = exports.TranscodePayloadType$inboundSchema = exports.TranscodePayloadSchemasType = exports.TranscodePayloadSchemasStorageType = exports.TranscodePayloadType = void 0;
exports.TranscodePayload$ = exports.TranscodePayload$outboundSchema = exports.TranscodePayload$inboundSchema = exports.Outputs$ = void 0;
exports.credentialsToJSON = credentialsToJSON;
exports.credentialsFromJSON = credentialsFromJSON;
exports.transcodePayload2ToJSON = transcodePayload2ToJSON;
exports.transcodePayload2FromJSON = transcodePayload2FromJSON;
exports.transcodePayload1ToJSON = transcodePayload1ToJSON;
exports.transcodePayload1FromJSON = transcodePayload1FromJSON;
exports.inputToJSON = inputToJSON;
exports.inputFromJSON = inputFromJSON;
exports.transcodePayloadSchemasCredentialsToJSON = transcodePayloadSchemasCredentialsToJSON;
exports.transcodePayloadSchemasCredentialsFromJSON = transcodePayloadSchemasCredentialsFromJSON;
exports.transcodePayloadSchemas2ToJSON = transcodePayloadSchemas2ToJSON;
exports.transcodePayloadSchemas2FromJSON = transcodePayloadSchemas2FromJSON;
exports.transcodePayloadCredentialsToJSON = transcodePayloadCredentialsToJSON;
exports.transcodePayloadCredentialsFromJSON = transcodePayloadCredentialsFromJSON;
exports.transcodePayloadSchemas1ToJSON = transcodePayloadSchemas1ToJSON;
exports.transcodePayloadSchemas1FromJSON = transcodePayloadSchemas1FromJSON;
exports.transcodePayloadStorageToJSON = transcodePayloadStorageToJSON;
exports.transcodePayloadStorageFromJSON = transcodePayloadStorageFromJSON;
exports.hlsToJSON = hlsToJSON;
exports.hlsFromJSON = hlsFromJSON;
exports.mp4ToJSON = mp4ToJSON;
exports.mp4FromJSON = mp4FromJSON;
exports.fmp4ToJSON = fmp4ToJSON;
exports.fmp4FromJSON = fmp4FromJSON;
exports.outputsToJSON = outputsToJSON;
exports.outputsFromJSON = outputsFromJSON;
exports.transcodePayloadToJSON = transcodePayloadToJSON;
exports.transcodePayloadFromJSON = transcodePayloadFromJSON;
const z = __importStar(require("zod"));
const schemas_js_1 = require("../../lib/schemas.js");
const inputcreatorid_js_1 = require("./inputcreatorid.js");
const transcodeprofile_js_1 = require("./transcodeprofile.js");
/**
 * Type of service. This is optional and defaults to `url` if
 *
 * @remarks
 * ÅšURL field is provided.
 */
var TranscodePayloadType;
(function (TranscodePayloadType) {
    TranscodePayloadType["S3"] = "s3";
})(TranscodePayloadType || (exports.TranscodePayloadType = TranscodePayloadType = {}));
/**
 * Type of service used for output files
 */
var TranscodePayloadSchemasStorageType;
(function (TranscodePayloadSchemasStorageType) {
    TranscodePayloadSchemasStorageType["Web3Storage"] = "web3.storage";
})(TranscodePayloadSchemasStorageType || (exports.TranscodePayloadSchemasStorageType = TranscodePayloadSchemasStorageType = {}));
/**
 * Type of service used for output files
 */
var TranscodePayloadSchemasType;
(function (TranscodePayloadSchemasType) {
    TranscodePayloadSchemasType["S3"] = "s3";
})(TranscodePayloadSchemasType || (exports.TranscodePayloadSchemasType = TranscodePayloadSchemasType = {}));
/** @internal */
exports.TranscodePayloadType$inboundSchema = z.nativeEnum(TranscodePayloadType);
/** @internal */
exports.TranscodePayloadType$outboundSchema = exports.TranscodePayloadType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var TranscodePayloadType$;
(function (TranscodePayloadType$) {
    /** @deprecated use `TranscodePayloadType$inboundSchema` instead. */
    TranscodePayloadType$.inboundSchema = exports.TranscodePayloadType$inboundSchema;
    /** @deprecated use `TranscodePayloadType$outboundSchema` instead. */
    TranscodePayloadType$.outboundSchema = exports.TranscodePayloadType$outboundSchema;
})(TranscodePayloadType$ || (exports.TranscodePayloadType$ = TranscodePayloadType$ = {}));
/** @internal */
exports.Credentials$inboundSchema = z.object({
    accessKeyId: z.string(),
    secretAccessKey: z.string(),
});
/** @internal */
exports.Credentials$outboundSchema = z.object({
    accessKeyId: z.string(),
    secretAccessKey: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var Credentials$;
(function (Credentials$) {
    /** @deprecated use `Credentials$inboundSchema` instead. */
    Credentials$.inboundSchema = exports.Credentials$inboundSchema;
    /** @deprecated use `Credentials$outboundSchema` instead. */
    Credentials$.outboundSchema = exports.Credentials$outboundSchema;
})(Credentials$ || (exports.Credentials$ = Credentials$ = {}));
function credentialsToJSON(credentials) {
    return JSON.stringify(exports.Credentials$outboundSchema.parse(credentials));
}
function credentialsFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.Credentials$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Credentials' from JSON`);
}
/** @internal */
exports.TranscodePayload2$inboundSchema = z.object({
    type: exports.TranscodePayloadType$inboundSchema,
    endpoint: z.string(),
    bucket: z.string(),
    path: z.string(),
    credentials: z.lazy(() => exports.Credentials$inboundSchema),
});
/** @internal */
exports.TranscodePayload2$outboundSchema = z.object({
    type: exports.TranscodePayloadType$outboundSchema,
    endpoint: z.string(),
    bucket: z.string(),
    path: z.string(),
    credentials: z.lazy(() => exports.Credentials$outboundSchema),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var TranscodePayload2$;
(function (TranscodePayload2$) {
    /** @deprecated use `TranscodePayload2$inboundSchema` instead. */
    TranscodePayload2$.inboundSchema = exports.TranscodePayload2$inboundSchema;
    /** @deprecated use `TranscodePayload2$outboundSchema` instead. */
    TranscodePayload2$.outboundSchema = exports.TranscodePayload2$outboundSchema;
})(TranscodePayload2$ || (exports.TranscodePayload2$ = TranscodePayload2$ = {}));
function transcodePayload2ToJSON(transcodePayload2) {
    return JSON.stringify(exports.TranscodePayload2$outboundSchema.parse(transcodePayload2));
}
function transcodePayload2FromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.TranscodePayload2$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'TranscodePayload2' from JSON`);
}
/** @internal */
exports.TranscodePayload1$inboundSchema = z.object({
    url: z.string(),
});
/** @internal */
exports.TranscodePayload1$outboundSchema = z.object({
    url: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var TranscodePayload1$;
(function (TranscodePayload1$) {
    /** @deprecated use `TranscodePayload1$inboundSchema` instead. */
    TranscodePayload1$.inboundSchema = exports.TranscodePayload1$inboundSchema;
    /** @deprecated use `TranscodePayload1$outboundSchema` instead. */
    TranscodePayload1$.outboundSchema = exports.TranscodePayload1$outboundSchema;
})(TranscodePayload1$ || (exports.TranscodePayload1$ = TranscodePayload1$ = {}));
function transcodePayload1ToJSON(transcodePayload1) {
    return JSON.stringify(exports.TranscodePayload1$outboundSchema.parse(transcodePayload1));
}
function transcodePayload1FromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.TranscodePayload1$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'TranscodePayload1' from JSON`);
}
/** @internal */
exports.Input$inboundSchema = z
    .union([
    z.lazy(() => exports.TranscodePayload1$inboundSchema),
    z.lazy(() => exports.TranscodePayload2$inboundSchema),
]);
/** @internal */
exports.Input$outboundSchema = z.union([
    z.lazy(() => exports.TranscodePayload1$outboundSchema),
    z.lazy(() => exports.TranscodePayload2$outboundSchema),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var Input$;
(function (Input$) {
    /** @deprecated use `Input$inboundSchema` instead. */
    Input$.inboundSchema = exports.Input$inboundSchema;
    /** @deprecated use `Input$outboundSchema` instead. */
    Input$.outboundSchema = exports.Input$outboundSchema;
})(Input$ || (exports.Input$ = Input$ = {}));
function inputToJSON(input) {
    return JSON.stringify(exports.Input$outboundSchema.parse(input));
}
function inputFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.Input$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Input' from JSON`);
}
/** @internal */
exports.TranscodePayloadSchemasStorageType$inboundSchema = z.nativeEnum(TranscodePayloadSchemasStorageType);
/** @internal */
exports.TranscodePayloadSchemasStorageType$outboundSchema = exports.TranscodePayloadSchemasStorageType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var TranscodePayloadSchemasStorageType$;
(function (TranscodePayloadSchemasStorageType$) {
    /** @deprecated use `TranscodePayloadSchemasStorageType$inboundSchema` instead. */
    TranscodePayloadSchemasStorageType$.inboundSchema = exports.TranscodePayloadSchemasStorageType$inboundSchema;
    /** @deprecated use `TranscodePayloadSchemasStorageType$outboundSchema` instead. */
    TranscodePayloadSchemasStorageType$.outboundSchema = exports.TranscodePayloadSchemasStorageType$outboundSchema;
})(TranscodePayloadSchemasStorageType$ || (exports.TranscodePayloadSchemasStorageType$ = TranscodePayloadSchemasStorageType$ = {}));
/** @internal */
exports.TranscodePayloadSchemasCredentials$inboundSchema = z.object({
    proof: z.string(),
});
/** @internal */
exports.TranscodePayloadSchemasCredentials$outboundSchema = z.object({
    proof: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var TranscodePayloadSchemasCredentials$;
(function (TranscodePayloadSchemasCredentials$) {
    /** @deprecated use `TranscodePayloadSchemasCredentials$inboundSchema` instead. */
    TranscodePayloadSchemasCredentials$.inboundSchema = exports.TranscodePayloadSchemasCredentials$inboundSchema;
    /** @deprecated use `TranscodePayloadSchemasCredentials$outboundSchema` instead. */
    TranscodePayloadSchemasCredentials$.outboundSchema = exports.TranscodePayloadSchemasCredentials$outboundSchema;
})(TranscodePayloadSchemasCredentials$ || (exports.TranscodePayloadSchemasCredentials$ = TranscodePayloadSchemasCredentials$ = {}));
function transcodePayloadSchemasCredentialsToJSON(transcodePayloadSchemasCredentials) {
    return JSON.stringify(exports.TranscodePayloadSchemasCredentials$outboundSchema.parse(transcodePayloadSchemasCredentials));
}
function transcodePayloadSchemasCredentialsFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.TranscodePayloadSchemasCredentials$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'TranscodePayloadSchemasCredentials' from JSON`);
}
/** @internal */
exports.TranscodePayloadSchemas2$inboundSchema = z.object({
    type: exports.TranscodePayloadSchemasStorageType$inboundSchema,
    credentials: z.lazy(() => exports.TranscodePayloadSchemasCredentials$inboundSchema),
});
/** @internal */
exports.TranscodePayloadSchemas2$outboundSchema = z.object({
    type: exports.TranscodePayloadSchemasStorageType$outboundSchema,
    credentials: z.lazy(() => exports.TranscodePayloadSchemasCredentials$outboundSchema),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var TranscodePayloadSchemas2$;
(function (TranscodePayloadSchemas2$) {
    /** @deprecated use `TranscodePayloadSchemas2$inboundSchema` instead. */
    TranscodePayloadSchemas2$.inboundSchema = exports.TranscodePayloadSchemas2$inboundSchema;
    /** @deprecated use `TranscodePayloadSchemas2$outboundSchema` instead. */
    TranscodePayloadSchemas2$.outboundSchema = exports.TranscodePayloadSchemas2$outboundSchema;
})(TranscodePayloadSchemas2$ || (exports.TranscodePayloadSchemas2$ = TranscodePayloadSchemas2$ = {}));
function transcodePayloadSchemas2ToJSON(transcodePayloadSchemas2) {
    return JSON.stringify(exports.TranscodePayloadSchemas2$outboundSchema.parse(transcodePayloadSchemas2));
}
function transcodePayloadSchemas2FromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.TranscodePayloadSchemas2$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'TranscodePayloadSchemas2' from JSON`);
}
/** @internal */
exports.TranscodePayloadSchemasType$inboundSchema = z.nativeEnum(TranscodePayloadSchemasType);
/** @internal */
exports.TranscodePayloadSchemasType$outboundSchema = exports.TranscodePayloadSchemasType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var TranscodePayloadSchemasType$;
(function (TranscodePayloadSchemasType$) {
    /** @deprecated use `TranscodePayloadSchemasType$inboundSchema` instead. */
    TranscodePayloadSchemasType$.inboundSchema = exports.TranscodePayloadSchemasType$inboundSchema;
    /** @deprecated use `TranscodePayloadSchemasType$outboundSchema` instead. */
    TranscodePayloadSchemasType$.outboundSchema = exports.TranscodePayloadSchemasType$outboundSchema;
})(TranscodePayloadSchemasType$ || (exports.TranscodePayloadSchemasType$ = TranscodePayloadSchemasType$ = {}));
/** @internal */
exports.TranscodePayloadCredentials$inboundSchema = z.object({
    accessKeyId: z.string(),
    secretAccessKey: z.string(),
});
/** @internal */
exports.TranscodePayloadCredentials$outboundSchema = z.object({
    accessKeyId: z.string(),
    secretAccessKey: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var TranscodePayloadCredentials$;
(function (TranscodePayloadCredentials$) {
    /** @deprecated use `TranscodePayloadCredentials$inboundSchema` instead. */
    TranscodePayloadCredentials$.inboundSchema = exports.TranscodePayloadCredentials$inboundSchema;
    /** @deprecated use `TranscodePayloadCredentials$outboundSchema` instead. */
    TranscodePayloadCredentials$.outboundSchema = exports.TranscodePayloadCredentials$outboundSchema;
})(TranscodePayloadCredentials$ || (exports.TranscodePayloadCredentials$ = TranscodePayloadCredentials$ = {}));
function transcodePayloadCredentialsToJSON(transcodePayloadCredentials) {
    return JSON.stringify(exports.TranscodePayloadCredentials$outboundSchema.parse(transcodePayloadCredentials));
}
function transcodePayloadCredentialsFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.TranscodePayloadCredentials$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'TranscodePayloadCredentials' from JSON`);
}
/** @internal */
exports.TranscodePayloadSchemas1$inboundSchema = z.object({
    type: exports.TranscodePayloadSchemasType$inboundSchema,
    endpoint: z.string(),
    bucket: z.string(),
    credentials: z.lazy(() => exports.TranscodePayloadCredentials$inboundSchema),
});
/** @internal */
exports.TranscodePayloadSchemas1$outboundSchema = z.object({
    type: exports.TranscodePayloadSchemasType$outboundSchema,
    endpoint: z.string(),
    bucket: z.string(),
    credentials: z.lazy(() => exports.TranscodePayloadCredentials$outboundSchema),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var TranscodePayloadSchemas1$;
(function (TranscodePayloadSchemas1$) {
    /** @deprecated use `TranscodePayloadSchemas1$inboundSchema` instead. */
    TranscodePayloadSchemas1$.inboundSchema = exports.TranscodePayloadSchemas1$inboundSchema;
    /** @deprecated use `TranscodePayloadSchemas1$outboundSchema` instead. */
    TranscodePayloadSchemas1$.outboundSchema = exports.TranscodePayloadSchemas1$outboundSchema;
})(TranscodePayloadSchemas1$ || (exports.TranscodePayloadSchemas1$ = TranscodePayloadSchemas1$ = {}));
function transcodePayloadSchemas1ToJSON(transcodePayloadSchemas1) {
    return JSON.stringify(exports.TranscodePayloadSchemas1$outboundSchema.parse(transcodePayloadSchemas1));
}
function transcodePayloadSchemas1FromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.TranscodePayloadSchemas1$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'TranscodePayloadSchemas1' from JSON`);
}
/** @internal */
exports.TranscodePayloadStorage$inboundSchema = z.union([
    z.lazy(() => exports.TranscodePayloadSchemas2$inboundSchema),
    z.lazy(() => exports.TranscodePayloadSchemas1$inboundSchema),
]);
/** @internal */
exports.TranscodePayloadStorage$outboundSchema = z.union([
    z.lazy(() => exports.TranscodePayloadSchemas2$outboundSchema),
    z.lazy(() => exports.TranscodePayloadSchemas1$outboundSchema),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var TranscodePayloadStorage$;
(function (TranscodePayloadStorage$) {
    /** @deprecated use `TranscodePayloadStorage$inboundSchema` instead. */
    TranscodePayloadStorage$.inboundSchema = exports.TranscodePayloadStorage$inboundSchema;
    /** @deprecated use `TranscodePayloadStorage$outboundSchema` instead. */
    TranscodePayloadStorage$.outboundSchema = exports.TranscodePayloadStorage$outboundSchema;
})(TranscodePayloadStorage$ || (exports.TranscodePayloadStorage$ = TranscodePayloadStorage$ = {}));
function transcodePayloadStorageToJSON(transcodePayloadStorage) {
    return JSON.stringify(exports.TranscodePayloadStorage$outboundSchema.parse(transcodePayloadStorage));
}
function transcodePayloadStorageFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.TranscodePayloadStorage$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'TranscodePayloadStorage' from JSON`);
}
/** @internal */
exports.Hls$inboundSchema = z
    .object({
    path: z.string(),
});
/** @internal */
exports.Hls$outboundSchema = z
    .object({
    path: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var Hls$;
(function (Hls$) {
    /** @deprecated use `Hls$inboundSchema` instead. */
    Hls$.inboundSchema = exports.Hls$inboundSchema;
    /** @deprecated use `Hls$outboundSchema` instead. */
    Hls$.outboundSchema = exports.Hls$outboundSchema;
})(Hls$ || (exports.Hls$ = Hls$ = {}));
function hlsToJSON(hls) {
    return JSON.stringify(exports.Hls$outboundSchema.parse(hls));
}
function hlsFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.Hls$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Hls' from JSON`);
}
/** @internal */
exports.Mp4$inboundSchema = z
    .object({
    path: z.string(),
});
/** @internal */
exports.Mp4$outboundSchema = z
    .object({
    path: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var Mp4$;
(function (Mp4$) {
    /** @deprecated use `Mp4$inboundSchema` instead. */
    Mp4$.inboundSchema = exports.Mp4$inboundSchema;
    /** @deprecated use `Mp4$outboundSchema` instead. */
    Mp4$.outboundSchema = exports.Mp4$outboundSchema;
})(Mp4$ || (exports.Mp4$ = Mp4$ = {}));
function mp4ToJSON(mp4) {
    return JSON.stringify(exports.Mp4$outboundSchema.parse(mp4));
}
function mp4FromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.Mp4$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Mp4' from JSON`);
}
/** @internal */
exports.Fmp4$inboundSchema = z
    .object({
    path: z.string(),
});
/** @internal */
exports.Fmp4$outboundSchema = z.object({
    path: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var Fmp4$;
(function (Fmp4$) {
    /** @deprecated use `Fmp4$inboundSchema` instead. */
    Fmp4$.inboundSchema = exports.Fmp4$inboundSchema;
    /** @deprecated use `Fmp4$outboundSchema` instead. */
    Fmp4$.outboundSchema = exports.Fmp4$outboundSchema;
})(Fmp4$ || (exports.Fmp4$ = Fmp4$ = {}));
function fmp4ToJSON(fmp4) {
    return JSON.stringify(exports.Fmp4$outboundSchema.parse(fmp4));
}
function fmp4FromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.Fmp4$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Fmp4' from JSON`);
}
/** @internal */
exports.Outputs$inboundSchema = z.object({
    hls: z.lazy(() => exports.Hls$inboundSchema).optional(),
    mp4: z.lazy(() => exports.Mp4$inboundSchema).optional(),
    fmp4: z.lazy(() => exports.Fmp4$inboundSchema).optional(),
});
/** @internal */
exports.Outputs$outboundSchema = z.object({
    hls: z.lazy(() => exports.Hls$outboundSchema).optional(),
    mp4: z.lazy(() => exports.Mp4$outboundSchema).optional(),
    fmp4: z.lazy(() => exports.Fmp4$outboundSchema).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var Outputs$;
(function (Outputs$) {
    /** @deprecated use `Outputs$inboundSchema` instead. */
    Outputs$.inboundSchema = exports.Outputs$inboundSchema;
    /** @deprecated use `Outputs$outboundSchema` instead. */
    Outputs$.outboundSchema = exports.Outputs$outboundSchema;
})(Outputs$ || (exports.Outputs$ = Outputs$ = {}));
function outputsToJSON(outputs) {
    return JSON.stringify(exports.Outputs$outboundSchema.parse(outputs));
}
function outputsFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.Outputs$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Outputs' from JSON`);
}
/** @internal */
exports.TranscodePayload$inboundSchema = z.object({
    input: z.union([
        z.lazy(() => exports.TranscodePayload1$inboundSchema),
        z.lazy(() => exports.TranscodePayload2$inboundSchema),
    ]),
    storage: z.union([
        z.lazy(() => exports.TranscodePayloadSchemas2$inboundSchema),
        z.lazy(() => exports.TranscodePayloadSchemas1$inboundSchema),
    ]),
    outputs: z.lazy(() => exports.Outputs$inboundSchema),
    profiles: z.array(transcodeprofile_js_1.TranscodeProfile$inboundSchema).optional(),
    targetSegmentSizeSecs: z.number().optional(),
    creatorId: inputcreatorid_js_1.InputCreatorId$inboundSchema.optional(),
    c2pa: z.boolean().optional(),
});
/** @internal */
exports.TranscodePayload$outboundSchema = z.object({
    input: z.union([
        z.lazy(() => exports.TranscodePayload1$outboundSchema),
        z.lazy(() => exports.TranscodePayload2$outboundSchema),
    ]),
    storage: z.union([
        z.lazy(() => exports.TranscodePayloadSchemas2$outboundSchema),
        z.lazy(() => exports.TranscodePayloadSchemas1$outboundSchema),
    ]),
    outputs: z.lazy(() => exports.Outputs$outboundSchema),
    profiles: z.array(transcodeprofile_js_1.TranscodeProfile$outboundSchema).optional(),
    targetSegmentSizeSecs: z.number().optional(),
    creatorId: inputcreatorid_js_1.InputCreatorId$outboundSchema.optional(),
    c2pa: z.boolean().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var TranscodePayload$;
(function (TranscodePayload$) {
    /** @deprecated use `TranscodePayload$inboundSchema` instead. */
    TranscodePayload$.inboundSchema = exports.TranscodePayload$inboundSchema;
    /** @deprecated use `TranscodePayload$outboundSchema` instead. */
    TranscodePayload$.outboundSchema = exports.TranscodePayload$outboundSchema;
})(TranscodePayload$ || (exports.TranscodePayload$ = TranscodePayload$ = {}));
function transcodePayloadToJSON(transcodePayload) {
    return JSON.stringify(exports.TranscodePayload$outboundSchema.parse(transcodePayload));
}
function transcodePayloadFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.TranscodePayload$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'TranscodePayload' from JSON`);
}
//# sourceMappingURL=transcodepayload.js.map