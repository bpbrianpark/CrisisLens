"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TranscodeProfile$ = exports.TranscodeProfile$outboundSchema = exports.TranscodeProfile$inboundSchema = exports.TranscodeProfileEncoder$ = exports.TranscodeProfileEncoder$outboundSchema = exports.TranscodeProfileEncoder$inboundSchema = exports.TranscodeProfileProfile$ = exports.TranscodeProfileProfile$outboundSchema = exports.TranscodeProfileProfile$inboundSchema = exports.TranscodeProfileEncoder = exports.TranscodeProfileProfile = void 0;
exports.transcodeProfileToJSON = transcodeProfileToJSON;
exports.transcodeProfileFromJSON = transcodeProfileFromJSON;
const z = __importStar(require("zod"));
const schemas_js_1 = require("../../lib/schemas.js");
var TranscodeProfileProfile;
(function (TranscodeProfileProfile) {
    TranscodeProfileProfile["H264Baseline"] = "H264Baseline";
    TranscodeProfileProfile["H264Main"] = "H264Main";
    TranscodeProfileProfile["H264High"] = "H264High";
    TranscodeProfileProfile["H264ConstrainedHigh"] = "H264ConstrainedHigh";
})(TranscodeProfileProfile || (exports.TranscodeProfileProfile = TranscodeProfileProfile = {}));
var TranscodeProfileEncoder;
(function (TranscodeProfileEncoder) {
    TranscodeProfileEncoder["H264"] = "H.264";
    TranscodeProfileEncoder["Hevc"] = "HEVC";
    TranscodeProfileEncoder["Vp8"] = "VP8";
    TranscodeProfileEncoder["Vp9"] = "VP9";
})(TranscodeProfileEncoder || (exports.TranscodeProfileEncoder = TranscodeProfileEncoder = {}));
/** @internal */
exports.TranscodeProfileProfile$inboundSchema = z.nativeEnum(TranscodeProfileProfile);
/** @internal */
exports.TranscodeProfileProfile$outboundSchema = exports.TranscodeProfileProfile$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var TranscodeProfileProfile$;
(function (TranscodeProfileProfile$) {
    /** @deprecated use `TranscodeProfileProfile$inboundSchema` instead. */
    TranscodeProfileProfile$.inboundSchema = exports.TranscodeProfileProfile$inboundSchema;
    /** @deprecated use `TranscodeProfileProfile$outboundSchema` instead. */
    TranscodeProfileProfile$.outboundSchema = exports.TranscodeProfileProfile$outboundSchema;
})(TranscodeProfileProfile$ || (exports.TranscodeProfileProfile$ = TranscodeProfileProfile$ = {}));
/** @internal */
exports.TranscodeProfileEncoder$inboundSchema = z.nativeEnum(TranscodeProfileEncoder);
/** @internal */
exports.TranscodeProfileEncoder$outboundSchema = exports.TranscodeProfileEncoder$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var TranscodeProfileEncoder$;
(function (TranscodeProfileEncoder$) {
    /** @deprecated use `TranscodeProfileEncoder$inboundSchema` instead. */
    TranscodeProfileEncoder$.inboundSchema = exports.TranscodeProfileEncoder$inboundSchema;
    /** @deprecated use `TranscodeProfileEncoder$outboundSchema` instead. */
    TranscodeProfileEncoder$.outboundSchema = exports.TranscodeProfileEncoder$outboundSchema;
})(TranscodeProfileEncoder$ || (exports.TranscodeProfileEncoder$ = TranscodeProfileEncoder$ = {}));
/** @internal */
exports.TranscodeProfile$inboundSchema = z.object({
    width: z.number().int().optional(),
    name: z.string().optional(),
    height: z.number().int().optional(),
    bitrate: z.number().int(),
    quality: z.number().int().optional(),
    fps: z.number().int().optional(),
    fpsDen: z.number().int().optional(),
    gop: z.string().optional(),
    profile: exports.TranscodeProfileProfile$inboundSchema.optional(),
    encoder: exports.TranscodeProfileEncoder$inboundSchema.optional(),
});
/** @internal */
exports.TranscodeProfile$outboundSchema = z.object({
    width: z.number().int().optional(),
    name: z.string().optional(),
    height: z.number().int().optional(),
    bitrate: z.number().int(),
    quality: z.number().int().optional(),
    fps: z.number().int().optional(),
    fpsDen: z.number().int().optional(),
    gop: z.string().optional(),
    profile: exports.TranscodeProfileProfile$outboundSchema.optional(),
    encoder: exports.TranscodeProfileEncoder$outboundSchema.optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var TranscodeProfile$;
(function (TranscodeProfile$) {
    /** @deprecated use `TranscodeProfile$inboundSchema` instead. */
    TranscodeProfile$.inboundSchema = exports.TranscodeProfile$inboundSchema;
    /** @deprecated use `TranscodeProfile$outboundSchema` instead. */
    TranscodeProfile$.outboundSchema = exports.TranscodeProfile$outboundSchema;
})(TranscodeProfile$ || (exports.TranscodeProfile$ = TranscodeProfile$ = {}));
function transcodeProfileToJSON(transcodeProfile) {
    return JSON.stringify(exports.TranscodeProfile$outboundSchema.parse(transcodeProfile));
}
function transcodeProfileFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.TranscodeProfile$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'TranscodeProfile' from JSON`);
}
//# sourceMappingURL=transcodeprofile.js.map