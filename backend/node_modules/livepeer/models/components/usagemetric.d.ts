import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
/**
 * An individual metric about usage of a user.
 *
 * @remarks
 */
export type UsageMetric = {
    /**
     * The user ID associated with the metric
     */
    userID?: string | undefined;
    /**
     * The creator ID associated with the metric
     */
    creatorID?: string | undefined;
    /**
     * Total minutes of delivery usage.
     */
    deliveryUsageMins?: number | undefined;
    /**
     * Total transcoded minutes.
     */
    totalUsageMins?: number | undefined;
    /**
     * Total minutes of storage usage.
     */
    storageUsageMins?: number | undefined;
};
/** @internal */
export declare const UsageMetric$inboundSchema: z.ZodType<UsageMetric, z.ZodTypeDef, unknown>;
/** @internal */
export type UsageMetric$Outbound = {
    UserID?: string | undefined;
    CreatorID?: string | undefined;
    DeliveryUsageMins?: number | undefined;
    TotalUsageMins?: number | undefined;
    StorageUsageMins?: number | undefined;
};
/** @internal */
export declare const UsageMetric$outboundSchema: z.ZodType<UsageMetric$Outbound, z.ZodTypeDef, UsageMetric>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UsageMetric$ {
    /** @deprecated use `UsageMetric$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UsageMetric, z.ZodTypeDef, unknown>;
    /** @deprecated use `UsageMetric$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UsageMetric$Outbound, z.ZodTypeDef, UsageMetric>;
    /** @deprecated use `UsageMetric$Outbound` instead. */
    type Outbound = UsageMetric$Outbound;
}
export declare function usageMetricToJSON(usageMetric: UsageMetric): string;
export declare function usageMetricFromJSON(jsonString: string): SafeParseResult<UsageMetric, SDKValidationError>;
//# sourceMappingURL=usagemetric.d.ts.map