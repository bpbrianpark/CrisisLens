import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
export type Three = string | number;
export type UserTags = string | number | Array<string | number>;
/** @internal */
export declare const Three$inboundSchema: z.ZodType<Three, z.ZodTypeDef, unknown>;
/** @internal */
export type Three$Outbound = string | number;
/** @internal */
export declare const Three$outboundSchema: z.ZodType<Three$Outbound, z.ZodTypeDef, Three>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Three$ {
    /** @deprecated use `Three$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Three, z.ZodTypeDef, unknown>;
    /** @deprecated use `Three$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Three$Outbound, z.ZodTypeDef, Three>;
    /** @deprecated use `Three$Outbound` instead. */
    type Outbound = Three$Outbound;
}
export declare function threeToJSON(three: Three): string;
export declare function threeFromJSON(jsonString: string): SafeParseResult<Three, SDKValidationError>;
/** @internal */
export declare const UserTags$inboundSchema: z.ZodType<UserTags, z.ZodTypeDef, unknown>;
/** @internal */
export type UserTags$Outbound = string | number | Array<string | number>;
/** @internal */
export declare const UserTags$outboundSchema: z.ZodType<UserTags$Outbound, z.ZodTypeDef, UserTags>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UserTags$ {
    /** @deprecated use `UserTags$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UserTags, z.ZodTypeDef, unknown>;
    /** @deprecated use `UserTags$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UserTags$Outbound, z.ZodTypeDef, UserTags>;
    /** @deprecated use `UserTags$Outbound` instead. */
    type Outbound = UserTags$Outbound;
}
export declare function userTagsToJSON(userTags: UserTags): string;
export declare function userTagsFromJSON(jsonString: string): SafeParseResult<UserTags, SDKValidationError>;
//# sourceMappingURL=usertags.d.ts.map