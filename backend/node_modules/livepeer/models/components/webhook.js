"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.WebhookInput$ = exports.WebhookInput$outboundSchema = exports.WebhookInput$inboundSchema = exports.Webhook$ = exports.Webhook$outboundSchema = exports.Webhook$inboundSchema = exports.Status$ = exports.Status$outboundSchema = exports.Status$inboundSchema = exports.LastFailure$ = exports.LastFailure$outboundSchema = exports.LastFailure$inboundSchema = exports.Events$ = exports.Events$outboundSchema = exports.Events$inboundSchema = exports.Events = void 0;
exports.lastFailureToJSON = lastFailureToJSON;
exports.lastFailureFromJSON = lastFailureFromJSON;
exports.statusToJSON = statusToJSON;
exports.statusFromJSON = statusFromJSON;
exports.webhookToJSON = webhookToJSON;
exports.webhookFromJSON = webhookFromJSON;
exports.webhookInputToJSON = webhookInputToJSON;
exports.webhookInputFromJSON = webhookInputFromJSON;
const z = __importStar(require("zod"));
const schemas_js_1 = require("../../lib/schemas.js");
var Events;
(function (Events) {
    Events["StreamStarted"] = "stream.started";
    Events["StreamDetection"] = "stream.detection";
    Events["StreamIdle"] = "stream.idle";
    Events["RecordingReady"] = "recording.ready";
    Events["RecordingStarted"] = "recording.started";
    Events["RecordingWaiting"] = "recording.waiting";
    Events["MultistreamConnected"] = "multistream.connected";
    Events["MultistreamError"] = "multistream.error";
    Events["MultistreamDisconnected"] = "multistream.disconnected";
    Events["PlaybackUserNew"] = "playback.user.new";
    Events["PlaybackAccessControl"] = "playback.accessControl";
    Events["AssetCreated"] = "asset.created";
    Events["AssetUpdated"] = "asset.updated";
    Events["AssetFailed"] = "asset.failed";
    Events["AssetReady"] = "asset.ready";
    Events["AssetDeleted"] = "asset.deleted";
    Events["TaskSpawned"] = "task.spawned";
    Events["TaskUpdated"] = "task.updated";
    Events["TaskCompleted"] = "task.completed";
    Events["TaskFailed"] = "task.failed";
})(Events || (exports.Events = Events = {}));
/** @internal */
exports.Events$inboundSchema = z
    .nativeEnum(Events);
/** @internal */
exports.Events$outboundSchema = exports.Events$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var Events$;
(function (Events$) {
    /** @deprecated use `Events$inboundSchema` instead. */
    Events$.inboundSchema = exports.Events$inboundSchema;
    /** @deprecated use `Events$outboundSchema` instead. */
    Events$.outboundSchema = exports.Events$outboundSchema;
})(Events$ || (exports.Events$ = Events$ = {}));
/** @internal */
exports.LastFailure$inboundSchema = z.object({
    timestamp: z.number().optional(),
    error: z.string().optional(),
    response: z.string().optional(),
    statusCode: z.number().optional(),
});
/** @internal */
exports.LastFailure$outboundSchema = z.object({
    timestamp: z.number().optional(),
    error: z.string().optional(),
    response: z.string().optional(),
    statusCode: z.number().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var LastFailure$;
(function (LastFailure$) {
    /** @deprecated use `LastFailure$inboundSchema` instead. */
    LastFailure$.inboundSchema = exports.LastFailure$inboundSchema;
    /** @deprecated use `LastFailure$outboundSchema` instead. */
    LastFailure$.outboundSchema = exports.LastFailure$outboundSchema;
})(LastFailure$ || (exports.LastFailure$ = LastFailure$ = {}));
function lastFailureToJSON(lastFailure) {
    return JSON.stringify(exports.LastFailure$outboundSchema.parse(lastFailure));
}
function lastFailureFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.LastFailure$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'LastFailure' from JSON`);
}
/** @internal */
exports.Status$inboundSchema = z
    .object({
    lastFailure: z.lazy(() => exports.LastFailure$inboundSchema).optional(),
    lastTriggeredAt: z.number().optional(),
});
/** @internal */
exports.Status$outboundSchema = z.object({
    lastFailure: z.lazy(() => exports.LastFailure$outboundSchema).optional(),
    lastTriggeredAt: z.number().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var Status$;
(function (Status$) {
    /** @deprecated use `Status$inboundSchema` instead. */
    Status$.inboundSchema = exports.Status$inboundSchema;
    /** @deprecated use `Status$outboundSchema` instead. */
    Status$.outboundSchema = exports.Status$outboundSchema;
})(Status$ || (exports.Status$ = Status$ = {}));
function statusToJSON(status) {
    return JSON.stringify(exports.Status$outboundSchema.parse(status));
}
function statusFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.Status$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Status' from JSON`);
}
/** @internal */
exports.Webhook$inboundSchema = z.object({
    id: z.string().optional(),
    name: z.string(),
    kind: z.string().optional(),
    userId: z.string().optional(),
    projectId: z.string().optional(),
    createdAt: z.number().optional(),
    events: z.array(exports.Events$inboundSchema).optional(),
    url: z.string(),
    streamId: z.string().optional(),
    status: z.lazy(() => exports.Status$inboundSchema).optional(),
});
/** @internal */
exports.Webhook$outboundSchema = z.object({
    id: z.string().optional(),
    name: z.string(),
    kind: z.string().optional(),
    userId: z.string().optional(),
    projectId: z.string().optional(),
    createdAt: z.number().optional(),
    events: z.array(exports.Events$outboundSchema).optional(),
    url: z.string(),
    streamId: z.string().optional(),
    status: z.lazy(() => exports.Status$outboundSchema).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var Webhook$;
(function (Webhook$) {
    /** @deprecated use `Webhook$inboundSchema` instead. */
    Webhook$.inboundSchema = exports.Webhook$inboundSchema;
    /** @deprecated use `Webhook$outboundSchema` instead. */
    Webhook$.outboundSchema = exports.Webhook$outboundSchema;
})(Webhook$ || (exports.Webhook$ = Webhook$ = {}));
function webhookToJSON(webhook) {
    return JSON.stringify(exports.Webhook$outboundSchema.parse(webhook));
}
function webhookFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.Webhook$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Webhook' from JSON`);
}
/** @internal */
exports.WebhookInput$inboundSchema = z.object({
    name: z.string(),
    projectId: z.string().optional(),
    events: z.array(exports.Events$inboundSchema).optional(),
    url: z.string(),
    sharedSecret: z.string().optional(),
    streamId: z.string().optional(),
});
/** @internal */
exports.WebhookInput$outboundSchema = z.object({
    name: z.string(),
    projectId: z.string().optional(),
    events: z.array(exports.Events$outboundSchema).optional(),
    url: z.string(),
    sharedSecret: z.string().optional(),
    streamId: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var WebhookInput$;
(function (WebhookInput$) {
    /** @deprecated use `WebhookInput$inboundSchema` instead. */
    WebhookInput$.inboundSchema = exports.WebhookInput$inboundSchema;
    /** @deprecated use `WebhookInput$outboundSchema` instead. */
    WebhookInput$.outboundSchema = exports.WebhookInput$outboundSchema;
})(WebhookInput$ || (exports.WebhookInput$ = WebhookInput$ = {}));
function webhookInputToJSON(webhookInput) {
    return JSON.stringify(exports.WebhookInput$outboundSchema.parse(webhookInput));
}
function webhookInputFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.WebhookInput$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'WebhookInput' from JSON`);
}
//# sourceMappingURL=webhook.js.map