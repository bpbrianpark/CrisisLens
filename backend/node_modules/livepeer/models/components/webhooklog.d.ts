import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
export type Request = {
    /**
     * URL used for the request
     */
    url?: string | undefined;
    /**
     * HTTP request method
     */
    method?: string | undefined;
    /**
     * HTTP request headers
     */
    headers?: {
        [k: string]: string;
    } | undefined;
    /**
     * request body
     */
    body?: string | undefined;
};
export type Response = {
    /**
     * response body
     */
    body?: string | undefined;
    /**
     * HTTP status code
     */
    status?: number | undefined;
    /**
     * response status text
     */
    statusText?: string | undefined;
};
export type WebhookLog = {
    id: string;
    /**
     * ID of the webhook this request was made for
     */
    webhookId: string;
    /**
     * The event type that triggered the webhook request
     */
    event?: string | undefined;
    /**
     * Timestamp (in milliseconds) at which webhook request object was
     *
     * @remarks
     * created
     */
    createdAt?: number | undefined;
    /**
     * The time taken (in seconds) to make the webhook request
     */
    duration?: number | undefined;
    /**
     * Whether the webhook request was successful
     */
    success?: boolean | undefined;
    request?: Request | undefined;
    response?: Response | undefined;
};
/** @internal */
export declare const Request$inboundSchema: z.ZodType<Request, z.ZodTypeDef, unknown>;
/** @internal */
export type Request$Outbound = {
    url?: string | undefined;
    method?: string | undefined;
    headers?: {
        [k: string]: string;
    } | undefined;
    body?: string | undefined;
};
/** @internal */
export declare const Request$outboundSchema: z.ZodType<Request$Outbound, z.ZodTypeDef, Request>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Request$ {
    /** @deprecated use `Request$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Request, z.ZodTypeDef, unknown>;
    /** @deprecated use `Request$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Request$Outbound, z.ZodTypeDef, Request>;
    /** @deprecated use `Request$Outbound` instead. */
    type Outbound = Request$Outbound;
}
export declare function requestToJSON(request: Request): string;
export declare function requestFromJSON(jsonString: string): SafeParseResult<Request, SDKValidationError>;
/** @internal */
export declare const Response$inboundSchema: z.ZodType<Response, z.ZodTypeDef, unknown>;
/** @internal */
export type Response$Outbound = {
    body?: string | undefined;
    status?: number | undefined;
    statusText?: string | undefined;
};
/** @internal */
export declare const Response$outboundSchema: z.ZodType<Response$Outbound, z.ZodTypeDef, Response>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Response$ {
    /** @deprecated use `Response$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Response, z.ZodTypeDef, unknown>;
    /** @deprecated use `Response$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Response$Outbound, z.ZodTypeDef, Response>;
    /** @deprecated use `Response$Outbound` instead. */
    type Outbound = Response$Outbound;
}
export declare function responseToJSON(response: Response): string;
export declare function responseFromJSON(jsonString: string): SafeParseResult<Response, SDKValidationError>;
/** @internal */
export declare const WebhookLog$inboundSchema: z.ZodType<WebhookLog, z.ZodTypeDef, unknown>;
/** @internal */
export type WebhookLog$Outbound = {
    id: string;
    webhookId: string;
    event?: string | undefined;
    createdAt?: number | undefined;
    duration?: number | undefined;
    success?: boolean | undefined;
    request?: Request$Outbound | undefined;
    response?: Response$Outbound | undefined;
};
/** @internal */
export declare const WebhookLog$outboundSchema: z.ZodType<WebhookLog$Outbound, z.ZodTypeDef, WebhookLog>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace WebhookLog$ {
    /** @deprecated use `WebhookLog$inboundSchema` instead. */
    const inboundSchema: z.ZodType<WebhookLog, z.ZodTypeDef, unknown>;
    /** @deprecated use `WebhookLog$outboundSchema` instead. */
    const outboundSchema: z.ZodType<WebhookLog$Outbound, z.ZodTypeDef, WebhookLog>;
    /** @deprecated use `WebhookLog$Outbound` instead. */
    type Outbound = WebhookLog$Outbound;
}
export declare function webhookLogToJSON(webhookLog: WebhookLog): string;
export declare function webhookLogFromJSON(jsonString: string): SafeParseResult<WebhookLog, SDKValidationError>;
//# sourceMappingURL=webhooklog.d.ts.map