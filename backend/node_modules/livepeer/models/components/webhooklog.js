"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.WebhookLog$ = exports.WebhookLog$outboundSchema = exports.WebhookLog$inboundSchema = exports.Response$ = exports.Response$outboundSchema = exports.Response$inboundSchema = exports.Request$ = exports.Request$outboundSchema = exports.Request$inboundSchema = void 0;
exports.requestToJSON = requestToJSON;
exports.requestFromJSON = requestFromJSON;
exports.responseToJSON = responseToJSON;
exports.responseFromJSON = responseFromJSON;
exports.webhookLogToJSON = webhookLogToJSON;
exports.webhookLogFromJSON = webhookLogFromJSON;
const z = __importStar(require("zod"));
const schemas_js_1 = require("../../lib/schemas.js");
/** @internal */
exports.Request$inboundSchema = z.object({
    url: z.string().optional(),
    method: z.string().optional(),
    headers: z.record(z.string()).optional(),
    body: z.string().optional(),
});
/** @internal */
exports.Request$outboundSchema = z.object({
    url: z.string().optional(),
    method: z.string().optional(),
    headers: z.record(z.string()).optional(),
    body: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var Request$;
(function (Request$) {
    /** @deprecated use `Request$inboundSchema` instead. */
    Request$.inboundSchema = exports.Request$inboundSchema;
    /** @deprecated use `Request$outboundSchema` instead. */
    Request$.outboundSchema = exports.Request$outboundSchema;
})(Request$ || (exports.Request$ = Request$ = {}));
function requestToJSON(request) {
    return JSON.stringify(exports.Request$outboundSchema.parse(request));
}
function requestFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.Request$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Request' from JSON`);
}
/** @internal */
exports.Response$inboundSchema = z.object({
    body: z.string().optional(),
    status: z.number().optional(),
    statusText: z.string().optional(),
});
/** @internal */
exports.Response$outboundSchema = z.object({
    body: z.string().optional(),
    status: z.number().optional(),
    statusText: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var Response$;
(function (Response$) {
    /** @deprecated use `Response$inboundSchema` instead. */
    Response$.inboundSchema = exports.Response$inboundSchema;
    /** @deprecated use `Response$outboundSchema` instead. */
    Response$.outboundSchema = exports.Response$outboundSchema;
})(Response$ || (exports.Response$ = Response$ = {}));
function responseToJSON(response) {
    return JSON.stringify(exports.Response$outboundSchema.parse(response));
}
function responseFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.Response$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Response' from JSON`);
}
/** @internal */
exports.WebhookLog$inboundSchema = z.object({
    id: z.string(),
    webhookId: z.string(),
    event: z.string().optional(),
    createdAt: z.number().optional(),
    duration: z.number().optional(),
    success: z.boolean().optional(),
    request: z.lazy(() => exports.Request$inboundSchema).optional(),
    response: z.lazy(() => exports.Response$inboundSchema).optional(),
});
/** @internal */
exports.WebhookLog$outboundSchema = z.object({
    id: z.string(),
    webhookId: z.string(),
    event: z.string().optional(),
    createdAt: z.number().optional(),
    duration: z.number().optional(),
    success: z.boolean().optional(),
    request: z.lazy(() => exports.Request$outboundSchema).optional(),
    response: z.lazy(() => exports.Response$outboundSchema).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var WebhookLog$;
(function (WebhookLog$) {
    /** @deprecated use `WebhookLog$inboundSchema` instead. */
    WebhookLog$.inboundSchema = exports.WebhookLog$inboundSchema;
    /** @deprecated use `WebhookLog$outboundSchema` instead. */
    WebhookLog$.outboundSchema = exports.WebhookLog$outboundSchema;
})(WebhookLog$ || (exports.WebhookLog$ = WebhookLog$ = {}));
function webhookLogToJSON(webhookLog) {
    return JSON.stringify(exports.WebhookLog$outboundSchema.parse(webhookLog));
}
function webhookLogFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.WebhookLog$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'WebhookLog' from JSON`);
}
//# sourceMappingURL=webhooklog.js.map