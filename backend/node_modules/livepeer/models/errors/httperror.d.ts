import * as z from "zod";
import * as components from "../components/index.js";
/**
 * HTTP error response model.
 */
export type HTTPErrorData = {
    /**
     * Detailed error information.
     */
    detail: components.APIError;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse?: Response | undefined;
};
/**
 * HTTP error response model.
 */
export declare class HTTPError extends Error {
    /**
     * Detailed error information.
     */
    detail: components.APIError;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse?: Response | undefined;
    /** The original data that was passed to this error instance. */
    data$: HTTPErrorData;
    constructor(err: HTTPErrorData);
}
/** @internal */
export declare const HTTPError$inboundSchema: z.ZodType<HTTPError, z.ZodTypeDef, unknown>;
/** @internal */
export type HTTPError$Outbound = {
    detail: components.APIError$Outbound;
    RawResponse?: never | undefined;
};
/** @internal */
export declare const HTTPError$outboundSchema: z.ZodType<HTTPError$Outbound, z.ZodTypeDef, HTTPError>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace HTTPError$ {
    /** @deprecated use `HTTPError$inboundSchema` instead. */
    const inboundSchema: z.ZodType<HTTPError, z.ZodTypeDef, unknown>;
    /** @deprecated use `HTTPError$outboundSchema` instead. */
    const outboundSchema: z.ZodType<HTTPError$Outbound, z.ZodTypeDef, HTTPError>;
    /** @deprecated use `HTTPError$Outbound` instead. */
    type Outbound = HTTPError$Outbound;
}
//# sourceMappingURL=httperror.d.ts.map