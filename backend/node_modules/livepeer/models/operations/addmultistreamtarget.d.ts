import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
export type AddMultistreamTargetRequest = {
    /**
     * ID of the parent stream
     */
    id: string;
    targetAddPayload: components.TargetAddPayload;
};
export type AddMultistreamTargetResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * Error
     */
    error?: components.ErrorT | undefined;
};
/** @internal */
export declare const AddMultistreamTargetRequest$inboundSchema: z.ZodType<AddMultistreamTargetRequest, z.ZodTypeDef, unknown>;
/** @internal */
export type AddMultistreamTargetRequest$Outbound = {
    id: string;
    "target-add-payload": components.TargetAddPayload$Outbound;
};
/** @internal */
export declare const AddMultistreamTargetRequest$outboundSchema: z.ZodType<AddMultistreamTargetRequest$Outbound, z.ZodTypeDef, AddMultistreamTargetRequest>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace AddMultistreamTargetRequest$ {
    /** @deprecated use `AddMultistreamTargetRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<AddMultistreamTargetRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `AddMultistreamTargetRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<AddMultistreamTargetRequest$Outbound, z.ZodTypeDef, AddMultistreamTargetRequest>;
    /** @deprecated use `AddMultistreamTargetRequest$Outbound` instead. */
    type Outbound = AddMultistreamTargetRequest$Outbound;
}
export declare function addMultistreamTargetRequestToJSON(addMultistreamTargetRequest: AddMultistreamTargetRequest): string;
export declare function addMultistreamTargetRequestFromJSON(jsonString: string): SafeParseResult<AddMultistreamTargetRequest, SDKValidationError>;
/** @internal */
export declare const AddMultistreamTargetResponse$inboundSchema: z.ZodType<AddMultistreamTargetResponse, z.ZodTypeDef, unknown>;
/** @internal */
export type AddMultistreamTargetResponse$Outbound = {
    ContentType: string;
    StatusCode: number;
    RawResponse: never;
    error?: components.ErrorT$Outbound | undefined;
};
/** @internal */
export declare const AddMultistreamTargetResponse$outboundSchema: z.ZodType<AddMultistreamTargetResponse$Outbound, z.ZodTypeDef, AddMultistreamTargetResponse>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace AddMultistreamTargetResponse$ {
    /** @deprecated use `AddMultistreamTargetResponse$inboundSchema` instead. */
    const inboundSchema: z.ZodType<AddMultistreamTargetResponse, z.ZodTypeDef, unknown>;
    /** @deprecated use `AddMultistreamTargetResponse$outboundSchema` instead. */
    const outboundSchema: z.ZodType<AddMultistreamTargetResponse$Outbound, z.ZodTypeDef, AddMultistreamTargetResponse>;
    /** @deprecated use `AddMultistreamTargetResponse$Outbound` instead. */
    type Outbound = AddMultistreamTargetResponse$Outbound;
}
export declare function addMultistreamTargetResponseToJSON(addMultistreamTargetResponse: AddMultistreamTargetResponse): string;
export declare function addMultistreamTargetResponseFromJSON(jsonString: string): SafeParseResult<AddMultistreamTargetResponse, SDKValidationError>;
//# sourceMappingURL=addmultistreamtarget.d.ts.map