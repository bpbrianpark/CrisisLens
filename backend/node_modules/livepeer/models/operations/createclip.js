"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CreateClipResponse$ = exports.CreateClipResponse$outboundSchema = exports.CreateClipResponse$inboundSchema = exports.CreateClipData$ = exports.CreateClipData$outboundSchema = exports.CreateClipData$inboundSchema = exports.CreateClipTask$ = exports.CreateClipTask$outboundSchema = exports.CreateClipTask$inboundSchema = void 0;
exports.createClipTaskToJSON = createClipTaskToJSON;
exports.createClipTaskFromJSON = createClipTaskFromJSON;
exports.createClipDataToJSON = createClipDataToJSON;
exports.createClipDataFromJSON = createClipDataFromJSON;
exports.createClipResponseToJSON = createClipResponseToJSON;
exports.createClipResponseFromJSON = createClipResponseFromJSON;
const z = __importStar(require("zod"));
const primitives_js_1 = require("../../lib/primitives.js");
const schemas_js_1 = require("../../lib/schemas.js");
const components = __importStar(require("../components/index.js"));
/** @internal */
exports.CreateClipTask$inboundSchema = z.object({
    id: z.string().optional(),
});
/** @internal */
exports.CreateClipTask$outboundSchema = z.object({
    id: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var CreateClipTask$;
(function (CreateClipTask$) {
    /** @deprecated use `CreateClipTask$inboundSchema` instead. */
    CreateClipTask$.inboundSchema = exports.CreateClipTask$inboundSchema;
    /** @deprecated use `CreateClipTask$outboundSchema` instead. */
    CreateClipTask$.outboundSchema = exports.CreateClipTask$outboundSchema;
})(CreateClipTask$ || (exports.CreateClipTask$ = CreateClipTask$ = {}));
function createClipTaskToJSON(createClipTask) {
    return JSON.stringify(exports.CreateClipTask$outboundSchema.parse(createClipTask));
}
function createClipTaskFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.CreateClipTask$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateClipTask' from JSON`);
}
/** @internal */
exports.CreateClipData$inboundSchema = z.object({
    asset: components.Asset$inboundSchema,
    task: z.lazy(() => exports.CreateClipTask$inboundSchema),
});
/** @internal */
exports.CreateClipData$outboundSchema = z.object({
    asset: components.Asset$outboundSchema,
    task: z.lazy(() => exports.CreateClipTask$outboundSchema),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var CreateClipData$;
(function (CreateClipData$) {
    /** @deprecated use `CreateClipData$inboundSchema` instead. */
    CreateClipData$.inboundSchema = exports.CreateClipData$inboundSchema;
    /** @deprecated use `CreateClipData$outboundSchema` instead. */
    CreateClipData$.outboundSchema = exports.CreateClipData$outboundSchema;
})(CreateClipData$ || (exports.CreateClipData$ = CreateClipData$ = {}));
function createClipDataToJSON(createClipData) {
    return JSON.stringify(exports.CreateClipData$outboundSchema.parse(createClipData));
}
function createClipDataFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.CreateClipData$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateClipData' from JSON`);
}
/** @internal */
exports.CreateClipResponse$inboundSchema = z.object({
    ContentType: z.string(),
    StatusCode: z.number().int(),
    RawResponse: z.instanceof(Response),
    data: z.lazy(() => exports.CreateClipData$inboundSchema).optional(),
    error: components.ErrorT$inboundSchema.optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "ContentType": "contentType",
        "StatusCode": "statusCode",
        "RawResponse": "rawResponse",
    });
});
/** @internal */
exports.CreateClipResponse$outboundSchema = z.object({
    contentType: z.string(),
    statusCode: z.number().int(),
    rawResponse: z.instanceof(Response).transform(() => {
        throw new Error("Response cannot be serialized");
    }),
    data: z.lazy(() => exports.CreateClipData$outboundSchema).optional(),
    error: components.ErrorT$outboundSchema.optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        contentType: "ContentType",
        statusCode: "StatusCode",
        rawResponse: "RawResponse",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var CreateClipResponse$;
(function (CreateClipResponse$) {
    /** @deprecated use `CreateClipResponse$inboundSchema` instead. */
    CreateClipResponse$.inboundSchema = exports.CreateClipResponse$inboundSchema;
    /** @deprecated use `CreateClipResponse$outboundSchema` instead. */
    CreateClipResponse$.outboundSchema = exports.CreateClipResponse$outboundSchema;
})(CreateClipResponse$ || (exports.CreateClipResponse$ = CreateClipResponse$ = {}));
function createClipResponseToJSON(createClipResponse) {
    return JSON.stringify(exports.CreateClipResponse$outboundSchema.parse(createClipResponse));
}
function createClipResponseFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.CreateClipResponse$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateClipResponse' from JSON`);
}
//# sourceMappingURL=createclip.js.map