import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
export type CreateRoomUserRequest = {
    id: string;
    roomUserPayload: components.RoomUserPayload;
};
export type CreateRoomUserResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * Success
     */
    roomUserResponse?: components.RoomUserResponse | undefined;
    /**
     * Error
     */
    error?: components.ErrorT | undefined;
};
/** @internal */
export declare const CreateRoomUserRequest$inboundSchema: z.ZodType<CreateRoomUserRequest, z.ZodTypeDef, unknown>;
/** @internal */
export type CreateRoomUserRequest$Outbound = {
    id: string;
    "room-user-payload": components.RoomUserPayload$Outbound;
};
/** @internal */
export declare const CreateRoomUserRequest$outboundSchema: z.ZodType<CreateRoomUserRequest$Outbound, z.ZodTypeDef, CreateRoomUserRequest>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateRoomUserRequest$ {
    /** @deprecated use `CreateRoomUserRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CreateRoomUserRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `CreateRoomUserRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CreateRoomUserRequest$Outbound, z.ZodTypeDef, CreateRoomUserRequest>;
    /** @deprecated use `CreateRoomUserRequest$Outbound` instead. */
    type Outbound = CreateRoomUserRequest$Outbound;
}
export declare function createRoomUserRequestToJSON(createRoomUserRequest: CreateRoomUserRequest): string;
export declare function createRoomUserRequestFromJSON(jsonString: string): SafeParseResult<CreateRoomUserRequest, SDKValidationError>;
/** @internal */
export declare const CreateRoomUserResponse$inboundSchema: z.ZodType<CreateRoomUserResponse, z.ZodTypeDef, unknown>;
/** @internal */
export type CreateRoomUserResponse$Outbound = {
    ContentType: string;
    StatusCode: number;
    RawResponse: never;
    "room-user-response"?: components.RoomUserResponse$Outbound | undefined;
    error?: components.ErrorT$Outbound | undefined;
};
/** @internal */
export declare const CreateRoomUserResponse$outboundSchema: z.ZodType<CreateRoomUserResponse$Outbound, z.ZodTypeDef, CreateRoomUserResponse>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateRoomUserResponse$ {
    /** @deprecated use `CreateRoomUserResponse$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CreateRoomUserResponse, z.ZodTypeDef, unknown>;
    /** @deprecated use `CreateRoomUserResponse$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CreateRoomUserResponse$Outbound, z.ZodTypeDef, CreateRoomUserResponse>;
    /** @deprecated use `CreateRoomUserResponse$Outbound` instead. */
    type Outbound = CreateRoomUserResponse$Outbound;
}
export declare function createRoomUserResponseToJSON(createRoomUserResponse: CreateRoomUserResponse): string;
export declare function createRoomUserResponseFromJSON(jsonString: string): SafeParseResult<CreateRoomUserResponse, SDKValidationError>;
//# sourceMappingURL=createroomuser.d.ts.map