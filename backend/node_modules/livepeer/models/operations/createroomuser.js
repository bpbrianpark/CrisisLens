"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CreateRoomUserResponse$ = exports.CreateRoomUserResponse$outboundSchema = exports.CreateRoomUserResponse$inboundSchema = exports.CreateRoomUserRequest$ = exports.CreateRoomUserRequest$outboundSchema = exports.CreateRoomUserRequest$inboundSchema = void 0;
exports.createRoomUserRequestToJSON = createRoomUserRequestToJSON;
exports.createRoomUserRequestFromJSON = createRoomUserRequestFromJSON;
exports.createRoomUserResponseToJSON = createRoomUserResponseToJSON;
exports.createRoomUserResponseFromJSON = createRoomUserResponseFromJSON;
const z = __importStar(require("zod"));
const primitives_js_1 = require("../../lib/primitives.js");
const schemas_js_1 = require("../../lib/schemas.js");
const components = __importStar(require("../components/index.js"));
/** @internal */
exports.CreateRoomUserRequest$inboundSchema = z.object({
    id: z.string(),
    "room-user-payload": components.RoomUserPayload$inboundSchema,
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "room-user-payload": "roomUserPayload",
    });
});
/** @internal */
exports.CreateRoomUserRequest$outboundSchema = z.object({
    id: z.string(),
    roomUserPayload: components.RoomUserPayload$outboundSchema,
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        roomUserPayload: "room-user-payload",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var CreateRoomUserRequest$;
(function (CreateRoomUserRequest$) {
    /** @deprecated use `CreateRoomUserRequest$inboundSchema` instead. */
    CreateRoomUserRequest$.inboundSchema = exports.CreateRoomUserRequest$inboundSchema;
    /** @deprecated use `CreateRoomUserRequest$outboundSchema` instead. */
    CreateRoomUserRequest$.outboundSchema = exports.CreateRoomUserRequest$outboundSchema;
})(CreateRoomUserRequest$ || (exports.CreateRoomUserRequest$ = CreateRoomUserRequest$ = {}));
function createRoomUserRequestToJSON(createRoomUserRequest) {
    return JSON.stringify(exports.CreateRoomUserRequest$outboundSchema.parse(createRoomUserRequest));
}
function createRoomUserRequestFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.CreateRoomUserRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateRoomUserRequest' from JSON`);
}
/** @internal */
exports.CreateRoomUserResponse$inboundSchema = z.object({
    ContentType: z.string(),
    StatusCode: z.number().int(),
    RawResponse: z.instanceof(Response),
    "room-user-response": components.RoomUserResponse$inboundSchema.optional(),
    error: components.ErrorT$inboundSchema.optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "ContentType": "contentType",
        "StatusCode": "statusCode",
        "RawResponse": "rawResponse",
        "room-user-response": "roomUserResponse",
    });
});
/** @internal */
exports.CreateRoomUserResponse$outboundSchema = z.object({
    contentType: z.string(),
    statusCode: z.number().int(),
    rawResponse: z.instanceof(Response).transform(() => {
        throw new Error("Response cannot be serialized");
    }),
    roomUserResponse: components.RoomUserResponse$outboundSchema.optional(),
    error: components.ErrorT$outboundSchema.optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        contentType: "ContentType",
        statusCode: "StatusCode",
        rawResponse: "RawResponse",
        roomUserResponse: "room-user-response",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var CreateRoomUserResponse$;
(function (CreateRoomUserResponse$) {
    /** @deprecated use `CreateRoomUserResponse$inboundSchema` instead. */
    CreateRoomUserResponse$.inboundSchema = exports.CreateRoomUserResponse$inboundSchema;
    /** @deprecated use `CreateRoomUserResponse$outboundSchema` instead. */
    CreateRoomUserResponse$.outboundSchema = exports.CreateRoomUserResponse$outboundSchema;
})(CreateRoomUserResponse$ || (exports.CreateRoomUserResponse$ = CreateRoomUserResponse$ = {}));
function createRoomUserResponseToJSON(createRoomUserResponse) {
    return JSON.stringify(exports.CreateRoomUserResponse$outboundSchema.parse(createRoomUserResponse));
}
function createRoomUserResponseFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.CreateRoomUserResponse$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateRoomUserResponse' from JSON`);
}
//# sourceMappingURL=createroomuser.js.map