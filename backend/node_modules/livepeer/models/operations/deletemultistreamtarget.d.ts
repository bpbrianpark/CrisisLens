import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
export type DeleteMultistreamTargetRequest = {
    /**
     * ID of the multistream target
     */
    id: string;
};
export type DeleteMultistreamTargetResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * Error
     */
    error?: components.ErrorT | undefined;
};
/** @internal */
export declare const DeleteMultistreamTargetRequest$inboundSchema: z.ZodType<DeleteMultistreamTargetRequest, z.ZodTypeDef, unknown>;
/** @internal */
export type DeleteMultistreamTargetRequest$Outbound = {
    id: string;
};
/** @internal */
export declare const DeleteMultistreamTargetRequest$outboundSchema: z.ZodType<DeleteMultistreamTargetRequest$Outbound, z.ZodTypeDef, DeleteMultistreamTargetRequest>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace DeleteMultistreamTargetRequest$ {
    /** @deprecated use `DeleteMultistreamTargetRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<DeleteMultistreamTargetRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `DeleteMultistreamTargetRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<DeleteMultistreamTargetRequest$Outbound, z.ZodTypeDef, DeleteMultistreamTargetRequest>;
    /** @deprecated use `DeleteMultistreamTargetRequest$Outbound` instead. */
    type Outbound = DeleteMultistreamTargetRequest$Outbound;
}
export declare function deleteMultistreamTargetRequestToJSON(deleteMultistreamTargetRequest: DeleteMultistreamTargetRequest): string;
export declare function deleteMultistreamTargetRequestFromJSON(jsonString: string): SafeParseResult<DeleteMultistreamTargetRequest, SDKValidationError>;
/** @internal */
export declare const DeleteMultistreamTargetResponse$inboundSchema: z.ZodType<DeleteMultistreamTargetResponse, z.ZodTypeDef, unknown>;
/** @internal */
export type DeleteMultistreamTargetResponse$Outbound = {
    ContentType: string;
    StatusCode: number;
    RawResponse: never;
    error?: components.ErrorT$Outbound | undefined;
};
/** @internal */
export declare const DeleteMultistreamTargetResponse$outboundSchema: z.ZodType<DeleteMultistreamTargetResponse$Outbound, z.ZodTypeDef, DeleteMultistreamTargetResponse>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace DeleteMultistreamTargetResponse$ {
    /** @deprecated use `DeleteMultistreamTargetResponse$inboundSchema` instead. */
    const inboundSchema: z.ZodType<DeleteMultistreamTargetResponse, z.ZodTypeDef, unknown>;
    /** @deprecated use `DeleteMultistreamTargetResponse$outboundSchema` instead. */
    const outboundSchema: z.ZodType<DeleteMultistreamTargetResponse$Outbound, z.ZodTypeDef, DeleteMultistreamTargetResponse>;
    /** @deprecated use `DeleteMultistreamTargetResponse$Outbound` instead. */
    type Outbound = DeleteMultistreamTargetResponse$Outbound;
}
export declare function deleteMultistreamTargetResponseToJSON(deleteMultistreamTargetResponse: DeleteMultistreamTargetResponse): string;
export declare function deleteMultistreamTargetResponseFromJSON(jsonString: string): SafeParseResult<DeleteMultistreamTargetResponse, SDKValidationError>;
//# sourceMappingURL=deletemultistreamtarget.d.ts.map