import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
export type DeleteStreamRequest = {
    /**
     * ID of the stream
     */
    id: string;
};
export type DeleteStreamResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * Error
     */
    error?: components.ErrorT | undefined;
};
/** @internal */
export declare const DeleteStreamRequest$inboundSchema: z.ZodType<DeleteStreamRequest, z.ZodTypeDef, unknown>;
/** @internal */
export type DeleteStreamRequest$Outbound = {
    id: string;
};
/** @internal */
export declare const DeleteStreamRequest$outboundSchema: z.ZodType<DeleteStreamRequest$Outbound, z.ZodTypeDef, DeleteStreamRequest>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace DeleteStreamRequest$ {
    /** @deprecated use `DeleteStreamRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<DeleteStreamRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `DeleteStreamRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<DeleteStreamRequest$Outbound, z.ZodTypeDef, DeleteStreamRequest>;
    /** @deprecated use `DeleteStreamRequest$Outbound` instead. */
    type Outbound = DeleteStreamRequest$Outbound;
}
export declare function deleteStreamRequestToJSON(deleteStreamRequest: DeleteStreamRequest): string;
export declare function deleteStreamRequestFromJSON(jsonString: string): SafeParseResult<DeleteStreamRequest, SDKValidationError>;
/** @internal */
export declare const DeleteStreamResponse$inboundSchema: z.ZodType<DeleteStreamResponse, z.ZodTypeDef, unknown>;
/** @internal */
export type DeleteStreamResponse$Outbound = {
    ContentType: string;
    StatusCode: number;
    RawResponse: never;
    error?: components.ErrorT$Outbound | undefined;
};
/** @internal */
export declare const DeleteStreamResponse$outboundSchema: z.ZodType<DeleteStreamResponse$Outbound, z.ZodTypeDef, DeleteStreamResponse>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace DeleteStreamResponse$ {
    /** @deprecated use `DeleteStreamResponse$inboundSchema` instead. */
    const inboundSchema: z.ZodType<DeleteStreamResponse, z.ZodTypeDef, unknown>;
    /** @deprecated use `DeleteStreamResponse$outboundSchema` instead. */
    const outboundSchema: z.ZodType<DeleteStreamResponse$Outbound, z.ZodTypeDef, DeleteStreamResponse>;
    /** @deprecated use `DeleteStreamResponse$Outbound` instead. */
    type Outbound = DeleteStreamResponse$Outbound;
}
export declare function deleteStreamResponseToJSON(deleteStreamResponse: DeleteStreamResponse): string;
export declare function deleteStreamResponseFromJSON(jsonString: string): SafeParseResult<DeleteStreamResponse, SDKValidationError>;
//# sourceMappingURL=deletestream.d.ts.map