import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
export type DeleteWebhookRequest = {
    id: string;
};
export type DeleteWebhookResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * Success
     */
    webhook?: components.Webhook | undefined;
    /**
     * Error
     */
    error?: components.ErrorT | undefined;
};
/** @internal */
export declare const DeleteWebhookRequest$inboundSchema: z.ZodType<DeleteWebhookRequest, z.ZodTypeDef, unknown>;
/** @internal */
export type DeleteWebhookRequest$Outbound = {
    id: string;
};
/** @internal */
export declare const DeleteWebhookRequest$outboundSchema: z.ZodType<DeleteWebhookRequest$Outbound, z.ZodTypeDef, DeleteWebhookRequest>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace DeleteWebhookRequest$ {
    /** @deprecated use `DeleteWebhookRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<DeleteWebhookRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `DeleteWebhookRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<DeleteWebhookRequest$Outbound, z.ZodTypeDef, DeleteWebhookRequest>;
    /** @deprecated use `DeleteWebhookRequest$Outbound` instead. */
    type Outbound = DeleteWebhookRequest$Outbound;
}
export declare function deleteWebhookRequestToJSON(deleteWebhookRequest: DeleteWebhookRequest): string;
export declare function deleteWebhookRequestFromJSON(jsonString: string): SafeParseResult<DeleteWebhookRequest, SDKValidationError>;
/** @internal */
export declare const DeleteWebhookResponse$inboundSchema: z.ZodType<DeleteWebhookResponse, z.ZodTypeDef, unknown>;
/** @internal */
export type DeleteWebhookResponse$Outbound = {
    ContentType: string;
    StatusCode: number;
    RawResponse: never;
    webhook?: components.Webhook$Outbound | undefined;
    error?: components.ErrorT$Outbound | undefined;
};
/** @internal */
export declare const DeleteWebhookResponse$outboundSchema: z.ZodType<DeleteWebhookResponse$Outbound, z.ZodTypeDef, DeleteWebhookResponse>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace DeleteWebhookResponse$ {
    /** @deprecated use `DeleteWebhookResponse$inboundSchema` instead. */
    const inboundSchema: z.ZodType<DeleteWebhookResponse, z.ZodTypeDef, unknown>;
    /** @deprecated use `DeleteWebhookResponse$outboundSchema` instead. */
    const outboundSchema: z.ZodType<DeleteWebhookResponse$Outbound, z.ZodTypeDef, DeleteWebhookResponse>;
    /** @deprecated use `DeleteWebhookResponse$Outbound` instead. */
    type Outbound = DeleteWebhookResponse$Outbound;
}
export declare function deleteWebhookResponseToJSON(deleteWebhookResponse: DeleteWebhookResponse): string;
export declare function deleteWebhookResponseFromJSON(jsonString: string): SafeParseResult<DeleteWebhookResponse, SDKValidationError>;
//# sourceMappingURL=deletewebhook.d.ts.map