import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import * as errors from "../errors/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
export type GenAudioToTextResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * Successful Response
     */
    textResponse?: components.TextResponse | undefined;
    /**
     * Error
     */
    studioApiError?: errors.StudioApiError | undefined;
};
/** @internal */
export declare const GenAudioToTextResponse$inboundSchema: z.ZodType<GenAudioToTextResponse, z.ZodTypeDef, unknown>;
/** @internal */
export type GenAudioToTextResponse$Outbound = {
    ContentType: string;
    StatusCode: number;
    RawResponse: never;
    TextResponse?: components.TextResponse$Outbound | undefined;
    "studio-api-error"?: errors.StudioApiError$Outbound | undefined;
};
/** @internal */
export declare const GenAudioToTextResponse$outboundSchema: z.ZodType<GenAudioToTextResponse$Outbound, z.ZodTypeDef, GenAudioToTextResponse>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GenAudioToTextResponse$ {
    /** @deprecated use `GenAudioToTextResponse$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GenAudioToTextResponse, z.ZodTypeDef, unknown>;
    /** @deprecated use `GenAudioToTextResponse$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GenAudioToTextResponse$Outbound, z.ZodTypeDef, GenAudioToTextResponse>;
    /** @deprecated use `GenAudioToTextResponse$Outbound` instead. */
    type Outbound = GenAudioToTextResponse$Outbound;
}
export declare function genAudioToTextResponseToJSON(genAudioToTextResponse: GenAudioToTextResponse): string;
export declare function genAudioToTextResponseFromJSON(jsonString: string): SafeParseResult<GenAudioToTextResponse, SDKValidationError>;
//# sourceMappingURL=genaudiototext.d.ts.map