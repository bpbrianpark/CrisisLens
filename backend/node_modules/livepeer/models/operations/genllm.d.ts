import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import * as errors from "../errors/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
export type GenLLMResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * Successful Response
     */
    llmResponse?: components.LLMResponse | undefined;
    /**
     * Error
     */
    studioApiError?: errors.StudioApiError | undefined;
};
/** @internal */
export declare const GenLLMResponse$inboundSchema: z.ZodType<GenLLMResponse, z.ZodTypeDef, unknown>;
/** @internal */
export type GenLLMResponse$Outbound = {
    ContentType: string;
    StatusCode: number;
    RawResponse: never;
    LLMResponse?: components.LLMResponse$Outbound | undefined;
    "studio-api-error"?: errors.StudioApiError$Outbound | undefined;
};
/** @internal */
export declare const GenLLMResponse$outboundSchema: z.ZodType<GenLLMResponse$Outbound, z.ZodTypeDef, GenLLMResponse>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GenLLMResponse$ {
    /** @deprecated use `GenLLMResponse$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GenLLMResponse, z.ZodTypeDef, unknown>;
    /** @deprecated use `GenLLMResponse$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GenLLMResponse$Outbound, z.ZodTypeDef, GenLLMResponse>;
    /** @deprecated use `GenLLMResponse$Outbound` instead. */
    type Outbound = GenLLMResponse$Outbound;
}
export declare function genLLMResponseToJSON(genLLMResponse: GenLLMResponse): string;
export declare function genLLMResponseFromJSON(jsonString: string): SafeParseResult<GenLLMResponse, SDKValidationError>;
//# sourceMappingURL=genllm.d.ts.map