import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
/**
 * Start timestamp for the query range (inclusive)
 */
export type QueryParamFrom = Date | number;
/**
 * End timestamp for the query range (exclusive)
 */
export type QueryParamTo = Date | number;
/**
 * The time step to aggregate viewership metrics by
 */
export declare enum QueryParamTimeStep {
    Hour = "hour",
    Day = "day",
    Week = "week",
    Month = "month",
    Year = "year"
}
export declare enum GetCreatorViewershipMetricsQueryParamBreakdownBy {
    DeviceType = "deviceType",
    Device = "device",
    Cpu = "cpu",
    Os = "os",
    Browser = "browser",
    BrowserEngine = "browserEngine",
    Continent = "continent",
    Country = "country",
    Subdivision = "subdivision",
    Timezone = "timezone",
    ViewerId = "viewerId"
}
export type GetCreatorViewershipMetricsRequest = {
    /**
     * Start timestamp for the query range (inclusive)
     */
    from?: Date | number | undefined;
    /**
     * End timestamp for the query range (exclusive)
     */
    to?: Date | number | undefined;
    /**
     * The time step to aggregate viewership metrics by
     */
    timeStep?: QueryParamTimeStep | undefined;
    /**
     * The asset ID to filter metrics for
     */
    assetId?: string | undefined;
    /**
     * The stream ID to filter metrics for
     */
    streamId?: string | undefined;
    /**
     * The creator ID to filter the query results
     */
    creatorId?: string | undefined;
    /**
     * The list of fields to break down the query results. Specify this
     *
     * @remarks
     * query-string multiple times to break down by multiple fields.
     */
    breakdownBy?: Array<GetCreatorViewershipMetricsQueryParamBreakdownBy> | undefined;
};
export type GetCreatorViewershipMetricsResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * A list of Metric objects
     */
    data?: Array<components.ViewershipMetric> | undefined;
    /**
     * Error
     */
    error?: components.ErrorT | undefined;
};
/** @internal */
export declare const QueryParamFrom$inboundSchema: z.ZodType<QueryParamFrom, z.ZodTypeDef, unknown>;
/** @internal */
export type QueryParamFrom$Outbound = string | number;
/** @internal */
export declare const QueryParamFrom$outboundSchema: z.ZodType<QueryParamFrom$Outbound, z.ZodTypeDef, QueryParamFrom>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace QueryParamFrom$ {
    /** @deprecated use `QueryParamFrom$inboundSchema` instead. */
    const inboundSchema: z.ZodType<QueryParamFrom, z.ZodTypeDef, unknown>;
    /** @deprecated use `QueryParamFrom$outboundSchema` instead. */
    const outboundSchema: z.ZodType<QueryParamFrom$Outbound, z.ZodTypeDef, QueryParamFrom>;
    /** @deprecated use `QueryParamFrom$Outbound` instead. */
    type Outbound = QueryParamFrom$Outbound;
}
export declare function queryParamFromToJSON(queryParamFrom: QueryParamFrom): string;
export declare function queryParamFromFromJSON(jsonString: string): SafeParseResult<QueryParamFrom, SDKValidationError>;
/** @internal */
export declare const QueryParamTo$inboundSchema: z.ZodType<QueryParamTo, z.ZodTypeDef, unknown>;
/** @internal */
export type QueryParamTo$Outbound = string | number;
/** @internal */
export declare const QueryParamTo$outboundSchema: z.ZodType<QueryParamTo$Outbound, z.ZodTypeDef, QueryParamTo>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace QueryParamTo$ {
    /** @deprecated use `QueryParamTo$inboundSchema` instead. */
    const inboundSchema: z.ZodType<QueryParamTo, z.ZodTypeDef, unknown>;
    /** @deprecated use `QueryParamTo$outboundSchema` instead. */
    const outboundSchema: z.ZodType<QueryParamTo$Outbound, z.ZodTypeDef, QueryParamTo>;
    /** @deprecated use `QueryParamTo$Outbound` instead. */
    type Outbound = QueryParamTo$Outbound;
}
export declare function queryParamToToJSON(queryParamTo: QueryParamTo): string;
export declare function queryParamToFromJSON(jsonString: string): SafeParseResult<QueryParamTo, SDKValidationError>;
/** @internal */
export declare const QueryParamTimeStep$inboundSchema: z.ZodNativeEnum<typeof QueryParamTimeStep>;
/** @internal */
export declare const QueryParamTimeStep$outboundSchema: z.ZodNativeEnum<typeof QueryParamTimeStep>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace QueryParamTimeStep$ {
    /** @deprecated use `QueryParamTimeStep$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<typeof QueryParamTimeStep>;
    /** @deprecated use `QueryParamTimeStep$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<typeof QueryParamTimeStep>;
}
/** @internal */
export declare const GetCreatorViewershipMetricsQueryParamBreakdownBy$inboundSchema: z.ZodNativeEnum<typeof GetCreatorViewershipMetricsQueryParamBreakdownBy>;
/** @internal */
export declare const GetCreatorViewershipMetricsQueryParamBreakdownBy$outboundSchema: z.ZodNativeEnum<typeof GetCreatorViewershipMetricsQueryParamBreakdownBy>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetCreatorViewershipMetricsQueryParamBreakdownBy$ {
    /** @deprecated use `GetCreatorViewershipMetricsQueryParamBreakdownBy$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<typeof GetCreatorViewershipMetricsQueryParamBreakdownBy>;
    /** @deprecated use `GetCreatorViewershipMetricsQueryParamBreakdownBy$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<typeof GetCreatorViewershipMetricsQueryParamBreakdownBy>;
}
/** @internal */
export declare const GetCreatorViewershipMetricsRequest$inboundSchema: z.ZodType<GetCreatorViewershipMetricsRequest, z.ZodTypeDef, unknown>;
/** @internal */
export type GetCreatorViewershipMetricsRequest$Outbound = {
    from?: string | number | undefined;
    to?: string | number | undefined;
    timeStep?: string | undefined;
    assetId?: string | undefined;
    streamId?: string | undefined;
    creatorId?: string | undefined;
    "breakdownBy[]"?: Array<string> | undefined;
};
/** @internal */
export declare const GetCreatorViewershipMetricsRequest$outboundSchema: z.ZodType<GetCreatorViewershipMetricsRequest$Outbound, z.ZodTypeDef, GetCreatorViewershipMetricsRequest>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetCreatorViewershipMetricsRequest$ {
    /** @deprecated use `GetCreatorViewershipMetricsRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetCreatorViewershipMetricsRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetCreatorViewershipMetricsRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetCreatorViewershipMetricsRequest$Outbound, z.ZodTypeDef, GetCreatorViewershipMetricsRequest>;
    /** @deprecated use `GetCreatorViewershipMetricsRequest$Outbound` instead. */
    type Outbound = GetCreatorViewershipMetricsRequest$Outbound;
}
export declare function getCreatorViewershipMetricsRequestToJSON(getCreatorViewershipMetricsRequest: GetCreatorViewershipMetricsRequest): string;
export declare function getCreatorViewershipMetricsRequestFromJSON(jsonString: string): SafeParseResult<GetCreatorViewershipMetricsRequest, SDKValidationError>;
/** @internal */
export declare const GetCreatorViewershipMetricsResponse$inboundSchema: z.ZodType<GetCreatorViewershipMetricsResponse, z.ZodTypeDef, unknown>;
/** @internal */
export type GetCreatorViewershipMetricsResponse$Outbound = {
    ContentType: string;
    StatusCode: number;
    RawResponse: never;
    data?: Array<components.ViewershipMetric$Outbound> | undefined;
    error?: components.ErrorT$Outbound | undefined;
};
/** @internal */
export declare const GetCreatorViewershipMetricsResponse$outboundSchema: z.ZodType<GetCreatorViewershipMetricsResponse$Outbound, z.ZodTypeDef, GetCreatorViewershipMetricsResponse>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetCreatorViewershipMetricsResponse$ {
    /** @deprecated use `GetCreatorViewershipMetricsResponse$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetCreatorViewershipMetricsResponse, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetCreatorViewershipMetricsResponse$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetCreatorViewershipMetricsResponse$Outbound, z.ZodTypeDef, GetCreatorViewershipMetricsResponse>;
    /** @deprecated use `GetCreatorViewershipMetricsResponse$Outbound` instead. */
    type Outbound = GetCreatorViewershipMetricsResponse$Outbound;
}
export declare function getCreatorViewershipMetricsResponseToJSON(getCreatorViewershipMetricsResponse: GetCreatorViewershipMetricsResponse): string;
export declare function getCreatorViewershipMetricsResponseFromJSON(jsonString: string): SafeParseResult<GetCreatorViewershipMetricsResponse, SDKValidationError>;
//# sourceMappingURL=getcreatorviewershipmetrics.d.ts.map