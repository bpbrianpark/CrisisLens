import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
export type GetMultistreamTargetRequest = {
    /**
     * ID of the multistream target
     */
    id: string;
};
export type GetMultistreamTargetResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * Success
     */
    multistreamTarget?: components.MultistreamTarget | undefined;
    /**
     * Error
     */
    error?: components.ErrorT | undefined;
};
/** @internal */
export declare const GetMultistreamTargetRequest$inboundSchema: z.ZodType<GetMultistreamTargetRequest, z.ZodTypeDef, unknown>;
/** @internal */
export type GetMultistreamTargetRequest$Outbound = {
    id: string;
};
/** @internal */
export declare const GetMultistreamTargetRequest$outboundSchema: z.ZodType<GetMultistreamTargetRequest$Outbound, z.ZodTypeDef, GetMultistreamTargetRequest>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetMultistreamTargetRequest$ {
    /** @deprecated use `GetMultistreamTargetRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetMultistreamTargetRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetMultistreamTargetRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetMultistreamTargetRequest$Outbound, z.ZodTypeDef, GetMultistreamTargetRequest>;
    /** @deprecated use `GetMultistreamTargetRequest$Outbound` instead. */
    type Outbound = GetMultistreamTargetRequest$Outbound;
}
export declare function getMultistreamTargetRequestToJSON(getMultistreamTargetRequest: GetMultistreamTargetRequest): string;
export declare function getMultistreamTargetRequestFromJSON(jsonString: string): SafeParseResult<GetMultistreamTargetRequest, SDKValidationError>;
/** @internal */
export declare const GetMultistreamTargetResponse$inboundSchema: z.ZodType<GetMultistreamTargetResponse, z.ZodTypeDef, unknown>;
/** @internal */
export type GetMultistreamTargetResponse$Outbound = {
    ContentType: string;
    StatusCode: number;
    RawResponse: never;
    "multistream-target"?: components.MultistreamTarget$Outbound | undefined;
    error?: components.ErrorT$Outbound | undefined;
};
/** @internal */
export declare const GetMultistreamTargetResponse$outboundSchema: z.ZodType<GetMultistreamTargetResponse$Outbound, z.ZodTypeDef, GetMultistreamTargetResponse>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetMultistreamTargetResponse$ {
    /** @deprecated use `GetMultistreamTargetResponse$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetMultistreamTargetResponse, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetMultistreamTargetResponse$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetMultistreamTargetResponse$Outbound, z.ZodTypeDef, GetMultistreamTargetResponse>;
    /** @deprecated use `GetMultistreamTargetResponse$Outbound` instead. */
    type Outbound = GetMultistreamTargetResponse$Outbound;
}
export declare function getMultistreamTargetResponseToJSON(getMultistreamTargetResponse: GetMultistreamTargetResponse): string;
export declare function getMultistreamTargetResponseFromJSON(jsonString: string): SafeParseResult<GetMultistreamTargetResponse, SDKValidationError>;
//# sourceMappingURL=getmultistreamtarget.d.ts.map