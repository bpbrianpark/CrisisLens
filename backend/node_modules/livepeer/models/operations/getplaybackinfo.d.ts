import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
export type GetPlaybackInfoRequest = {
    /**
     * The playback ID from the asset or livestream, e.g. `eaw4nk06ts2d0mzb`.
     */
    id: string;
};
export type GetPlaybackInfoResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * Successful response
     */
    playbackInfo?: components.PlaybackInfo | undefined;
    /**
     * Playback not found
     */
    error?: components.ErrorT | undefined;
};
/** @internal */
export declare const GetPlaybackInfoRequest$inboundSchema: z.ZodType<GetPlaybackInfoRequest, z.ZodTypeDef, unknown>;
/** @internal */
export type GetPlaybackInfoRequest$Outbound = {
    id: string;
};
/** @internal */
export declare const GetPlaybackInfoRequest$outboundSchema: z.ZodType<GetPlaybackInfoRequest$Outbound, z.ZodTypeDef, GetPlaybackInfoRequest>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetPlaybackInfoRequest$ {
    /** @deprecated use `GetPlaybackInfoRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetPlaybackInfoRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetPlaybackInfoRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetPlaybackInfoRequest$Outbound, z.ZodTypeDef, GetPlaybackInfoRequest>;
    /** @deprecated use `GetPlaybackInfoRequest$Outbound` instead. */
    type Outbound = GetPlaybackInfoRequest$Outbound;
}
export declare function getPlaybackInfoRequestToJSON(getPlaybackInfoRequest: GetPlaybackInfoRequest): string;
export declare function getPlaybackInfoRequestFromJSON(jsonString: string): SafeParseResult<GetPlaybackInfoRequest, SDKValidationError>;
/** @internal */
export declare const GetPlaybackInfoResponse$inboundSchema: z.ZodType<GetPlaybackInfoResponse, z.ZodTypeDef, unknown>;
/** @internal */
export type GetPlaybackInfoResponse$Outbound = {
    ContentType: string;
    StatusCode: number;
    RawResponse: never;
    "playback-info"?: components.PlaybackInfo$Outbound | undefined;
    error?: components.ErrorT$Outbound | undefined;
};
/** @internal */
export declare const GetPlaybackInfoResponse$outboundSchema: z.ZodType<GetPlaybackInfoResponse$Outbound, z.ZodTypeDef, GetPlaybackInfoResponse>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetPlaybackInfoResponse$ {
    /** @deprecated use `GetPlaybackInfoResponse$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetPlaybackInfoResponse, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetPlaybackInfoResponse$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetPlaybackInfoResponse$Outbound, z.ZodTypeDef, GetPlaybackInfoResponse>;
    /** @deprecated use `GetPlaybackInfoResponse$Outbound` instead. */
    type Outbound = GetPlaybackInfoResponse$Outbound;
}
export declare function getPlaybackInfoResponseToJSON(getPlaybackInfoResponse: GetPlaybackInfoResponse): string;
export declare function getPlaybackInfoResponseFromJSON(jsonString: string): SafeParseResult<GetPlaybackInfoResponse, SDKValidationError>;
//# sourceMappingURL=getplaybackinfo.d.ts.map