"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GetPublicViewershipMetricsResponse$ = exports.GetPublicViewershipMetricsResponse$outboundSchema = exports.GetPublicViewershipMetricsResponse$inboundSchema = exports.GetPublicViewershipMetricsData$ = exports.GetPublicViewershipMetricsData$outboundSchema = exports.GetPublicViewershipMetricsData$inboundSchema = exports.GetPublicViewershipMetricsRequest$ = exports.GetPublicViewershipMetricsRequest$outboundSchema = exports.GetPublicViewershipMetricsRequest$inboundSchema = void 0;
exports.getPublicViewershipMetricsRequestToJSON = getPublicViewershipMetricsRequestToJSON;
exports.getPublicViewershipMetricsRequestFromJSON = getPublicViewershipMetricsRequestFromJSON;
exports.getPublicViewershipMetricsDataToJSON = getPublicViewershipMetricsDataToJSON;
exports.getPublicViewershipMetricsDataFromJSON = getPublicViewershipMetricsDataFromJSON;
exports.getPublicViewershipMetricsResponseToJSON = getPublicViewershipMetricsResponseToJSON;
exports.getPublicViewershipMetricsResponseFromJSON = getPublicViewershipMetricsResponseFromJSON;
const z = __importStar(require("zod"));
const primitives_js_1 = require("../../lib/primitives.js");
const schemas_js_1 = require("../../lib/schemas.js");
const components = __importStar(require("../components/index.js"));
/** @internal */
exports.GetPublicViewershipMetricsRequest$inboundSchema = z.object({
    playbackId: z.string(),
});
/** @internal */
exports.GetPublicViewershipMetricsRequest$outboundSchema = z.object({
    playbackId: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var GetPublicViewershipMetricsRequest$;
(function (GetPublicViewershipMetricsRequest$) {
    /** @deprecated use `GetPublicViewershipMetricsRequest$inboundSchema` instead. */
    GetPublicViewershipMetricsRequest$.inboundSchema = exports.GetPublicViewershipMetricsRequest$inboundSchema;
    /** @deprecated use `GetPublicViewershipMetricsRequest$outboundSchema` instead. */
    GetPublicViewershipMetricsRequest$.outboundSchema = exports.GetPublicViewershipMetricsRequest$outboundSchema;
})(GetPublicViewershipMetricsRequest$ || (exports.GetPublicViewershipMetricsRequest$ = GetPublicViewershipMetricsRequest$ = {}));
function getPublicViewershipMetricsRequestToJSON(getPublicViewershipMetricsRequest) {
    return JSON.stringify(exports.GetPublicViewershipMetricsRequest$outboundSchema.parse(getPublicViewershipMetricsRequest));
}
function getPublicViewershipMetricsRequestFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.GetPublicViewershipMetricsRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetPublicViewershipMetricsRequest' from JSON`);
}
/** @internal */
exports.GetPublicViewershipMetricsData$inboundSchema = z.object({
    playbackId: z.string().optional(),
    dStorageUrl: z.string().optional(),
    viewCount: z.number().int().optional(),
    playtimeMins: z.number().optional(),
});
/** @internal */
exports.GetPublicViewershipMetricsData$outboundSchema = z.object({
    playbackId: z.string().optional(),
    dStorageUrl: z.string().optional(),
    viewCount: z.number().int().optional(),
    playtimeMins: z.number().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var GetPublicViewershipMetricsData$;
(function (GetPublicViewershipMetricsData$) {
    /** @deprecated use `GetPublicViewershipMetricsData$inboundSchema` instead. */
    GetPublicViewershipMetricsData$.inboundSchema = exports.GetPublicViewershipMetricsData$inboundSchema;
    /** @deprecated use `GetPublicViewershipMetricsData$outboundSchema` instead. */
    GetPublicViewershipMetricsData$.outboundSchema = exports.GetPublicViewershipMetricsData$outboundSchema;
})(GetPublicViewershipMetricsData$ || (exports.GetPublicViewershipMetricsData$ = GetPublicViewershipMetricsData$ = {}));
function getPublicViewershipMetricsDataToJSON(getPublicViewershipMetricsData) {
    return JSON.stringify(exports.GetPublicViewershipMetricsData$outboundSchema.parse(getPublicViewershipMetricsData));
}
function getPublicViewershipMetricsDataFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.GetPublicViewershipMetricsData$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetPublicViewershipMetricsData' from JSON`);
}
/** @internal */
exports.GetPublicViewershipMetricsResponse$inboundSchema = z.object({
    ContentType: z.string(),
    StatusCode: z.number().int(),
    RawResponse: z.instanceof(Response),
    data: z.lazy(() => exports.GetPublicViewershipMetricsData$inboundSchema).optional(),
    error: components.ErrorT$inboundSchema.optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "ContentType": "contentType",
        "StatusCode": "statusCode",
        "RawResponse": "rawResponse",
    });
});
/** @internal */
exports.GetPublicViewershipMetricsResponse$outboundSchema = z.object({
    contentType: z.string(),
    statusCode: z.number().int(),
    rawResponse: z.instanceof(Response).transform(() => {
        throw new Error("Response cannot be serialized");
    }),
    data: z.lazy(() => exports.GetPublicViewershipMetricsData$outboundSchema).optional(),
    error: components.ErrorT$outboundSchema.optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        contentType: "ContentType",
        statusCode: "StatusCode",
        rawResponse: "RawResponse",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var GetPublicViewershipMetricsResponse$;
(function (GetPublicViewershipMetricsResponse$) {
    /** @deprecated use `GetPublicViewershipMetricsResponse$inboundSchema` instead. */
    GetPublicViewershipMetricsResponse$.inboundSchema = exports.GetPublicViewershipMetricsResponse$inboundSchema;
    /** @deprecated use `GetPublicViewershipMetricsResponse$outboundSchema` instead. */
    GetPublicViewershipMetricsResponse$.outboundSchema = exports.GetPublicViewershipMetricsResponse$outboundSchema;
})(GetPublicViewershipMetricsResponse$ || (exports.GetPublicViewershipMetricsResponse$ = GetPublicViewershipMetricsResponse$ = {}));
function getPublicViewershipMetricsResponseToJSON(getPublicViewershipMetricsResponse) {
    return JSON.stringify(exports.GetPublicViewershipMetricsResponse$outboundSchema.parse(getPublicViewershipMetricsResponse));
}
function getPublicViewershipMetricsResponseFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.GetPublicViewershipMetricsResponse$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetPublicViewershipMetricsResponse' from JSON`);
}
//# sourceMappingURL=getpublicviewershipmetrics.js.map