import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
export declare enum BreakdownBy {
    PlaybackId = "playbackId",
    Device = "device",
    Browser = "browser",
    Country = "country"
}
export type GetRealtimeViewershipNowRequest = {
    /**
     * The playback ID to filter the query results. This can be a canonical
     *
     * @remarks
     * playback ID from Livepeer assets or streams, or dStorage identifiers
     * for assets
     */
    playbackId?: string | undefined;
    /**
     * The creator ID to filter the query results
     */
    creatorId?: string | undefined;
    /**
     * The list of fields to break down the query results. Specify this
     *
     * @remarks
     * query-string multiple times to break down by multiple fields.
     */
    breakdownBy?: Array<BreakdownBy> | undefined;
};
export type GetRealtimeViewershipNowResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * A list of Metric objects
     */
    data?: Array<components.RealtimeViewershipMetric> | undefined;
    /**
     * Error
     */
    error?: components.ErrorT | undefined;
};
/** @internal */
export declare const BreakdownBy$inboundSchema: z.ZodNativeEnum<typeof BreakdownBy>;
/** @internal */
export declare const BreakdownBy$outboundSchema: z.ZodNativeEnum<typeof BreakdownBy>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace BreakdownBy$ {
    /** @deprecated use `BreakdownBy$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<typeof BreakdownBy>;
    /** @deprecated use `BreakdownBy$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<typeof BreakdownBy>;
}
/** @internal */
export declare const GetRealtimeViewershipNowRequest$inboundSchema: z.ZodType<GetRealtimeViewershipNowRequest, z.ZodTypeDef, unknown>;
/** @internal */
export type GetRealtimeViewershipNowRequest$Outbound = {
    playbackId?: string | undefined;
    creatorId?: string | undefined;
    "breakdownBy[]"?: Array<string> | undefined;
};
/** @internal */
export declare const GetRealtimeViewershipNowRequest$outboundSchema: z.ZodType<GetRealtimeViewershipNowRequest$Outbound, z.ZodTypeDef, GetRealtimeViewershipNowRequest>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetRealtimeViewershipNowRequest$ {
    /** @deprecated use `GetRealtimeViewershipNowRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetRealtimeViewershipNowRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetRealtimeViewershipNowRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetRealtimeViewershipNowRequest$Outbound, z.ZodTypeDef, GetRealtimeViewershipNowRequest>;
    /** @deprecated use `GetRealtimeViewershipNowRequest$Outbound` instead. */
    type Outbound = GetRealtimeViewershipNowRequest$Outbound;
}
export declare function getRealtimeViewershipNowRequestToJSON(getRealtimeViewershipNowRequest: GetRealtimeViewershipNowRequest): string;
export declare function getRealtimeViewershipNowRequestFromJSON(jsonString: string): SafeParseResult<GetRealtimeViewershipNowRequest, SDKValidationError>;
/** @internal */
export declare const GetRealtimeViewershipNowResponse$inboundSchema: z.ZodType<GetRealtimeViewershipNowResponse, z.ZodTypeDef, unknown>;
/** @internal */
export type GetRealtimeViewershipNowResponse$Outbound = {
    ContentType: string;
    StatusCode: number;
    RawResponse: never;
    data?: Array<components.RealtimeViewershipMetric$Outbound> | undefined;
    error?: components.ErrorT$Outbound | undefined;
};
/** @internal */
export declare const GetRealtimeViewershipNowResponse$outboundSchema: z.ZodType<GetRealtimeViewershipNowResponse$Outbound, z.ZodTypeDef, GetRealtimeViewershipNowResponse>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetRealtimeViewershipNowResponse$ {
    /** @deprecated use `GetRealtimeViewershipNowResponse$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetRealtimeViewershipNowResponse, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetRealtimeViewershipNowResponse$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetRealtimeViewershipNowResponse$Outbound, z.ZodTypeDef, GetRealtimeViewershipNowResponse>;
    /** @deprecated use `GetRealtimeViewershipNowResponse$Outbound` instead. */
    type Outbound = GetRealtimeViewershipNowResponse$Outbound;
}
export declare function getRealtimeViewershipNowResponseToJSON(getRealtimeViewershipNowResponse: GetRealtimeViewershipNowResponse): string;
export declare function getRealtimeViewershipNowResponseFromJSON(jsonString: string): SafeParseResult<GetRealtimeViewershipNowResponse, SDKValidationError>;
//# sourceMappingURL=getrealtimeviewershipnow.d.ts.map