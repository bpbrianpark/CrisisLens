"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GetRealtimeViewershipNowResponse$ = exports.GetRealtimeViewershipNowResponse$outboundSchema = exports.GetRealtimeViewershipNowResponse$inboundSchema = exports.GetRealtimeViewershipNowRequest$ = exports.GetRealtimeViewershipNowRequest$outboundSchema = exports.GetRealtimeViewershipNowRequest$inboundSchema = exports.BreakdownBy$ = exports.BreakdownBy$outboundSchema = exports.BreakdownBy$inboundSchema = exports.BreakdownBy = void 0;
exports.getRealtimeViewershipNowRequestToJSON = getRealtimeViewershipNowRequestToJSON;
exports.getRealtimeViewershipNowRequestFromJSON = getRealtimeViewershipNowRequestFromJSON;
exports.getRealtimeViewershipNowResponseToJSON = getRealtimeViewershipNowResponseToJSON;
exports.getRealtimeViewershipNowResponseFromJSON = getRealtimeViewershipNowResponseFromJSON;
const z = __importStar(require("zod"));
const primitives_js_1 = require("../../lib/primitives.js");
const schemas_js_1 = require("../../lib/schemas.js");
const components = __importStar(require("../components/index.js"));
var BreakdownBy;
(function (BreakdownBy) {
    BreakdownBy["PlaybackId"] = "playbackId";
    BreakdownBy["Device"] = "device";
    BreakdownBy["Browser"] = "browser";
    BreakdownBy["Country"] = "country";
})(BreakdownBy || (exports.BreakdownBy = BreakdownBy = {}));
/** @internal */
exports.BreakdownBy$inboundSchema = z
    .nativeEnum(BreakdownBy);
/** @internal */
exports.BreakdownBy$outboundSchema = exports.BreakdownBy$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var BreakdownBy$;
(function (BreakdownBy$) {
    /** @deprecated use `BreakdownBy$inboundSchema` instead. */
    BreakdownBy$.inboundSchema = exports.BreakdownBy$inboundSchema;
    /** @deprecated use `BreakdownBy$outboundSchema` instead. */
    BreakdownBy$.outboundSchema = exports.BreakdownBy$outboundSchema;
})(BreakdownBy$ || (exports.BreakdownBy$ = BreakdownBy$ = {}));
/** @internal */
exports.GetRealtimeViewershipNowRequest$inboundSchema = z.object({
    playbackId: z.string().optional(),
    creatorId: z.string().optional(),
    "breakdownBy[]": z.array(exports.BreakdownBy$inboundSchema).optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "breakdownBy[]": "breakdownBy",
    });
});
/** @internal */
exports.GetRealtimeViewershipNowRequest$outboundSchema = z.object({
    playbackId: z.string().optional(),
    creatorId: z.string().optional(),
    breakdownBy: z.array(exports.BreakdownBy$outboundSchema).optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        breakdownBy: "breakdownBy[]",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var GetRealtimeViewershipNowRequest$;
(function (GetRealtimeViewershipNowRequest$) {
    /** @deprecated use `GetRealtimeViewershipNowRequest$inboundSchema` instead. */
    GetRealtimeViewershipNowRequest$.inboundSchema = exports.GetRealtimeViewershipNowRequest$inboundSchema;
    /** @deprecated use `GetRealtimeViewershipNowRequest$outboundSchema` instead. */
    GetRealtimeViewershipNowRequest$.outboundSchema = exports.GetRealtimeViewershipNowRequest$outboundSchema;
})(GetRealtimeViewershipNowRequest$ || (exports.GetRealtimeViewershipNowRequest$ = GetRealtimeViewershipNowRequest$ = {}));
function getRealtimeViewershipNowRequestToJSON(getRealtimeViewershipNowRequest) {
    return JSON.stringify(exports.GetRealtimeViewershipNowRequest$outboundSchema.parse(getRealtimeViewershipNowRequest));
}
function getRealtimeViewershipNowRequestFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.GetRealtimeViewershipNowRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetRealtimeViewershipNowRequest' from JSON`);
}
/** @internal */
exports.GetRealtimeViewershipNowResponse$inboundSchema = z.object({
    ContentType: z.string(),
    StatusCode: z.number().int(),
    RawResponse: z.instanceof(Response),
    data: z.array(components.RealtimeViewershipMetric$inboundSchema).optional(),
    error: components.ErrorT$inboundSchema.optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "ContentType": "contentType",
        "StatusCode": "statusCode",
        "RawResponse": "rawResponse",
    });
});
/** @internal */
exports.GetRealtimeViewershipNowResponse$outboundSchema = z.object({
    contentType: z.string(),
    statusCode: z.number().int(),
    rawResponse: z.instanceof(Response).transform(() => {
        throw new Error("Response cannot be serialized");
    }),
    data: z.array(components.RealtimeViewershipMetric$outboundSchema).optional(),
    error: components.ErrorT$outboundSchema.optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        contentType: "ContentType",
        statusCode: "StatusCode",
        rawResponse: "RawResponse",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var GetRealtimeViewershipNowResponse$;
(function (GetRealtimeViewershipNowResponse$) {
    /** @deprecated use `GetRealtimeViewershipNowResponse$inboundSchema` instead. */
    GetRealtimeViewershipNowResponse$.inboundSchema = exports.GetRealtimeViewershipNowResponse$inboundSchema;
    /** @deprecated use `GetRealtimeViewershipNowResponse$outboundSchema` instead. */
    GetRealtimeViewershipNowResponse$.outboundSchema = exports.GetRealtimeViewershipNowResponse$outboundSchema;
})(GetRealtimeViewershipNowResponse$ || (exports.GetRealtimeViewershipNowResponse$ = GetRealtimeViewershipNowResponse$ = {}));
function getRealtimeViewershipNowResponseToJSON(getRealtimeViewershipNowResponse) {
    return JSON.stringify(exports.GetRealtimeViewershipNowResponse$outboundSchema.parse(getRealtimeViewershipNowResponse));
}
function getRealtimeViewershipNowResponseFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.GetRealtimeViewershipNowResponse$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetRealtimeViewershipNowResponse' from JSON`);
}
//# sourceMappingURL=getrealtimeviewershipnow.js.map