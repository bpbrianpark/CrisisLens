import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
/**
 * Flag indicating if the response should only include recorded
 *
 * @remarks
 * sessions
 */
export type RecordT = boolean | number;
export type GetRecordedSessionsRequest = {
    /**
     * ID of the parent stream
     */
    parentId: string;
    /**
     * Flag indicating if the response should only include recorded
     *
     * @remarks
     * sessions
     */
    record?: boolean | number | undefined;
};
export type GetRecordedSessionsResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * Success
     */
    data?: Array<components.Session> | undefined;
    /**
     * Error
     */
    error?: components.ErrorT | undefined;
};
/** @internal */
export declare const RecordT$inboundSchema: z.ZodType<RecordT, z.ZodTypeDef, unknown>;
/** @internal */
export type RecordT$Outbound = boolean | number;
/** @internal */
export declare const RecordT$outboundSchema: z.ZodType<RecordT$Outbound, z.ZodTypeDef, RecordT>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace RecordT$ {
    /** @deprecated use `RecordT$inboundSchema` instead. */
    const inboundSchema: z.ZodType<RecordT, z.ZodTypeDef, unknown>;
    /** @deprecated use `RecordT$outboundSchema` instead. */
    const outboundSchema: z.ZodType<RecordT$Outbound, z.ZodTypeDef, RecordT>;
    /** @deprecated use `RecordT$Outbound` instead. */
    type Outbound = RecordT$Outbound;
}
export declare function recordTToJSON(recordT: RecordT): string;
export declare function recordTFromJSON(jsonString: string): SafeParseResult<RecordT, SDKValidationError>;
/** @internal */
export declare const GetRecordedSessionsRequest$inboundSchema: z.ZodType<GetRecordedSessionsRequest, z.ZodTypeDef, unknown>;
/** @internal */
export type GetRecordedSessionsRequest$Outbound = {
    parentId: string;
    record?: boolean | number | undefined;
};
/** @internal */
export declare const GetRecordedSessionsRequest$outboundSchema: z.ZodType<GetRecordedSessionsRequest$Outbound, z.ZodTypeDef, GetRecordedSessionsRequest>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetRecordedSessionsRequest$ {
    /** @deprecated use `GetRecordedSessionsRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetRecordedSessionsRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetRecordedSessionsRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetRecordedSessionsRequest$Outbound, z.ZodTypeDef, GetRecordedSessionsRequest>;
    /** @deprecated use `GetRecordedSessionsRequest$Outbound` instead. */
    type Outbound = GetRecordedSessionsRequest$Outbound;
}
export declare function getRecordedSessionsRequestToJSON(getRecordedSessionsRequest: GetRecordedSessionsRequest): string;
export declare function getRecordedSessionsRequestFromJSON(jsonString: string): SafeParseResult<GetRecordedSessionsRequest, SDKValidationError>;
/** @internal */
export declare const GetRecordedSessionsResponse$inboundSchema: z.ZodType<GetRecordedSessionsResponse, z.ZodTypeDef, unknown>;
/** @internal */
export type GetRecordedSessionsResponse$Outbound = {
    ContentType: string;
    StatusCode: number;
    RawResponse: never;
    data?: Array<components.Session$Outbound> | undefined;
    error?: components.ErrorT$Outbound | undefined;
};
/** @internal */
export declare const GetRecordedSessionsResponse$outboundSchema: z.ZodType<GetRecordedSessionsResponse$Outbound, z.ZodTypeDef, GetRecordedSessionsResponse>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetRecordedSessionsResponse$ {
    /** @deprecated use `GetRecordedSessionsResponse$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetRecordedSessionsResponse, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetRecordedSessionsResponse$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetRecordedSessionsResponse$Outbound, z.ZodTypeDef, GetRecordedSessionsResponse>;
    /** @deprecated use `GetRecordedSessionsResponse$Outbound` instead. */
    type Outbound = GetRecordedSessionsResponse$Outbound;
}
export declare function getRecordedSessionsResponseToJSON(getRecordedSessionsResponse: GetRecordedSessionsResponse): string;
export declare function getRecordedSessionsResponseFromJSON(jsonString: string): SafeParseResult<GetRecordedSessionsResponse, SDKValidationError>;
//# sourceMappingURL=getrecordedsessions.d.ts.map