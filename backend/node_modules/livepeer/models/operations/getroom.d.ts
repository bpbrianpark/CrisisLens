import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
export type GetRoomRequest = {
    id: string;
};
export type GetRoomResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * Success
     */
    room?: components.Room | undefined;
    /**
     * Error
     */
    error?: components.ErrorT | undefined;
};
/** @internal */
export declare const GetRoomRequest$inboundSchema: z.ZodType<GetRoomRequest, z.ZodTypeDef, unknown>;
/** @internal */
export type GetRoomRequest$Outbound = {
    id: string;
};
/** @internal */
export declare const GetRoomRequest$outboundSchema: z.ZodType<GetRoomRequest$Outbound, z.ZodTypeDef, GetRoomRequest>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetRoomRequest$ {
    /** @deprecated use `GetRoomRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetRoomRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetRoomRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetRoomRequest$Outbound, z.ZodTypeDef, GetRoomRequest>;
    /** @deprecated use `GetRoomRequest$Outbound` instead. */
    type Outbound = GetRoomRequest$Outbound;
}
export declare function getRoomRequestToJSON(getRoomRequest: GetRoomRequest): string;
export declare function getRoomRequestFromJSON(jsonString: string): SafeParseResult<GetRoomRequest, SDKValidationError>;
/** @internal */
export declare const GetRoomResponse$inboundSchema: z.ZodType<GetRoomResponse, z.ZodTypeDef, unknown>;
/** @internal */
export type GetRoomResponse$Outbound = {
    ContentType: string;
    StatusCode: number;
    RawResponse: never;
    room?: components.Room$Outbound | undefined;
    error?: components.ErrorT$Outbound | undefined;
};
/** @internal */
export declare const GetRoomResponse$outboundSchema: z.ZodType<GetRoomResponse$Outbound, z.ZodTypeDef, GetRoomResponse>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetRoomResponse$ {
    /** @deprecated use `GetRoomResponse$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetRoomResponse, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetRoomResponse$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetRoomResponse$Outbound, z.ZodTypeDef, GetRoomResponse>;
    /** @deprecated use `GetRoomResponse$Outbound` instead. */
    type Outbound = GetRoomResponse$Outbound;
}
export declare function getRoomResponseToJSON(getRoomResponse: GetRoomResponse): string;
export declare function getRoomResponseFromJSON(jsonString: string): SafeParseResult<GetRoomResponse, SDKValidationError>;
//# sourceMappingURL=getroom.d.ts.map