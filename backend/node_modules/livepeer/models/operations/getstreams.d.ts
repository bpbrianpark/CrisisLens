import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
export type GetStreamsRequest = {
    streamsonly?: string | undefined;
};
export type GetStreamsResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * Success
     */
    data?: Array<components.Stream> | undefined;
    /**
     * Error
     */
    error?: components.ErrorT | undefined;
};
/** @internal */
export declare const GetStreamsRequest$inboundSchema: z.ZodType<GetStreamsRequest, z.ZodTypeDef, unknown>;
/** @internal */
export type GetStreamsRequest$Outbound = {
    streamsonly?: string | undefined;
};
/** @internal */
export declare const GetStreamsRequest$outboundSchema: z.ZodType<GetStreamsRequest$Outbound, z.ZodTypeDef, GetStreamsRequest>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetStreamsRequest$ {
    /** @deprecated use `GetStreamsRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetStreamsRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetStreamsRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetStreamsRequest$Outbound, z.ZodTypeDef, GetStreamsRequest>;
    /** @deprecated use `GetStreamsRequest$Outbound` instead. */
    type Outbound = GetStreamsRequest$Outbound;
}
export declare function getStreamsRequestToJSON(getStreamsRequest: GetStreamsRequest): string;
export declare function getStreamsRequestFromJSON(jsonString: string): SafeParseResult<GetStreamsRequest, SDKValidationError>;
/** @internal */
export declare const GetStreamsResponse$inboundSchema: z.ZodType<GetStreamsResponse, z.ZodTypeDef, unknown>;
/** @internal */
export type GetStreamsResponse$Outbound = {
    ContentType: string;
    StatusCode: number;
    RawResponse: never;
    data?: Array<components.Stream$Outbound> | undefined;
    error?: components.ErrorT$Outbound | undefined;
};
/** @internal */
export declare const GetStreamsResponse$outboundSchema: z.ZodType<GetStreamsResponse$Outbound, z.ZodTypeDef, GetStreamsResponse>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetStreamsResponse$ {
    /** @deprecated use `GetStreamsResponse$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetStreamsResponse, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetStreamsResponse$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetStreamsResponse$Outbound, z.ZodTypeDef, GetStreamsResponse>;
    /** @deprecated use `GetStreamsResponse$Outbound` instead. */
    type Outbound = GetStreamsResponse$Outbound;
}
export declare function getStreamsResponseToJSON(getStreamsResponse: GetStreamsResponse): string;
export declare function getStreamsResponseFromJSON(jsonString: string): SafeParseResult<GetStreamsResponse, SDKValidationError>;
//# sourceMappingURL=getstreams.d.ts.map