import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
/**
 * The time step to aggregate viewership metrics by
 *
 * @remarks
 */
export declare enum GetUsageMetricsQueryParamTimeStep {
    Hour = "hour",
    Day = "day"
}
export declare enum GetUsageMetricsQueryParamBreakdownBy {
    CreatorId = "creatorId"
}
export type GetUsageMetricsRequest = {
    /**
     * Start millis timestamp for the query range (inclusive)
     *
     * @remarks
     */
    from?: number | undefined;
    /**
     * End millis timestamp for the query range (exclusive)
     *
     * @remarks
     */
    to?: number | undefined;
    /**
     * The time step to aggregate viewership metrics by
     *
     * @remarks
     */
    timeStep?: GetUsageMetricsQueryParamTimeStep | undefined;
    /**
     * The creator ID to filter the query results
     *
     * @remarks
     */
    creatorId?: string | undefined;
    /**
     * The list of fields to break down the query results. Currently the
     *
     * @remarks
     * only supported breakdown is by `creatorId`.
     */
    breakdownBy?: Array<GetUsageMetricsQueryParamBreakdownBy> | undefined;
};
export type GetUsageMetricsResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * A Usage Metric object
     */
    usageMetric?: components.UsageMetric | undefined;
    /**
     * Error
     */
    error?: components.ErrorT | undefined;
};
/** @internal */
export declare const GetUsageMetricsQueryParamTimeStep$inboundSchema: z.ZodNativeEnum<typeof GetUsageMetricsQueryParamTimeStep>;
/** @internal */
export declare const GetUsageMetricsQueryParamTimeStep$outboundSchema: z.ZodNativeEnum<typeof GetUsageMetricsQueryParamTimeStep>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetUsageMetricsQueryParamTimeStep$ {
    /** @deprecated use `GetUsageMetricsQueryParamTimeStep$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<typeof GetUsageMetricsQueryParamTimeStep>;
    /** @deprecated use `GetUsageMetricsQueryParamTimeStep$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<typeof GetUsageMetricsQueryParamTimeStep>;
}
/** @internal */
export declare const GetUsageMetricsQueryParamBreakdownBy$inboundSchema: z.ZodNativeEnum<typeof GetUsageMetricsQueryParamBreakdownBy>;
/** @internal */
export declare const GetUsageMetricsQueryParamBreakdownBy$outboundSchema: z.ZodNativeEnum<typeof GetUsageMetricsQueryParamBreakdownBy>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetUsageMetricsQueryParamBreakdownBy$ {
    /** @deprecated use `GetUsageMetricsQueryParamBreakdownBy$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<typeof GetUsageMetricsQueryParamBreakdownBy>;
    /** @deprecated use `GetUsageMetricsQueryParamBreakdownBy$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<typeof GetUsageMetricsQueryParamBreakdownBy>;
}
/** @internal */
export declare const GetUsageMetricsRequest$inboundSchema: z.ZodType<GetUsageMetricsRequest, z.ZodTypeDef, unknown>;
/** @internal */
export type GetUsageMetricsRequest$Outbound = {
    from?: number | undefined;
    to?: number | undefined;
    timeStep?: string | undefined;
    creatorId?: string | undefined;
    "breakdownBy[]"?: Array<string> | undefined;
};
/** @internal */
export declare const GetUsageMetricsRequest$outboundSchema: z.ZodType<GetUsageMetricsRequest$Outbound, z.ZodTypeDef, GetUsageMetricsRequest>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetUsageMetricsRequest$ {
    /** @deprecated use `GetUsageMetricsRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetUsageMetricsRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetUsageMetricsRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetUsageMetricsRequest$Outbound, z.ZodTypeDef, GetUsageMetricsRequest>;
    /** @deprecated use `GetUsageMetricsRequest$Outbound` instead. */
    type Outbound = GetUsageMetricsRequest$Outbound;
}
export declare function getUsageMetricsRequestToJSON(getUsageMetricsRequest: GetUsageMetricsRequest): string;
export declare function getUsageMetricsRequestFromJSON(jsonString: string): SafeParseResult<GetUsageMetricsRequest, SDKValidationError>;
/** @internal */
export declare const GetUsageMetricsResponse$inboundSchema: z.ZodType<GetUsageMetricsResponse, z.ZodTypeDef, unknown>;
/** @internal */
export type GetUsageMetricsResponse$Outbound = {
    ContentType: string;
    StatusCode: number;
    RawResponse: never;
    "usage-metric"?: components.UsageMetric$Outbound | undefined;
    error?: components.ErrorT$Outbound | undefined;
};
/** @internal */
export declare const GetUsageMetricsResponse$outboundSchema: z.ZodType<GetUsageMetricsResponse$Outbound, z.ZodTypeDef, GetUsageMetricsResponse>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetUsageMetricsResponse$ {
    /** @deprecated use `GetUsageMetricsResponse$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetUsageMetricsResponse, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetUsageMetricsResponse$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetUsageMetricsResponse$Outbound, z.ZodTypeDef, GetUsageMetricsResponse>;
    /** @deprecated use `GetUsageMetricsResponse$Outbound` instead. */
    type Outbound = GetUsageMetricsResponse$Outbound;
}
export declare function getUsageMetricsResponseToJSON(getUsageMetricsResponse: GetUsageMetricsResponse): string;
export declare function getUsageMetricsResponseFromJSON(jsonString: string): SafeParseResult<GetUsageMetricsResponse, SDKValidationError>;
//# sourceMappingURL=getusagemetrics.d.ts.map