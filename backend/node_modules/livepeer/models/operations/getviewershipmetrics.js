"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GetViewershipMetricsResponse$ = exports.GetViewershipMetricsResponse$outboundSchema = exports.GetViewershipMetricsResponse$inboundSchema = exports.GetViewershipMetricsRequest$ = exports.GetViewershipMetricsRequest$outboundSchema = exports.GetViewershipMetricsRequest$inboundSchema = exports.QueryParamBreakdownBy$ = exports.QueryParamBreakdownBy$outboundSchema = exports.QueryParamBreakdownBy$inboundSchema = exports.TimeStep$ = exports.TimeStep$outboundSchema = exports.TimeStep$inboundSchema = exports.To$ = exports.To$outboundSchema = exports.To$inboundSchema = exports.From$ = exports.From$outboundSchema = exports.From$inboundSchema = exports.QueryParamBreakdownBy = exports.TimeStep = void 0;
exports.fromToJSON = fromToJSON;
exports.fromFromJSON = fromFromJSON;
exports.toToJSON = toToJSON;
exports.toFromJSON = toFromJSON;
exports.getViewershipMetricsRequestToJSON = getViewershipMetricsRequestToJSON;
exports.getViewershipMetricsRequestFromJSON = getViewershipMetricsRequestFromJSON;
exports.getViewershipMetricsResponseToJSON = getViewershipMetricsResponseToJSON;
exports.getViewershipMetricsResponseFromJSON = getViewershipMetricsResponseFromJSON;
const z = __importStar(require("zod"));
const primitives_js_1 = require("../../lib/primitives.js");
const schemas_js_1 = require("../../lib/schemas.js");
const components = __importStar(require("../components/index.js"));
/**
 * The time step to aggregate viewership metrics by
 */
var TimeStep;
(function (TimeStep) {
    TimeStep["Hour"] = "hour";
    TimeStep["Day"] = "day";
    TimeStep["Week"] = "week";
    TimeStep["Month"] = "month";
    TimeStep["Year"] = "year";
})(TimeStep || (exports.TimeStep = TimeStep = {}));
var QueryParamBreakdownBy;
(function (QueryParamBreakdownBy) {
    QueryParamBreakdownBy["PlaybackId"] = "playbackId";
    QueryParamBreakdownBy["DeviceType"] = "deviceType";
    QueryParamBreakdownBy["Device"] = "device";
    QueryParamBreakdownBy["Cpu"] = "cpu";
    QueryParamBreakdownBy["Os"] = "os";
    QueryParamBreakdownBy["Browser"] = "browser";
    QueryParamBreakdownBy["BrowserEngine"] = "browserEngine";
    QueryParamBreakdownBy["Continent"] = "continent";
    QueryParamBreakdownBy["Country"] = "country";
    QueryParamBreakdownBy["Subdivision"] = "subdivision";
    QueryParamBreakdownBy["Timezone"] = "timezone";
    QueryParamBreakdownBy["Geohash"] = "geohash";
    QueryParamBreakdownBy["ViewerId"] = "viewerId";
    QueryParamBreakdownBy["CreatorId"] = "creatorId";
})(QueryParamBreakdownBy || (exports.QueryParamBreakdownBy = QueryParamBreakdownBy = {}));
/** @internal */
exports.From$inboundSchema = z
    .union([
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
    z.number().int(),
]);
/** @internal */
exports.From$outboundSchema = z.union([z.date().transform(v => v.toISOString()), z.number().int()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var From$;
(function (From$) {
    /** @deprecated use `From$inboundSchema` instead. */
    From$.inboundSchema = exports.From$inboundSchema;
    /** @deprecated use `From$outboundSchema` instead. */
    From$.outboundSchema = exports.From$outboundSchema;
})(From$ || (exports.From$ = From$ = {}));
function fromToJSON(from) {
    return JSON.stringify(exports.From$outboundSchema.parse(from));
}
function fromFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.From$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'From' from JSON`);
}
/** @internal */
exports.To$inboundSchema = z.union([
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
    z.number().int(),
]);
/** @internal */
exports.To$outboundSchema = z
    .union([z.date().transform(v => v.toISOString()), z.number().int()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var To$;
(function (To$) {
    /** @deprecated use `To$inboundSchema` instead. */
    To$.inboundSchema = exports.To$inboundSchema;
    /** @deprecated use `To$outboundSchema` instead. */
    To$.outboundSchema = exports.To$outboundSchema;
})(To$ || (exports.To$ = To$ = {}));
function toToJSON(to) {
    return JSON.stringify(exports.To$outboundSchema.parse(to));
}
function toFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.To$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'To' from JSON`);
}
/** @internal */
exports.TimeStep$inboundSchema = z
    .nativeEnum(TimeStep);
/** @internal */
exports.TimeStep$outboundSchema = exports.TimeStep$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var TimeStep$;
(function (TimeStep$) {
    /** @deprecated use `TimeStep$inboundSchema` instead. */
    TimeStep$.inboundSchema = exports.TimeStep$inboundSchema;
    /** @deprecated use `TimeStep$outboundSchema` instead. */
    TimeStep$.outboundSchema = exports.TimeStep$outboundSchema;
})(TimeStep$ || (exports.TimeStep$ = TimeStep$ = {}));
/** @internal */
exports.QueryParamBreakdownBy$inboundSchema = z.nativeEnum(QueryParamBreakdownBy);
/** @internal */
exports.QueryParamBreakdownBy$outboundSchema = exports.QueryParamBreakdownBy$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var QueryParamBreakdownBy$;
(function (QueryParamBreakdownBy$) {
    /** @deprecated use `QueryParamBreakdownBy$inboundSchema` instead. */
    QueryParamBreakdownBy$.inboundSchema = exports.QueryParamBreakdownBy$inboundSchema;
    /** @deprecated use `QueryParamBreakdownBy$outboundSchema` instead. */
    QueryParamBreakdownBy$.outboundSchema = exports.QueryParamBreakdownBy$outboundSchema;
})(QueryParamBreakdownBy$ || (exports.QueryParamBreakdownBy$ = QueryParamBreakdownBy$ = {}));
/** @internal */
exports.GetViewershipMetricsRequest$inboundSchema = z.object({
    playbackId: z.string().optional(),
    from: z.union([
        z.string().datetime({ offset: true }).transform(v => new Date(v)),
        z.number().int(),
    ]).optional(),
    to: z.union([
        z.string().datetime({ offset: true }).transform(v => new Date(v)),
        z.number().int(),
    ]).optional(),
    timeStep: exports.TimeStep$inboundSchema.optional(),
    assetId: z.string().optional(),
    streamId: z.string().optional(),
    creatorId: z.string().optional(),
    "breakdownBy[]": z.array(exports.QueryParamBreakdownBy$inboundSchema).optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "breakdownBy[]": "breakdownBy",
    });
});
/** @internal */
exports.GetViewershipMetricsRequest$outboundSchema = z.object({
    playbackId: z.string().optional(),
    from: z.union([z.date().transform(v => v.toISOString()), z.number().int()])
        .optional(),
    to: z.union([z.date().transform(v => v.toISOString()), z.number().int()])
        .optional(),
    timeStep: exports.TimeStep$outboundSchema.optional(),
    assetId: z.string().optional(),
    streamId: z.string().optional(),
    creatorId: z.string().optional(),
    breakdownBy: z.array(exports.QueryParamBreakdownBy$outboundSchema).optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        breakdownBy: "breakdownBy[]",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var GetViewershipMetricsRequest$;
(function (GetViewershipMetricsRequest$) {
    /** @deprecated use `GetViewershipMetricsRequest$inboundSchema` instead. */
    GetViewershipMetricsRequest$.inboundSchema = exports.GetViewershipMetricsRequest$inboundSchema;
    /** @deprecated use `GetViewershipMetricsRequest$outboundSchema` instead. */
    GetViewershipMetricsRequest$.outboundSchema = exports.GetViewershipMetricsRequest$outboundSchema;
})(GetViewershipMetricsRequest$ || (exports.GetViewershipMetricsRequest$ = GetViewershipMetricsRequest$ = {}));
function getViewershipMetricsRequestToJSON(getViewershipMetricsRequest) {
    return JSON.stringify(exports.GetViewershipMetricsRequest$outboundSchema.parse(getViewershipMetricsRequest));
}
function getViewershipMetricsRequestFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.GetViewershipMetricsRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetViewershipMetricsRequest' from JSON`);
}
/** @internal */
exports.GetViewershipMetricsResponse$inboundSchema = z.object({
    ContentType: z.string(),
    StatusCode: z.number().int(),
    RawResponse: z.instanceof(Response),
    data: z.array(components.ViewershipMetric$inboundSchema).optional(),
    error: components.ErrorT$inboundSchema.optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "ContentType": "contentType",
        "StatusCode": "statusCode",
        "RawResponse": "rawResponse",
    });
});
/** @internal */
exports.GetViewershipMetricsResponse$outboundSchema = z.object({
    contentType: z.string(),
    statusCode: z.number().int(),
    rawResponse: z.instanceof(Response).transform(() => {
        throw new Error("Response cannot be serialized");
    }),
    data: z.array(components.ViewershipMetric$outboundSchema).optional(),
    error: components.ErrorT$outboundSchema.optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        contentType: "ContentType",
        statusCode: "StatusCode",
        rawResponse: "RawResponse",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var GetViewershipMetricsResponse$;
(function (GetViewershipMetricsResponse$) {
    /** @deprecated use `GetViewershipMetricsResponse$inboundSchema` instead. */
    GetViewershipMetricsResponse$.inboundSchema = exports.GetViewershipMetricsResponse$inboundSchema;
    /** @deprecated use `GetViewershipMetricsResponse$outboundSchema` instead. */
    GetViewershipMetricsResponse$.outboundSchema = exports.GetViewershipMetricsResponse$outboundSchema;
})(GetViewershipMetricsResponse$ || (exports.GetViewershipMetricsResponse$ = GetViewershipMetricsResponse$ = {}));
function getViewershipMetricsResponseToJSON(getViewershipMetricsResponse) {
    return JSON.stringify(exports.GetViewershipMetricsResponse$outboundSchema.parse(getViewershipMetricsResponse));
}
function getViewershipMetricsResponseFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.GetViewershipMetricsResponse$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetViewershipMetricsResponse' from JSON`);
}
//# sourceMappingURL=getviewershipmetrics.js.map