import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
export type GetWebhookRequest = {
    id: string;
};
export type GetWebhookResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * Success
     */
    webhook?: components.Webhook | undefined;
    /**
     * Error
     */
    error?: components.ErrorT | undefined;
};
/** @internal */
export declare const GetWebhookRequest$inboundSchema: z.ZodType<GetWebhookRequest, z.ZodTypeDef, unknown>;
/** @internal */
export type GetWebhookRequest$Outbound = {
    id: string;
};
/** @internal */
export declare const GetWebhookRequest$outboundSchema: z.ZodType<GetWebhookRequest$Outbound, z.ZodTypeDef, GetWebhookRequest>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetWebhookRequest$ {
    /** @deprecated use `GetWebhookRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetWebhookRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetWebhookRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetWebhookRequest$Outbound, z.ZodTypeDef, GetWebhookRequest>;
    /** @deprecated use `GetWebhookRequest$Outbound` instead. */
    type Outbound = GetWebhookRequest$Outbound;
}
export declare function getWebhookRequestToJSON(getWebhookRequest: GetWebhookRequest): string;
export declare function getWebhookRequestFromJSON(jsonString: string): SafeParseResult<GetWebhookRequest, SDKValidationError>;
/** @internal */
export declare const GetWebhookResponse$inboundSchema: z.ZodType<GetWebhookResponse, z.ZodTypeDef, unknown>;
/** @internal */
export type GetWebhookResponse$Outbound = {
    ContentType: string;
    StatusCode: number;
    RawResponse: never;
    webhook?: components.Webhook$Outbound | undefined;
    error?: components.ErrorT$Outbound | undefined;
};
/** @internal */
export declare const GetWebhookResponse$outboundSchema: z.ZodType<GetWebhookResponse$Outbound, z.ZodTypeDef, GetWebhookResponse>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetWebhookResponse$ {
    /** @deprecated use `GetWebhookResponse$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetWebhookResponse, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetWebhookResponse$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetWebhookResponse$Outbound, z.ZodTypeDef, GetWebhookResponse>;
    /** @deprecated use `GetWebhookResponse$Outbound` instead. */
    type Outbound = GetWebhookResponse$Outbound;
}
export declare function getWebhookResponseToJSON(getWebhookResponse: GetWebhookResponse): string;
export declare function getWebhookResponseFromJSON(jsonString: string): SafeParseResult<GetWebhookResponse, SDKValidationError>;
//# sourceMappingURL=getwebhook.d.ts.map