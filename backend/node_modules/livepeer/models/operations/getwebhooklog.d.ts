import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
export type GetWebhookLogRequest = {
    id: string;
    logId: string;
};
export type GetWebhookLogResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * Success
     */
    webhookLog?: components.WebhookLog | undefined;
    /**
     * Error
     */
    error?: components.ErrorT | undefined;
};
/** @internal */
export declare const GetWebhookLogRequest$inboundSchema: z.ZodType<GetWebhookLogRequest, z.ZodTypeDef, unknown>;
/** @internal */
export type GetWebhookLogRequest$Outbound = {
    id: string;
    logId: string;
};
/** @internal */
export declare const GetWebhookLogRequest$outboundSchema: z.ZodType<GetWebhookLogRequest$Outbound, z.ZodTypeDef, GetWebhookLogRequest>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetWebhookLogRequest$ {
    /** @deprecated use `GetWebhookLogRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetWebhookLogRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetWebhookLogRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetWebhookLogRequest$Outbound, z.ZodTypeDef, GetWebhookLogRequest>;
    /** @deprecated use `GetWebhookLogRequest$Outbound` instead. */
    type Outbound = GetWebhookLogRequest$Outbound;
}
export declare function getWebhookLogRequestToJSON(getWebhookLogRequest: GetWebhookLogRequest): string;
export declare function getWebhookLogRequestFromJSON(jsonString: string): SafeParseResult<GetWebhookLogRequest, SDKValidationError>;
/** @internal */
export declare const GetWebhookLogResponse$inboundSchema: z.ZodType<GetWebhookLogResponse, z.ZodTypeDef, unknown>;
/** @internal */
export type GetWebhookLogResponse$Outbound = {
    ContentType: string;
    StatusCode: number;
    RawResponse: never;
    "webhook-log"?: components.WebhookLog$Outbound | undefined;
    error?: components.ErrorT$Outbound | undefined;
};
/** @internal */
export declare const GetWebhookLogResponse$outboundSchema: z.ZodType<GetWebhookLogResponse$Outbound, z.ZodTypeDef, GetWebhookLogResponse>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetWebhookLogResponse$ {
    /** @deprecated use `GetWebhookLogResponse$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetWebhookLogResponse, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetWebhookLogResponse$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetWebhookLogResponse$Outbound, z.ZodTypeDef, GetWebhookLogResponse>;
    /** @deprecated use `GetWebhookLogResponse$Outbound` instead. */
    type Outbound = GetWebhookLogResponse$Outbound;
}
export declare function getWebhookLogResponseToJSON(getWebhookLogResponse: GetWebhookLogResponse): string;
export declare function getWebhookLogResponseFromJSON(jsonString: string): SafeParseResult<GetWebhookLogResponse, SDKValidationError>;
//# sourceMappingURL=getwebhooklog.d.ts.map