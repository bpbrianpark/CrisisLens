import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
export type GetWebhookLogsRequest = {
    id: string;
};
export type GetWebhookLogsResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * Success
     */
    data?: Array<components.WebhookLog> | undefined;
    /**
     * Error
     */
    error?: components.ErrorT | undefined;
};
/** @internal */
export declare const GetWebhookLogsRequest$inboundSchema: z.ZodType<GetWebhookLogsRequest, z.ZodTypeDef, unknown>;
/** @internal */
export type GetWebhookLogsRequest$Outbound = {
    id: string;
};
/** @internal */
export declare const GetWebhookLogsRequest$outboundSchema: z.ZodType<GetWebhookLogsRequest$Outbound, z.ZodTypeDef, GetWebhookLogsRequest>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetWebhookLogsRequest$ {
    /** @deprecated use `GetWebhookLogsRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetWebhookLogsRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetWebhookLogsRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetWebhookLogsRequest$Outbound, z.ZodTypeDef, GetWebhookLogsRequest>;
    /** @deprecated use `GetWebhookLogsRequest$Outbound` instead. */
    type Outbound = GetWebhookLogsRequest$Outbound;
}
export declare function getWebhookLogsRequestToJSON(getWebhookLogsRequest: GetWebhookLogsRequest): string;
export declare function getWebhookLogsRequestFromJSON(jsonString: string): SafeParseResult<GetWebhookLogsRequest, SDKValidationError>;
/** @internal */
export declare const GetWebhookLogsResponse$inboundSchema: z.ZodType<GetWebhookLogsResponse, z.ZodTypeDef, unknown>;
/** @internal */
export type GetWebhookLogsResponse$Outbound = {
    ContentType: string;
    StatusCode: number;
    RawResponse: never;
    data?: Array<components.WebhookLog$Outbound> | undefined;
    error?: components.ErrorT$Outbound | undefined;
};
/** @internal */
export declare const GetWebhookLogsResponse$outboundSchema: z.ZodType<GetWebhookLogsResponse$Outbound, z.ZodTypeDef, GetWebhookLogsResponse>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetWebhookLogsResponse$ {
    /** @deprecated use `GetWebhookLogsResponse$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetWebhookLogsResponse, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetWebhookLogsResponse$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetWebhookLogsResponse$Outbound, z.ZodTypeDef, GetWebhookLogsResponse>;
    /** @deprecated use `GetWebhookLogsResponse$Outbound` instead. */
    type Outbound = GetWebhookLogsResponse$Outbound;
}
export declare function getWebhookLogsResponseToJSON(getWebhookLogsResponse: GetWebhookLogsResponse): string;
export declare function getWebhookLogsResponseFromJSON(jsonString: string): SafeParseResult<GetWebhookLogsResponse, SDKValidationError>;
//# sourceMappingURL=getwebhooklogs.d.ts.map