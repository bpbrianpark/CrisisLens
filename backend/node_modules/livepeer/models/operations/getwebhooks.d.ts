import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
export type GetWebhooksResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * Success
     */
    data?: Array<components.Webhook> | undefined;
    /**
     * Error
     */
    error?: components.ErrorT | undefined;
};
/** @internal */
export declare const GetWebhooksResponse$inboundSchema: z.ZodType<GetWebhooksResponse, z.ZodTypeDef, unknown>;
/** @internal */
export type GetWebhooksResponse$Outbound = {
    ContentType: string;
    StatusCode: number;
    RawResponse: never;
    data?: Array<components.Webhook$Outbound> | undefined;
    error?: components.ErrorT$Outbound | undefined;
};
/** @internal */
export declare const GetWebhooksResponse$outboundSchema: z.ZodType<GetWebhooksResponse$Outbound, z.ZodTypeDef, GetWebhooksResponse>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetWebhooksResponse$ {
    /** @deprecated use `GetWebhooksResponse$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetWebhooksResponse, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetWebhooksResponse$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetWebhooksResponse$Outbound, z.ZodTypeDef, GetWebhooksResponse>;
    /** @deprecated use `GetWebhooksResponse$Outbound` instead. */
    type Outbound = GetWebhooksResponse$Outbound;
}
export declare function getWebhooksResponseToJSON(getWebhooksResponse: GetWebhooksResponse): string;
export declare function getWebhooksResponseFromJSON(jsonString: string): SafeParseResult<GetWebhooksResponse, SDKValidationError>;
//# sourceMappingURL=getwebhooks.d.ts.map