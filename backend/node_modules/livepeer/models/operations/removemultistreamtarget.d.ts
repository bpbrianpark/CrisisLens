import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
export type RemoveMultistreamTargetRequest = {
    /**
     * ID of the parent stream
     */
    id: string;
    /**
     * ID of the multistream target
     */
    targetId: string;
};
export type RemoveMultistreamTargetResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * Error
     */
    error?: components.ErrorT | undefined;
};
/** @internal */
export declare const RemoveMultistreamTargetRequest$inboundSchema: z.ZodType<RemoveMultistreamTargetRequest, z.ZodTypeDef, unknown>;
/** @internal */
export type RemoveMultistreamTargetRequest$Outbound = {
    id: string;
    targetId: string;
};
/** @internal */
export declare const RemoveMultistreamTargetRequest$outboundSchema: z.ZodType<RemoveMultistreamTargetRequest$Outbound, z.ZodTypeDef, RemoveMultistreamTargetRequest>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace RemoveMultistreamTargetRequest$ {
    /** @deprecated use `RemoveMultistreamTargetRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<RemoveMultistreamTargetRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `RemoveMultistreamTargetRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<RemoveMultistreamTargetRequest$Outbound, z.ZodTypeDef, RemoveMultistreamTargetRequest>;
    /** @deprecated use `RemoveMultistreamTargetRequest$Outbound` instead. */
    type Outbound = RemoveMultistreamTargetRequest$Outbound;
}
export declare function removeMultistreamTargetRequestToJSON(removeMultistreamTargetRequest: RemoveMultistreamTargetRequest): string;
export declare function removeMultistreamTargetRequestFromJSON(jsonString: string): SafeParseResult<RemoveMultistreamTargetRequest, SDKValidationError>;
/** @internal */
export declare const RemoveMultistreamTargetResponse$inboundSchema: z.ZodType<RemoveMultistreamTargetResponse, z.ZodTypeDef, unknown>;
/** @internal */
export type RemoveMultistreamTargetResponse$Outbound = {
    ContentType: string;
    StatusCode: number;
    RawResponse: never;
    error?: components.ErrorT$Outbound | undefined;
};
/** @internal */
export declare const RemoveMultistreamTargetResponse$outboundSchema: z.ZodType<RemoveMultistreamTargetResponse$Outbound, z.ZodTypeDef, RemoveMultistreamTargetResponse>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace RemoveMultistreamTargetResponse$ {
    /** @deprecated use `RemoveMultistreamTargetResponse$inboundSchema` instead. */
    const inboundSchema: z.ZodType<RemoveMultistreamTargetResponse, z.ZodTypeDef, unknown>;
    /** @deprecated use `RemoveMultistreamTargetResponse$outboundSchema` instead. */
    const outboundSchema: z.ZodType<RemoveMultistreamTargetResponse$Outbound, z.ZodTypeDef, RemoveMultistreamTargetResponse>;
    /** @deprecated use `RemoveMultistreamTargetResponse$Outbound` instead. */
    type Outbound = RemoveMultistreamTargetResponse$Outbound;
}
export declare function removeMultistreamTargetResponseToJSON(removeMultistreamTargetResponse: RemoveMultistreamTargetResponse): string;
export declare function removeMultistreamTargetResponseFromJSON(jsonString: string): SafeParseResult<RemoveMultistreamTargetResponse, SDKValidationError>;
//# sourceMappingURL=removemultistreamtarget.d.ts.map