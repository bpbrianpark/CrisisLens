import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
export type Task = {
    id: string;
};
/**
 * Success
 */
export type RequestUploadData = {
    /**
     * The direct upload endpoint for which supports PUT requests. **It is recommended to use the Tus endpoint for a better upload experience.**
     */
    url: string;
    /**
     * The [Tus-compatible](https://tus.io/) endpoint for resumable uploads. **This is the recommended way to upload assets.** See the [Tus-js](https://github.com/tus/tus-js-client) client for more information.
     */
    tusEndpoint: string;
    asset: components.Asset;
    task: Task;
};
export type RequestUploadResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * Success
     */
    data?: RequestUploadData | undefined;
    /**
     * Error
     */
    error?: components.ErrorT | undefined;
};
/** @internal */
export declare const Task$inboundSchema: z.ZodType<Task, z.ZodTypeDef, unknown>;
/** @internal */
export type Task$Outbound = {
    id: string;
};
/** @internal */
export declare const Task$outboundSchema: z.ZodType<Task$Outbound, z.ZodTypeDef, Task>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Task$ {
    /** @deprecated use `Task$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Task, z.ZodTypeDef, unknown>;
    /** @deprecated use `Task$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Task$Outbound, z.ZodTypeDef, Task>;
    /** @deprecated use `Task$Outbound` instead. */
    type Outbound = Task$Outbound;
}
export declare function taskToJSON(task: Task): string;
export declare function taskFromJSON(jsonString: string): SafeParseResult<Task, SDKValidationError>;
/** @internal */
export declare const RequestUploadData$inboundSchema: z.ZodType<RequestUploadData, z.ZodTypeDef, unknown>;
/** @internal */
export type RequestUploadData$Outbound = {
    url: string;
    tusEndpoint: string;
    asset: components.Asset$Outbound;
    task: Task$Outbound;
};
/** @internal */
export declare const RequestUploadData$outboundSchema: z.ZodType<RequestUploadData$Outbound, z.ZodTypeDef, RequestUploadData>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace RequestUploadData$ {
    /** @deprecated use `RequestUploadData$inboundSchema` instead. */
    const inboundSchema: z.ZodType<RequestUploadData, z.ZodTypeDef, unknown>;
    /** @deprecated use `RequestUploadData$outboundSchema` instead. */
    const outboundSchema: z.ZodType<RequestUploadData$Outbound, z.ZodTypeDef, RequestUploadData>;
    /** @deprecated use `RequestUploadData$Outbound` instead. */
    type Outbound = RequestUploadData$Outbound;
}
export declare function requestUploadDataToJSON(requestUploadData: RequestUploadData): string;
export declare function requestUploadDataFromJSON(jsonString: string): SafeParseResult<RequestUploadData, SDKValidationError>;
/** @internal */
export declare const RequestUploadResponse$inboundSchema: z.ZodType<RequestUploadResponse, z.ZodTypeDef, unknown>;
/** @internal */
export type RequestUploadResponse$Outbound = {
    ContentType: string;
    StatusCode: number;
    RawResponse: never;
    data?: RequestUploadData$Outbound | undefined;
    error?: components.ErrorT$Outbound | undefined;
};
/** @internal */
export declare const RequestUploadResponse$outboundSchema: z.ZodType<RequestUploadResponse$Outbound, z.ZodTypeDef, RequestUploadResponse>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace RequestUploadResponse$ {
    /** @deprecated use `RequestUploadResponse$inboundSchema` instead. */
    const inboundSchema: z.ZodType<RequestUploadResponse, z.ZodTypeDef, unknown>;
    /** @deprecated use `RequestUploadResponse$outboundSchema` instead. */
    const outboundSchema: z.ZodType<RequestUploadResponse$Outbound, z.ZodTypeDef, RequestUploadResponse>;
    /** @deprecated use `RequestUploadResponse$Outbound` instead. */
    type Outbound = RequestUploadResponse$Outbound;
}
export declare function requestUploadResponseToJSON(requestUploadResponse: RequestUploadResponse): string;
export declare function requestUploadResponseFromJSON(jsonString: string): SafeParseResult<RequestUploadResponse, SDKValidationError>;
//# sourceMappingURL=requestupload.d.ts.map