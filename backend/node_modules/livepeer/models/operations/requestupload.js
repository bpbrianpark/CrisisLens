"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RequestUploadResponse$ = exports.RequestUploadResponse$outboundSchema = exports.RequestUploadResponse$inboundSchema = exports.RequestUploadData$ = exports.RequestUploadData$outboundSchema = exports.RequestUploadData$inboundSchema = exports.Task$ = exports.Task$outboundSchema = exports.Task$inboundSchema = void 0;
exports.taskToJSON = taskToJSON;
exports.taskFromJSON = taskFromJSON;
exports.requestUploadDataToJSON = requestUploadDataToJSON;
exports.requestUploadDataFromJSON = requestUploadDataFromJSON;
exports.requestUploadResponseToJSON = requestUploadResponseToJSON;
exports.requestUploadResponseFromJSON = requestUploadResponseFromJSON;
const z = __importStar(require("zod"));
const primitives_js_1 = require("../../lib/primitives.js");
const schemas_js_1 = require("../../lib/schemas.js");
const components = __importStar(require("../components/index.js"));
/** @internal */
exports.Task$inboundSchema = z
    .object({
    id: z.string(),
});
/** @internal */
exports.Task$outboundSchema = z.object({
    id: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var Task$;
(function (Task$) {
    /** @deprecated use `Task$inboundSchema` instead. */
    Task$.inboundSchema = exports.Task$inboundSchema;
    /** @deprecated use `Task$outboundSchema` instead. */
    Task$.outboundSchema = exports.Task$outboundSchema;
})(Task$ || (exports.Task$ = Task$ = {}));
function taskToJSON(task) {
    return JSON.stringify(exports.Task$outboundSchema.parse(task));
}
function taskFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.Task$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Task' from JSON`);
}
/** @internal */
exports.RequestUploadData$inboundSchema = z.object({
    url: z.string(),
    tusEndpoint: z.string(),
    asset: components.Asset$inboundSchema,
    task: z.lazy(() => exports.Task$inboundSchema),
});
/** @internal */
exports.RequestUploadData$outboundSchema = z.object({
    url: z.string(),
    tusEndpoint: z.string(),
    asset: components.Asset$outboundSchema,
    task: z.lazy(() => exports.Task$outboundSchema),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var RequestUploadData$;
(function (RequestUploadData$) {
    /** @deprecated use `RequestUploadData$inboundSchema` instead. */
    RequestUploadData$.inboundSchema = exports.RequestUploadData$inboundSchema;
    /** @deprecated use `RequestUploadData$outboundSchema` instead. */
    RequestUploadData$.outboundSchema = exports.RequestUploadData$outboundSchema;
})(RequestUploadData$ || (exports.RequestUploadData$ = RequestUploadData$ = {}));
function requestUploadDataToJSON(requestUploadData) {
    return JSON.stringify(exports.RequestUploadData$outboundSchema.parse(requestUploadData));
}
function requestUploadDataFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.RequestUploadData$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'RequestUploadData' from JSON`);
}
/** @internal */
exports.RequestUploadResponse$inboundSchema = z.object({
    ContentType: z.string(),
    StatusCode: z.number().int(),
    RawResponse: z.instanceof(Response),
    data: z.lazy(() => exports.RequestUploadData$inboundSchema).optional(),
    error: components.ErrorT$inboundSchema.optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "ContentType": "contentType",
        "StatusCode": "statusCode",
        "RawResponse": "rawResponse",
    });
});
/** @internal */
exports.RequestUploadResponse$outboundSchema = z.object({
    contentType: z.string(),
    statusCode: z.number().int(),
    rawResponse: z.instanceof(Response).transform(() => {
        throw new Error("Response cannot be serialized");
    }),
    data: z.lazy(() => exports.RequestUploadData$outboundSchema).optional(),
    error: components.ErrorT$outboundSchema.optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        contentType: "ContentType",
        statusCode: "StatusCode",
        rawResponse: "RawResponse",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var RequestUploadResponse$;
(function (RequestUploadResponse$) {
    /** @deprecated use `RequestUploadResponse$inboundSchema` instead. */
    RequestUploadResponse$.inboundSchema = exports.RequestUploadResponse$inboundSchema;
    /** @deprecated use `RequestUploadResponse$outboundSchema` instead. */
    RequestUploadResponse$.outboundSchema = exports.RequestUploadResponse$outboundSchema;
})(RequestUploadResponse$ || (exports.RequestUploadResponse$ = RequestUploadResponse$ = {}));
function requestUploadResponseToJSON(requestUploadResponse) {
    return JSON.stringify(exports.RequestUploadResponse$outboundSchema.parse(requestUploadResponse));
}
function requestUploadResponseFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.RequestUploadResponse$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'RequestUploadResponse' from JSON`);
}
//# sourceMappingURL=requestupload.js.map