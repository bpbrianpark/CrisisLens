import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
export type TerminateStreamRequest = {
    /**
     * ID of the stream
     */
    id: string;
};
export type TerminateStreamResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * Error
     */
    error?: components.ErrorT | undefined;
};
/** @internal */
export declare const TerminateStreamRequest$inboundSchema: z.ZodType<TerminateStreamRequest, z.ZodTypeDef, unknown>;
/** @internal */
export type TerminateStreamRequest$Outbound = {
    id: string;
};
/** @internal */
export declare const TerminateStreamRequest$outboundSchema: z.ZodType<TerminateStreamRequest$Outbound, z.ZodTypeDef, TerminateStreamRequest>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace TerminateStreamRequest$ {
    /** @deprecated use `TerminateStreamRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<TerminateStreamRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `TerminateStreamRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<TerminateStreamRequest$Outbound, z.ZodTypeDef, TerminateStreamRequest>;
    /** @deprecated use `TerminateStreamRequest$Outbound` instead. */
    type Outbound = TerminateStreamRequest$Outbound;
}
export declare function terminateStreamRequestToJSON(terminateStreamRequest: TerminateStreamRequest): string;
export declare function terminateStreamRequestFromJSON(jsonString: string): SafeParseResult<TerminateStreamRequest, SDKValidationError>;
/** @internal */
export declare const TerminateStreamResponse$inboundSchema: z.ZodType<TerminateStreamResponse, z.ZodTypeDef, unknown>;
/** @internal */
export type TerminateStreamResponse$Outbound = {
    ContentType: string;
    StatusCode: number;
    RawResponse: never;
    error?: components.ErrorT$Outbound | undefined;
};
/** @internal */
export declare const TerminateStreamResponse$outboundSchema: z.ZodType<TerminateStreamResponse$Outbound, z.ZodTypeDef, TerminateStreamResponse>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace TerminateStreamResponse$ {
    /** @deprecated use `TerminateStreamResponse$inboundSchema` instead. */
    const inboundSchema: z.ZodType<TerminateStreamResponse, z.ZodTypeDef, unknown>;
    /** @deprecated use `TerminateStreamResponse$outboundSchema` instead. */
    const outboundSchema: z.ZodType<TerminateStreamResponse$Outbound, z.ZodTypeDef, TerminateStreamResponse>;
    /** @deprecated use `TerminateStreamResponse$Outbound` instead. */
    type Outbound = TerminateStreamResponse$Outbound;
}
export declare function terminateStreamResponseToJSON(terminateStreamResponse: TerminateStreamResponse): string;
export declare function terminateStreamResponseFromJSON(jsonString: string): SafeParseResult<TerminateStreamResponse, SDKValidationError>;
//# sourceMappingURL=terminatestream.d.ts.map