import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
export type UpdateMultistreamTargetRequest = {
    /**
     * ID of the multistream target
     */
    id: string;
    multistreamTargetPatchPayload: components.MultistreamTargetPatchPayload;
};
export type UpdateMultistreamTargetResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * Error
     */
    error?: components.ErrorT | undefined;
};
/** @internal */
export declare const UpdateMultistreamTargetRequest$inboundSchema: z.ZodType<UpdateMultistreamTargetRequest, z.ZodTypeDef, unknown>;
/** @internal */
export type UpdateMultistreamTargetRequest$Outbound = {
    id: string;
    "multistream-target-patch-payload": components.MultistreamTargetPatchPayload$Outbound;
};
/** @internal */
export declare const UpdateMultistreamTargetRequest$outboundSchema: z.ZodType<UpdateMultistreamTargetRequest$Outbound, z.ZodTypeDef, UpdateMultistreamTargetRequest>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateMultistreamTargetRequest$ {
    /** @deprecated use `UpdateMultistreamTargetRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UpdateMultistreamTargetRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `UpdateMultistreamTargetRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UpdateMultistreamTargetRequest$Outbound, z.ZodTypeDef, UpdateMultistreamTargetRequest>;
    /** @deprecated use `UpdateMultistreamTargetRequest$Outbound` instead. */
    type Outbound = UpdateMultistreamTargetRequest$Outbound;
}
export declare function updateMultistreamTargetRequestToJSON(updateMultistreamTargetRequest: UpdateMultistreamTargetRequest): string;
export declare function updateMultistreamTargetRequestFromJSON(jsonString: string): SafeParseResult<UpdateMultistreamTargetRequest, SDKValidationError>;
/** @internal */
export declare const UpdateMultistreamTargetResponse$inboundSchema: z.ZodType<UpdateMultistreamTargetResponse, z.ZodTypeDef, unknown>;
/** @internal */
export type UpdateMultistreamTargetResponse$Outbound = {
    ContentType: string;
    StatusCode: number;
    RawResponse: never;
    error?: components.ErrorT$Outbound | undefined;
};
/** @internal */
export declare const UpdateMultistreamTargetResponse$outboundSchema: z.ZodType<UpdateMultistreamTargetResponse$Outbound, z.ZodTypeDef, UpdateMultistreamTargetResponse>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateMultistreamTargetResponse$ {
    /** @deprecated use `UpdateMultistreamTargetResponse$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UpdateMultistreamTargetResponse, z.ZodTypeDef, unknown>;
    /** @deprecated use `UpdateMultistreamTargetResponse$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UpdateMultistreamTargetResponse$Outbound, z.ZodTypeDef, UpdateMultistreamTargetResponse>;
    /** @deprecated use `UpdateMultistreamTargetResponse$Outbound` instead. */
    type Outbound = UpdateMultistreamTargetResponse$Outbound;
}
export declare function updateMultistreamTargetResponseToJSON(updateMultistreamTargetResponse: UpdateMultistreamTargetResponse): string;
export declare function updateMultistreamTargetResponseFromJSON(jsonString: string): SafeParseResult<UpdateMultistreamTargetResponse, SDKValidationError>;
//# sourceMappingURL=updatemultistreamtarget.d.ts.map