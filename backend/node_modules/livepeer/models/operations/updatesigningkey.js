"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.UpdateSigningKeyResponse$ = exports.UpdateSigningKeyResponse$outboundSchema = exports.UpdateSigningKeyResponse$inboundSchema = exports.UpdateSigningKeyRequest$ = exports.UpdateSigningKeyRequest$outboundSchema = exports.UpdateSigningKeyRequest$inboundSchema = exports.UpdateSigningKeyRequestBody$ = exports.UpdateSigningKeyRequestBody$outboundSchema = exports.UpdateSigningKeyRequestBody$inboundSchema = void 0;
exports.updateSigningKeyRequestBodyToJSON = updateSigningKeyRequestBodyToJSON;
exports.updateSigningKeyRequestBodyFromJSON = updateSigningKeyRequestBodyFromJSON;
exports.updateSigningKeyRequestToJSON = updateSigningKeyRequestToJSON;
exports.updateSigningKeyRequestFromJSON = updateSigningKeyRequestFromJSON;
exports.updateSigningKeyResponseToJSON = updateSigningKeyResponseToJSON;
exports.updateSigningKeyResponseFromJSON = updateSigningKeyResponseFromJSON;
const z = __importStar(require("zod"));
const primitives_js_1 = require("../../lib/primitives.js");
const schemas_js_1 = require("../../lib/schemas.js");
const components = __importStar(require("../components/index.js"));
/** @internal */
exports.UpdateSigningKeyRequestBody$inboundSchema = z.object({
    disabled: z.boolean().optional(),
    name: z.string().optional(),
});
/** @internal */
exports.UpdateSigningKeyRequestBody$outboundSchema = z.object({
    disabled: z.boolean().optional(),
    name: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var UpdateSigningKeyRequestBody$;
(function (UpdateSigningKeyRequestBody$) {
    /** @deprecated use `UpdateSigningKeyRequestBody$inboundSchema` instead. */
    UpdateSigningKeyRequestBody$.inboundSchema = exports.UpdateSigningKeyRequestBody$inboundSchema;
    /** @deprecated use `UpdateSigningKeyRequestBody$outboundSchema` instead. */
    UpdateSigningKeyRequestBody$.outboundSchema = exports.UpdateSigningKeyRequestBody$outboundSchema;
})(UpdateSigningKeyRequestBody$ || (exports.UpdateSigningKeyRequestBody$ = UpdateSigningKeyRequestBody$ = {}));
function updateSigningKeyRequestBodyToJSON(updateSigningKeyRequestBody) {
    return JSON.stringify(exports.UpdateSigningKeyRequestBody$outboundSchema.parse(updateSigningKeyRequestBody));
}
function updateSigningKeyRequestBodyFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.UpdateSigningKeyRequestBody$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateSigningKeyRequestBody' from JSON`);
}
/** @internal */
exports.UpdateSigningKeyRequest$inboundSchema = z.object({
    keyId: z.string(),
    RequestBody: z.lazy(() => exports.UpdateSigningKeyRequestBody$inboundSchema),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "RequestBody": "requestBody",
    });
});
/** @internal */
exports.UpdateSigningKeyRequest$outboundSchema = z.object({
    keyId: z.string(),
    requestBody: z.lazy(() => exports.UpdateSigningKeyRequestBody$outboundSchema),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        requestBody: "RequestBody",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var UpdateSigningKeyRequest$;
(function (UpdateSigningKeyRequest$) {
    /** @deprecated use `UpdateSigningKeyRequest$inboundSchema` instead. */
    UpdateSigningKeyRequest$.inboundSchema = exports.UpdateSigningKeyRequest$inboundSchema;
    /** @deprecated use `UpdateSigningKeyRequest$outboundSchema` instead. */
    UpdateSigningKeyRequest$.outboundSchema = exports.UpdateSigningKeyRequest$outboundSchema;
})(UpdateSigningKeyRequest$ || (exports.UpdateSigningKeyRequest$ = UpdateSigningKeyRequest$ = {}));
function updateSigningKeyRequestToJSON(updateSigningKeyRequest) {
    return JSON.stringify(exports.UpdateSigningKeyRequest$outboundSchema.parse(updateSigningKeyRequest));
}
function updateSigningKeyRequestFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.UpdateSigningKeyRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateSigningKeyRequest' from JSON`);
}
/** @internal */
exports.UpdateSigningKeyResponse$inboundSchema = z.object({
    ContentType: z.string(),
    StatusCode: z.number().int(),
    RawResponse: z.instanceof(Response),
    error: components.ErrorT$inboundSchema.optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "ContentType": "contentType",
        "StatusCode": "statusCode",
        "RawResponse": "rawResponse",
    });
});
/** @internal */
exports.UpdateSigningKeyResponse$outboundSchema = z.object({
    contentType: z.string(),
    statusCode: z.number().int(),
    rawResponse: z.instanceof(Response).transform(() => {
        throw new Error("Response cannot be serialized");
    }),
    error: components.ErrorT$outboundSchema.optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        contentType: "ContentType",
        statusCode: "StatusCode",
        rawResponse: "RawResponse",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var UpdateSigningKeyResponse$;
(function (UpdateSigningKeyResponse$) {
    /** @deprecated use `UpdateSigningKeyResponse$inboundSchema` instead. */
    UpdateSigningKeyResponse$.inboundSchema = exports.UpdateSigningKeyResponse$inboundSchema;
    /** @deprecated use `UpdateSigningKeyResponse$outboundSchema` instead. */
    UpdateSigningKeyResponse$.outboundSchema = exports.UpdateSigningKeyResponse$outboundSchema;
})(UpdateSigningKeyResponse$ || (exports.UpdateSigningKeyResponse$ = UpdateSigningKeyResponse$ = {}));
function updateSigningKeyResponseToJSON(updateSigningKeyResponse) {
    return JSON.stringify(exports.UpdateSigningKeyResponse$outboundSchema.parse(updateSigningKeyResponse));
}
function updateSigningKeyResponseFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.UpdateSigningKeyResponse$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateSigningKeyResponse' from JSON`);
}
//# sourceMappingURL=updatesigningkey.js.map