import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
export type UpdateStreamRequest = {
    /**
     * ID of the stream
     */
    id: string;
    streamPatchPayload: components.StreamPatchPayload;
};
export type UpdateStreamResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * Error
     */
    error?: components.ErrorT | undefined;
};
/** @internal */
export declare const UpdateStreamRequest$inboundSchema: z.ZodType<UpdateStreamRequest, z.ZodTypeDef, unknown>;
/** @internal */
export type UpdateStreamRequest$Outbound = {
    id: string;
    "stream-patch-payload": components.StreamPatchPayload$Outbound;
};
/** @internal */
export declare const UpdateStreamRequest$outboundSchema: z.ZodType<UpdateStreamRequest$Outbound, z.ZodTypeDef, UpdateStreamRequest>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateStreamRequest$ {
    /** @deprecated use `UpdateStreamRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UpdateStreamRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `UpdateStreamRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UpdateStreamRequest$Outbound, z.ZodTypeDef, UpdateStreamRequest>;
    /** @deprecated use `UpdateStreamRequest$Outbound` instead. */
    type Outbound = UpdateStreamRequest$Outbound;
}
export declare function updateStreamRequestToJSON(updateStreamRequest: UpdateStreamRequest): string;
export declare function updateStreamRequestFromJSON(jsonString: string): SafeParseResult<UpdateStreamRequest, SDKValidationError>;
/** @internal */
export declare const UpdateStreamResponse$inboundSchema: z.ZodType<UpdateStreamResponse, z.ZodTypeDef, unknown>;
/** @internal */
export type UpdateStreamResponse$Outbound = {
    ContentType: string;
    StatusCode: number;
    RawResponse: never;
    error?: components.ErrorT$Outbound | undefined;
};
/** @internal */
export declare const UpdateStreamResponse$outboundSchema: z.ZodType<UpdateStreamResponse$Outbound, z.ZodTypeDef, UpdateStreamResponse>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateStreamResponse$ {
    /** @deprecated use `UpdateStreamResponse$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UpdateStreamResponse, z.ZodTypeDef, unknown>;
    /** @deprecated use `UpdateStreamResponse$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UpdateStreamResponse$Outbound, z.ZodTypeDef, UpdateStreamResponse>;
    /** @deprecated use `UpdateStreamResponse$Outbound` instead. */
    type Outbound = UpdateStreamResponse$Outbound;
}
export declare function updateStreamResponseToJSON(updateStreamResponse: UpdateStreamResponse): string;
export declare function updateStreamResponseFromJSON(jsonString: string): SafeParseResult<UpdateStreamResponse, SDKValidationError>;
//# sourceMappingURL=updatestream.d.ts.map