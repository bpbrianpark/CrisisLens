import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
export type UpdateWebhookRequest = {
    id: string;
    webhook: components.WebhookInput;
};
export type UpdateWebhookResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * Success
     */
    webhook?: components.Webhook | undefined;
    /**
     * Error
     */
    error?: components.ErrorT | undefined;
};
/** @internal */
export declare const UpdateWebhookRequest$inboundSchema: z.ZodType<UpdateWebhookRequest, z.ZodTypeDef, unknown>;
/** @internal */
export type UpdateWebhookRequest$Outbound = {
    id: string;
    webhook: components.WebhookInput$Outbound;
};
/** @internal */
export declare const UpdateWebhookRequest$outboundSchema: z.ZodType<UpdateWebhookRequest$Outbound, z.ZodTypeDef, UpdateWebhookRequest>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateWebhookRequest$ {
    /** @deprecated use `UpdateWebhookRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UpdateWebhookRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `UpdateWebhookRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UpdateWebhookRequest$Outbound, z.ZodTypeDef, UpdateWebhookRequest>;
    /** @deprecated use `UpdateWebhookRequest$Outbound` instead. */
    type Outbound = UpdateWebhookRequest$Outbound;
}
export declare function updateWebhookRequestToJSON(updateWebhookRequest: UpdateWebhookRequest): string;
export declare function updateWebhookRequestFromJSON(jsonString: string): SafeParseResult<UpdateWebhookRequest, SDKValidationError>;
/** @internal */
export declare const UpdateWebhookResponse$inboundSchema: z.ZodType<UpdateWebhookResponse, z.ZodTypeDef, unknown>;
/** @internal */
export type UpdateWebhookResponse$Outbound = {
    ContentType: string;
    StatusCode: number;
    RawResponse: never;
    webhook?: components.Webhook$Outbound | undefined;
    error?: components.ErrorT$Outbound | undefined;
};
/** @internal */
export declare const UpdateWebhookResponse$outboundSchema: z.ZodType<UpdateWebhookResponse$Outbound, z.ZodTypeDef, UpdateWebhookResponse>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateWebhookResponse$ {
    /** @deprecated use `UpdateWebhookResponse$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UpdateWebhookResponse, z.ZodTypeDef, unknown>;
    /** @deprecated use `UpdateWebhookResponse$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UpdateWebhookResponse$Outbound, z.ZodTypeDef, UpdateWebhookResponse>;
    /** @deprecated use `UpdateWebhookResponse$Outbound` instead. */
    type Outbound = UpdateWebhookResponse$Outbound;
}
export declare function updateWebhookResponseToJSON(updateWebhookResponse: UpdateWebhookResponse): string;
export declare function updateWebhookResponseFromJSON(jsonString: string): SafeParseResult<UpdateWebhookResponse, SDKValidationError>;
//# sourceMappingURL=updatewebhook.d.ts.map