"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.UploadAssetResponse$ = exports.UploadAssetResponse$outboundSchema = exports.UploadAssetResponse$inboundSchema = exports.UploadAssetData$ = exports.UploadAssetData$outboundSchema = exports.UploadAssetData$inboundSchema = exports.UploadAssetTask$ = exports.UploadAssetTask$outboundSchema = exports.UploadAssetTask$inboundSchema = exports.UploadAssetDataOutput$ = exports.UploadAssetDataOutput$outboundSchema = exports.UploadAssetDataOutput$inboundSchema = exports.UploadAssetAssetTask$ = exports.UploadAssetAssetTask$outboundSchema = exports.UploadAssetAssetTask$inboundSchema = void 0;
exports.uploadAssetAssetTaskToJSON = uploadAssetAssetTaskToJSON;
exports.uploadAssetAssetTaskFromJSON = uploadAssetAssetTaskFromJSON;
exports.uploadAssetDataOutputToJSON = uploadAssetDataOutputToJSON;
exports.uploadAssetDataOutputFromJSON = uploadAssetDataOutputFromJSON;
exports.uploadAssetTaskToJSON = uploadAssetTaskToJSON;
exports.uploadAssetTaskFromJSON = uploadAssetTaskFromJSON;
exports.uploadAssetDataToJSON = uploadAssetDataToJSON;
exports.uploadAssetDataFromJSON = uploadAssetDataFromJSON;
exports.uploadAssetResponseToJSON = uploadAssetResponseToJSON;
exports.uploadAssetResponseFromJSON = uploadAssetResponseFromJSON;
const z = __importStar(require("zod"));
const primitives_js_1 = require("../../lib/primitives.js");
const schemas_js_1 = require("../../lib/schemas.js");
const components = __importStar(require("../components/index.js"));
/** @internal */
exports.UploadAssetAssetTask$inboundSchema = z.object({
    id: z.string(),
});
/** @internal */
exports.UploadAssetAssetTask$outboundSchema = z.object({
    id: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var UploadAssetAssetTask$;
(function (UploadAssetAssetTask$) {
    /** @deprecated use `UploadAssetAssetTask$inboundSchema` instead. */
    UploadAssetAssetTask$.inboundSchema = exports.UploadAssetAssetTask$inboundSchema;
    /** @deprecated use `UploadAssetAssetTask$outboundSchema` instead. */
    UploadAssetAssetTask$.outboundSchema = exports.UploadAssetAssetTask$outboundSchema;
})(UploadAssetAssetTask$ || (exports.UploadAssetAssetTask$ = UploadAssetAssetTask$ = {}));
function uploadAssetAssetTaskToJSON(uploadAssetAssetTask) {
    return JSON.stringify(exports.UploadAssetAssetTask$outboundSchema.parse(uploadAssetAssetTask));
}
function uploadAssetAssetTaskFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.UploadAssetAssetTask$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UploadAssetAssetTask' from JSON`);
}
/** @internal */
exports.UploadAssetDataOutput$inboundSchema = z.object({
    asset: components.Asset$inboundSchema,
    task: z.lazy(() => exports.UploadAssetAssetTask$inboundSchema),
});
/** @internal */
exports.UploadAssetDataOutput$outboundSchema = z.object({
    asset: components.Asset$outboundSchema,
    task: z.lazy(() => exports.UploadAssetAssetTask$outboundSchema),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var UploadAssetDataOutput$;
(function (UploadAssetDataOutput$) {
    /** @deprecated use `UploadAssetDataOutput$inboundSchema` instead. */
    UploadAssetDataOutput$.inboundSchema = exports.UploadAssetDataOutput$inboundSchema;
    /** @deprecated use `UploadAssetDataOutput$outboundSchema` instead. */
    UploadAssetDataOutput$.outboundSchema = exports.UploadAssetDataOutput$outboundSchema;
})(UploadAssetDataOutput$ || (exports.UploadAssetDataOutput$ = UploadAssetDataOutput$ = {}));
function uploadAssetDataOutputToJSON(uploadAssetDataOutput) {
    return JSON.stringify(exports.UploadAssetDataOutput$outboundSchema.parse(uploadAssetDataOutput));
}
function uploadAssetDataOutputFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.UploadAssetDataOutput$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UploadAssetDataOutput' from JSON`);
}
/** @internal */
exports.UploadAssetTask$inboundSchema = z.object({
    id: z.string(),
});
/** @internal */
exports.UploadAssetTask$outboundSchema = z.object({
    id: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var UploadAssetTask$;
(function (UploadAssetTask$) {
    /** @deprecated use `UploadAssetTask$inboundSchema` instead. */
    UploadAssetTask$.inboundSchema = exports.UploadAssetTask$inboundSchema;
    /** @deprecated use `UploadAssetTask$outboundSchema` instead. */
    UploadAssetTask$.outboundSchema = exports.UploadAssetTask$outboundSchema;
})(UploadAssetTask$ || (exports.UploadAssetTask$ = UploadAssetTask$ = {}));
function uploadAssetTaskToJSON(uploadAssetTask) {
    return JSON.stringify(exports.UploadAssetTask$outboundSchema.parse(uploadAssetTask));
}
function uploadAssetTaskFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.UploadAssetTask$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UploadAssetTask' from JSON`);
}
/** @internal */
exports.UploadAssetData$inboundSchema = z.object({
    asset: components.Asset$inboundSchema,
    task: z.lazy(() => exports.UploadAssetTask$inboundSchema),
});
/** @internal */
exports.UploadAssetData$outboundSchema = z.object({
    asset: components.Asset$outboundSchema,
    task: z.lazy(() => exports.UploadAssetTask$outboundSchema),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var UploadAssetData$;
(function (UploadAssetData$) {
    /** @deprecated use `UploadAssetData$inboundSchema` instead. */
    UploadAssetData$.inboundSchema = exports.UploadAssetData$inboundSchema;
    /** @deprecated use `UploadAssetData$outboundSchema` instead. */
    UploadAssetData$.outboundSchema = exports.UploadAssetData$outboundSchema;
})(UploadAssetData$ || (exports.UploadAssetData$ = UploadAssetData$ = {}));
function uploadAssetDataToJSON(uploadAssetData) {
    return JSON.stringify(exports.UploadAssetData$outboundSchema.parse(uploadAssetData));
}
function uploadAssetDataFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.UploadAssetData$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UploadAssetData' from JSON`);
}
/** @internal */
exports.UploadAssetResponse$inboundSchema = z.object({
    ContentType: z.string(),
    StatusCode: z.number().int(),
    RawResponse: z.instanceof(Response),
    "200_application/json_data": z.lazy(() => exports.UploadAssetData$inboundSchema)
        .optional(),
    "201_application/json_data": z.lazy(() => exports.UploadAssetDataOutput$inboundSchema)
        .optional(),
    error: components.ErrorT$inboundSchema.optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "ContentType": "contentType",
        "StatusCode": "statusCode",
        "RawResponse": "rawResponse",
        "200_application/json_data": "twoHundredApplicationJsonData",
        "201_application/json_data": "twoHundredAndOneApplicationJsonData",
    });
});
/** @internal */
exports.UploadAssetResponse$outboundSchema = z.object({
    contentType: z.string(),
    statusCode: z.number().int(),
    rawResponse: z.instanceof(Response).transform(() => {
        throw new Error("Response cannot be serialized");
    }),
    twoHundredApplicationJsonData: z.lazy(() => exports.UploadAssetData$outboundSchema)
        .optional(),
    twoHundredAndOneApplicationJsonData: z.lazy(() => exports.UploadAssetDataOutput$outboundSchema).optional(),
    error: components.ErrorT$outboundSchema.optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        contentType: "ContentType",
        statusCode: "StatusCode",
        rawResponse: "RawResponse",
        twoHundredApplicationJsonData: "200_application/json_data",
        twoHundredAndOneApplicationJsonData: "201_application/json_data",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var UploadAssetResponse$;
(function (UploadAssetResponse$) {
    /** @deprecated use `UploadAssetResponse$inboundSchema` instead. */
    UploadAssetResponse$.inboundSchema = exports.UploadAssetResponse$inboundSchema;
    /** @deprecated use `UploadAssetResponse$outboundSchema` instead. */
    UploadAssetResponse$.outboundSchema = exports.UploadAssetResponse$outboundSchema;
})(UploadAssetResponse$ || (exports.UploadAssetResponse$ = UploadAssetResponse$ = {}));
function uploadAssetResponseToJSON(uploadAssetResponse) {
    return JSON.stringify(exports.UploadAssetResponse$outboundSchema.parse(uploadAssetResponse));
}
function uploadAssetResponseFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.UploadAssetResponse$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UploadAssetResponse' from JSON`);
}
//# sourceMappingURL=uploadasset.js.map